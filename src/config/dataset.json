[{"query": "How many heads of the departments are older than 56 ?", "sql": "SELECT count(*) FROM head WHERE age  >  56"}, {"query": "List the name, born state and age of the heads of departments ordered by age.", "sql": "SELECT name ,  born_state ,  age FROM head ORDER BY age"}, {"query": "List the creation year, name and budget of each department.", "sql": "SELECT creation ,  name ,  budget_in_billions FROM department"}, {"query": "What are the maximum and minimum budget of the departments?", "sql": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department"}, {"query": "What is the average number of employees of the departments whose rank is between 10 and 15?", "sql": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15"}, {"query": "What are the names of the heads who are born outside the California state?", "sql": "SELECT name FROM head WHERE born_state != 'California'"}, {"query": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?", "sql": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'"}, {"query": "What are the names of the states where at least 3 heads were born?", "sql": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3"}, {"query": "In which year were most departments established?", "sql": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?", "sql": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'"}, {"query": "How many acting statuses are there?", "sql": "SELECT count(DISTINCT temporary_acting) FROM management"}, {"query": "How many departments are led by heads who are not mentioned?", "sql": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);"}, {"query": "What are the distinct ages of the heads who are acting?", "sql": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'"}, {"query": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.", "sql": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'"}, {"query": "Which department has more than 1 head at a time? List the id, name and the number of heads.", "sql": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1"}, {"query": "Which head's name has the substring 'Ha'? List the id and name.", "sql": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'"}, {"query": "How many farms are there?", "sql": "SELECT count(*) FROM farm"}, {"query": "Count the number of farms.", "sql": "SELECT count(*) FROM farm"}, {"query": "List the total number of horses on farms in ascending order.", "sql": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC"}, {"query": "What is the total horses record for each farm, sorted ascending?", "sql": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC"}, {"query": "What are the hosts of competitions whose theme is not \"Aliens\"?", "sql": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'"}, {"query": "Return the hosts of competitions for which the theme is not Aliens?", "sql": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'"}, {"query": "What are the themes of farm competitions sorted by year in ascending order?", "sql": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC"}, {"query": "Return the themes of farm competitions, sorted by year ascending.", "sql": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC"}, {"query": "What is the average number of working horses of farms with more than 5000 total number of horses?", "sql": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000"}, {"query": "Give the average number of working horses on farms with more than 5000 total horses.", "sql": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000"}, {"query": "What are the maximum and minimum number of cows across all farms.", "sql": "SELECT max(Cows) ,  min(Cows) FROM farm"}, {"query": "Return the maximum and minimum number of cows across all farms.", "sql": "SELECT max(Cows) ,  min(Cows) FROM farm"}, {"query": "How many different statuses do cities have?", "sql": "SELECT count(DISTINCT Status) FROM city"}, {"query": "Count the number of different statuses.", "sql": "SELECT count(DISTINCT Status) FROM city"}, {"query": "List official names of cities in descending order of population.", "sql": "SELECT Official_Name FROM city ORDER BY Population DESC"}, {"query": "What are the official names of cities, ordered descending by population?", "sql": "SELECT Official_Name FROM city ORDER BY Population DESC"}, {"query": "List the official name and status of the city with the largest population.", "sql": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1"}, {"query": "What is the official name and status of the city with the most residents?", "sql": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1"}, {"query": "Show the years and the official names of the host cities of competitions.", "sql": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID"}, {"query": "Give the years and official names of the cities of each competition.", "sql": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID"}, {"query": "Show the official names of the cities that have hosted more than one competition.", "sql": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1"}, {"query": "What are the official names of cities that have hosted more than one competition?", "sql": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1"}, {"query": "Show the status of the city that has hosted the greatest number of competitions.", "sql": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What is the status of the city that has hosted the most competitions?", "sql": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Please show the themes of competitions with host cities having populations larger than 1000.", "sql": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000"}, {"query": "What are the themes of competitions that have corresponding host cities with more than 1000 residents?", "sql": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000"}, {"query": "Please show the different statuses of cities and the average population of cities with each status.", "sql": "SELECT Status ,  avg(Population) FROM city GROUP BY Status"}, {"query": "What are the statuses and average populations of each city?", "sql": "SELECT Status ,  avg(Population) FROM city GROUP BY Status"}, {"query": "Please show the different statuses, ordered by the number of cities that have each.", "sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC"}, {"query": "Return the different statuses of cities, ascending by frequency.", "sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC"}, {"query": "List the most common type of Status across cities.", "sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What is the most common status across all cities?", "sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "List the official names of cities that have not held any competition.", "sql": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)"}, {"query": "What are the official names of cities that have not hosted a farm competition?", "sql": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)"}, {"query": "Show the status shared by cities with population bigger than 1500 and smaller than 500.", "sql": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500"}, {"query": "Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?", "sql": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500"}, {"query": "Find the official names of cities with population bigger than 1500 or smaller than 500.", "sql": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500"}, {"query": "What are the official names of cities that have population over 1500 or less than 500?", "sql": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500"}, {"query": "Show the census ranking of cities whose status are not \"Village\".", "sql": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\""}, {"query": "What are the census rankings of cities that do not have the status \"Village\"?", "sql": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\""}, {"query": "which course has most number of registered students?", "sql": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name of the course with the most registered students?", "sql": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "what is id of students who registered some courses but the least number of courses in these students?", "sql": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1"}, {"query": "What are the ids of the students who registered for some courses but had the least number of courses for all students?", "sql": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1"}, {"query": "what are the first name and last name of all candidates?", "sql": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id"}, {"query": "What are the first and last names of all the candidates?", "sql": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id"}, {"query": "List the id of students who never attends courses?", "sql": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"}, {"query": "What are the  ids of every student who has never attended a course?", "sql": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"}, {"query": "List the id of students who attended some courses?", "sql": "SELECT student_id FROM student_course_attendance"}, {"query": "What are the ids of all students who have attended at least one course?", "sql": "SELECT student_id FROM student_course_attendance"}, {"query": "What are the ids of all students for courses and what are the names of those courses?", "sql": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id"}, {"query": "What is detail of the student who most recently registered course?", "sql": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1"}, {"query": "What details do we have on the students who registered for courses most recently?", "sql": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1"}, {"query": "How many students attend course English?", "sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\""}, {"query": "How many students are attending English courses?", "sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\""}, {"query": "How many courses do the student whose id is 171 attend?", "sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171"}, {"query": "How many courses does the student with id 171 actually attend?", "sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171"}, {"query": "Find id of the candidate whose email is stanley.monahan@example.org?", "sql": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\""}, {"query": "What is the id of the candidate whose email is stanley.monahan@example.org?", "sql": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\""}, {"query": "Find id of the candidate who most recently accessed the course?", "sql": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1"}, {"query": "What is the id of the candidate who most recently accessed the course?", "sql": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1"}, {"query": "What is detail of the student who registered the most number of courses?", "sql": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the details of the student who registered for the most number of courses?", "sql": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "List the id of students who registered some courses and the number of their registered courses?", "sql": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id"}, {"query": "For every student who is registered for some course, how many courses are they registered for?", "sql": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id"}, {"query": "How many registed students do each course have? List course name and the number of their registered students?", "sql": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"}, {"query": "For each course id, how many students are registered and what are the course names?", "sql": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"}, {"query": "Find id of candidates whose assessment code is \"Pass\"?", "sql": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\""}, {"query": "What are the ids of the candidates that have an outcome code of Pass?", "sql": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\""}, {"query": "Find the cell mobile number of the candidates whose assessment code is \"Fail\"?", "sql": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\""}, {"query": "What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"?", "sql": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\""}, {"query": "What are the id of students who registered course 301?", "sql": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301"}, {"query": "What are the ids of the students who registered for course 301?", "sql": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301"}, {"query": "What is the id of the student who most recently registered course 301?", "sql": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1"}, {"query": "What are the ids of the students who registered for course 301 most recently?", "sql": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1"}, {"query": "Find distinct cities of addresses of people?", "sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id"}, {"query": "What are the different cities where people live?", "sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id"}, {"query": "Find distinct cities of address of students?", "sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id"}, {"query": "What are the different cities where students live?", "sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id"}, {"query": "List the names of courses in alphabetical order?", "sql": "SELECT course_name FROM courses ORDER BY course_name"}, {"query": "What are the names of the courses in alphabetical order?", "sql": "SELECT course_name FROM courses ORDER BY course_name"}, {"query": "List the first names of people in alphabetical order?", "sql": "SELECT first_name FROM people ORDER BY first_name"}, {"query": "What are the first names of the people in alphabetical order?", "sql": "SELECT first_name FROM people ORDER BY first_name"}, {"query": "What are the id of students who registered courses or attended courses?", "sql": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance"}, {"query": "What are the ids of the students who either registered or attended a course?", "sql": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance"}, {"query": "Find the id of courses which are registered or attended by student whose id is 121?", "sql": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121"}, {"query": "What are the ids of the courses that are registered or attended by the student whose id is 121?", "sql": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121"}, {"query": "What are all info of students who registered courses but not attended courses?", "sql": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"}, {"query": "What are all details of the students who registered but did not attend any course?", "sql": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"}, {"query": "List the id of students who registered course statistics in the order of registration date.", "sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date"}, {"query": "What are the ids of the students who registered course statistics by order of registration date?", "sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date"}, {"query": "List the id of students who attended  statistics courses in the order of attendance date.", "sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance"}, {"query": "What are the ids of the students who attended courses in the statistics department in order of attendance date.", "sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance"}, {"query": "Give me the dates when the max temperature was higher than 85.", "sql": "SELECT date FROM weather WHERE max_temperature_f  >  85"}, {"query": "What are the dates with a maximum temperature higher than 85?", "sql": "SELECT date FROM weather WHERE max_temperature_f  >  85"}, {"query": "What are the names of stations that have latitude lower than 37.5?", "sql": "SELECT name FROM station WHERE lat  <  37.5"}, {"query": "What are the names of all stations with a latitude smaller than 37.5?", "sql": "SELECT name FROM station WHERE lat  <  37.5"}, {"query": "For each city, return the highest latitude among its stations.", "sql": "SELECT city ,  max(lat) FROM station GROUP BY city"}, {"query": "For each city, what is the highest latitude for its stations?", "sql": "SELECT city ,  max(lat) FROM station GROUP BY city"}, {"query": "Give me the start station and end station for the trips with the three oldest id.", "sql": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3"}, {"query": "What is the station station and end station for the trips with the three smallest ids?", "sql": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3"}, {"query": "What is the average latitude and longitude of stations located in San Jose city?", "sql": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\""}, {"query": "What is the average latitude and longitude in San Jose?", "sql": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\""}, {"query": "What is the id of the trip that has the shortest duration?", "sql": "SELECT id FROM trip ORDER BY duration LIMIT 1"}, {"query": "What is the id of the shortest trip?", "sql": "SELECT id FROM trip ORDER BY duration LIMIT 1"}, {"query": "What is the total and maximum duration of trips with bike id 636?", "sql": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636"}, {"query": "What is the total and maximum duration for all trips with the bike id 636?", "sql": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636"}, {"query": "For each zip code, return the average mean temperature of August there.", "sql": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code"}, {"query": "For each zip code, what is the average mean temperature for all dates that start with '8'?", "sql": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code"}, {"query": "From the trip record, find the number of unique bikes.", "sql": "SELECT count(DISTINCT bike_id) FROM trip"}, {"query": "How many different bike ids are there?", "sql": "SELECT count(DISTINCT bike_id) FROM trip"}, {"query": "What is the number of distinct cities the stations are located at?", "sql": "SELECT count(DISTINCT city) FROM station"}, {"query": "How many different cities have these stations?", "sql": "SELECT count(DISTINCT city) FROM station"}, {"query": "How many stations does Mountain View city has?", "sql": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\""}, {"query": "How many stations are in Mountain View?", "sql": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\""}, {"query": "Return the unique name for stations that have ever had 7 bikes available.", "sql": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7"}, {"query": "What are the different names for each station that has ever had 7 bikes available?", "sql": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7"}, {"query": "Which start station had the most trips starting from August? Give me the name and id of the station.", "sql": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What are the start station's name and id for the one that had the most start trips in August?", "sql": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Which bike traveled the most often in zip code 94002?", "sql": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What is the id of the bike that traveled the most in 94002?", "sql": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "How many days had both mean humidity above 50 and mean visibility above 8?", "sql": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8"}, {"query": "What is the number of days that had an average humity above 50 and an average visibility above 8?", "sql": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8"}, {"query": "What is the latitude, longitude, city of the station from which the shortest trip started?", "sql": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1"}, {"query": "What is the latitude, longitude, and city of the station from which the trip with smallest duration started?", "sql": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1"}, {"query": "What are the ids of stations that are located in San Francisco and have average bike availability above 10.", "sql": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10"}, {"query": "What are the ids of the stations in San Francisco that normally have more than 10 bikes available?", "sql": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10"}, {"query": "What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?", "sql": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\""}, {"query": "What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?", "sql": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\""}, {"query": "What is the 3 most common cloud cover rates in the region of zip code 94107?", "sql": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3"}, {"query": "What are the 3 most common cloud covers in the zip code of 94107?", "sql": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3"}, {"query": "What is the zip code in which the average mean sea level pressure is the lowest?", "sql": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1"}, {"query": "What is the zip code that has the lowest average mean sea level pressure?", "sql": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1"}, {"query": "What is the average bike availability in stations that are not located in Palo Alto?", "sql": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")"}, {"query": "What is the average bike availablility for stations not in Palo Alto?", "sql": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")"}, {"query": "What is the average longitude of stations that never had bike availability more than 10?", "sql": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)"}, {"query": "What is the mean longitude for all stations that have never had more than 10 bikes available?", "sql": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)"}, {"query": "When and in what zip code did max temperature reach 80?", "sql": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80"}, {"query": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?", "sql": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80"}, {"query": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.", "sql": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60"}, {"query": "For each zip code, find the ids of all trips that have a higher average mean temperature above 60?", "sql": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60"}, {"query": "For each zip code, return how many times max wind speed reached 25?", "sql": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code"}, {"query": "For each zip code, how many times has the maximum wind speed reached 25 mph?", "sql": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code"}, {"query": "On which day and in which zip code was the min dew point lower than any day in zip code 94107?", "sql": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)"}, {"query": "Which days had a minimum dew point smaller than any day in zip code 94107, and in which zip codes were those measurements taken?", "sql": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)"}, {"query": "For each trip, return its ending station's installation date.", "sql": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id"}, {"query": "What is the installation date for each ending station on all the trips?", "sql": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id"}, {"query": "Which trip started from the station with the largest dock count? Give me the trip id.", "sql": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1"}, {"query": "What is the id of the trip that started from the station with the highest dock count?", "sql": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1"}, {"query": "Count the number of trips that did not end in San Francisco city.", "sql": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\""}, {"query": "How many trips did not end in San Francisco?", "sql": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\""}, {"query": "In zip code 94107, on which day neither Fog nor Rain was not observed?", "sql": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\""}, {"query": "On which day has it neither been foggy nor rained in the zip code of 94107?", "sql": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\""}, {"query": "What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?", "sql": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7"}, {"query": "What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available?", "sql": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7"}, {"query": "What are names of stations that have average bike availability above 10 and are not located in San Jose city?", "sql": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\""}, {"query": "What are the names of all stations that have more than 10 bikes available and are not located in San Jose?", "sql": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\""}, {"query": "What are the name, latitude, and city of the station with the lowest latitude?", "sql": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1"}, {"query": "What is the name, latitude, and city of the station that is located the furthest South?", "sql": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1"}, {"query": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?", "sql": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3"}, {"query": "What is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds?", "sql": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3"}, {"query": "List the name and the number of stations for all the cities that have at least 15 stations.", "sql": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15"}, {"query": "What is the name of every city that has at least 15 stations and how many stations does it have?", "sql": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15"}, {"query": "Find the ids and names of stations from which at least 200 trips started.", "sql": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200"}, {"query": "What are the ids and names of all start stations that were the beginning of at least 200 trips?", "sql": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200"}, {"query": "Find the zip code in which the average mean visibility is lower than 10.", "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10"}, {"query": "For each zip code, select all those that have an average mean visiblity below 10.", "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10"}, {"query": "List all the cities in a decreasing order of each city's stations' highest latitude.", "sql": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC"}, {"query": "For each city, list their names in decreasing order by their highest station latitude.", "sql": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC"}, {"query": "What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.", "sql": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5"}, {"query": "What are the dates that have the 5 highest cloud cover rates and what are the rates?", "sql": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5"}, {"query": "What are the ids and durations of the trips with the top 3 durations?", "sql": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3"}, {"query": "What are the ids of the trips that lasted the longest and how long did they last?", "sql": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3"}, {"query": "For each station, return its longitude and the average duration of trips that started from the station.", "sql": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id"}, {"query": "For each start station id, what is its name, longitude and average duration of trips started there?", "sql": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id"}, {"query": "For each station, find its latitude and the minimum duration of trips that ended at the station.", "sql": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id"}, {"query": "For each end station id, what is its name, latitude, and minimum duration for trips ended there?", "sql": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id"}, {"query": "List all the distinct stations from which a trip of duration below 100 started.", "sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100"}, {"query": "What are all the different start station names for a trip that lasted less than 100?", "sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100"}, {"query": "Find all the zip codes in which the max dew point have never reached 70.", "sql": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70"}, {"query": "What are all the different zip codes that have a maximum dew point that was always below 70?", "sql": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70"}, {"query": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.", "sql": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)"}, {"query": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?", "sql": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)"}, {"query": "What are the dates in which the mean sea level pressure was between 30.3 and 31?", "sql": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31"}, {"query": "What are the dates that have an average sea level pressure between 30.3 and 31?", "sql": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31"}, {"query": "Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.", "sql": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1"}, {"query": "What are the days that had the smallest temperature range, and what was that range?", "sql": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1"}, {"query": "What are the id and name of the stations that have ever had more than 12 bikes available?", "sql": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12"}, {"query": "What are the different ids and names of the stations that have had more than 12 bikes available?", "sql": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12"}, {"query": "Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.", "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100"}, {"query": "What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?", "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100"}, {"query": "What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?", "sql": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100"}, {"query": "What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips", "sql": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100"}, {"query": "How many trips started from Mountain View city and ended at Palo Alto city?", "sql": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\""}, {"query": "How many trips stated from  a station in Mountain View and ended at one in Palo Alto?", "sql": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\""}, {"query": "What is the average latitude and longitude of the starting points of all trips?", "sql": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id"}, {"query": "What is the average latitude and longitude of all starting stations for the trips?", "sql": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id"}, {"query": "How many books are there?", "sql": "SELECT count(*) FROM book"}, {"query": "List the writers of the books in ascending alphabetical order.", "sql": "SELECT Writer FROM book ORDER BY Writer ASC"}, {"query": "List the titles of the books in ascending order of issues.", "sql": "SELECT Title FROM book ORDER BY Issues ASC"}, {"query": "What are the titles of the books whose writer is not \"Elaine Lee\"?", "sql": "SELECT Title FROM book WHERE Writer != \"Elaine Lee\""}, {"query": "What are the title and issues of the books?", "sql": "SELECT Title ,  Issues FROM book"}, {"query": "What are the dates of publications in descending order of price?", "sql": "SELECT Publication_Date FROM publication ORDER BY Price DESC"}, {"query": "What are the distinct publishers of publications with price higher than 5000000?", "sql": "SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000"}, {"query": "List the publisher of the publication with the highest price.", "sql": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1"}, {"query": "List the publication dates of publications with 3 lowest prices.", "sql": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3"}, {"query": "Show the title and publication dates of books.", "sql": "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID"}, {"query": "Show writers who have published a book with price more than 4000000.", "sql": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000"}, {"query": "Show the titles of books in descending order of publication price.", "sql": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC"}, {"query": "Show publishers that have more than one publication.", "sql": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1"}, {"query": "Show different publishers together with the number of publications they have.", "sql": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher"}, {"query": "Please show the most common publication date.", "sql": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "List the writers who have written more than one book.", "sql": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1"}, {"query": "List the titles of books that are not published.", "sql": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)"}, {"query": "Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.", "sql": "SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000"}, {"query": "What is the number of distinct publication dates?", "sql": "SELECT COUNT (DISTINCT Publication_Date) FROM publication"}, {"query": "How many distinct publication dates are there in our record?", "sql": "SELECT COUNT (DISTINCT Publication_Date) FROM publication"}, {"query": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"", "sql": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\""}, {"query": "How many actors are there?", "sql": "SELECT count(*) FROM actor"}, {"query": "Count the number of actors.", "sql": "SELECT count(*) FROM actor"}, {"query": "List the name of actors in ascending alphabetical order.", "sql": "SELECT Name FROM actor ORDER BY Name ASC"}, {"query": "What are the names of actors, ordered alphabetically?", "sql": "SELECT Name FROM actor ORDER BY Name ASC"}, {"query": "What are the characters and duration of actors?", "sql": "SELECT Character ,  Duration FROM actor"}, {"query": "Return the characters and durations for each actor.", "sql": "SELECT Character ,  Duration FROM actor"}, {"query": "List the name of actors whose age is not 20.", "sql": "SELECT Name FROM actor WHERE Age != 20"}, {"query": "What are the names of actors who are not 20 years old?", "sql": "SELECT Name FROM actor WHERE Age != 20"}, {"query": "What are the characters of actors in descending order of age?", "sql": "SELECT Character FROM actor ORDER BY age DESC"}, {"query": "Return the characters for actors, ordered by age descending.", "sql": "SELECT Character FROM actor ORDER BY age DESC"}, {"query": "What is the duration of the oldest actor?", "sql": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1"}, {"query": "Return the duration of the actor with the greatest age.", "sql": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1"}, {"query": "What are the names of musicals with nominee \"Bob Fosse\"?", "sql": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\""}, {"query": "Return the names of musicals who have the nominee Bob Fosse.", "sql": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\""}, {"query": "What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?", "sql": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\""}, {"query": "Return the different nominees of musicals that have an award that is not the Tony Award.", "sql": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\""}, {"query": "Show names of actors and names of musicals they are in.", "sql": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID"}, {"query": "What are the names of actors and the musicals that they are in?", "sql": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID"}, {"query": "Show names of actors that have appeared in musical with name \"The Phantom of the Opera\".", "sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\""}, {"query": "What are the names of actors who have been in the musical titled The Phantom of the Opera?", "sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\""}, {"query": "Show names of actors in descending order of the year their musical is awarded.", "sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC"}, {"query": "What are the names of actors ordered descending by the year in which their musical was awarded?", "sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC"}, {"query": "Show names of musicals and the number of actors who have appeared in the musicals.", "sql": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID"}, {"query": "How many actors have appeared in each musical?", "sql": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID"}, {"query": "Show names of musicals which have at least three actors.", "sql": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3"}, {"query": "What are the names of musicals who have at 3 or more actors?", "sql": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3"}, {"query": "Show different nominees and the number of musicals they have been nominated.", "sql": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee"}, {"query": "How many musicals has each nominee been nominated for?", "sql": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee"}, {"query": "Please show the nominee who has been nominated the greatest number of times.", "sql": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Who is the nominee who has been nominated for the most musicals?", "sql": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "List the most common result of the musicals.", "sql": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Return the most frequent result across all musicals.", "sql": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "List the nominees that have been nominated more than two musicals.", "sql": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2"}, {"query": "Who are the nominees who have been nominated more than two times?", "sql": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2"}, {"query": "List the name of musicals that do not have actors.", "sql": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)"}, {"query": "What are the names of musicals who have no actors?", "sql": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)"}, {"query": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".", "sql": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\""}, {"query": "Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?", "sql": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\""}, {"query": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".", "sql": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\""}, {"query": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?", "sql": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\""}, {"query": "Find the emails of the user named \"Mary\".", "sql": "SELECT email FROM user_profiles WHERE name  =  'Mary'"}, {"query": "What is the partition id of the user named \"Iron Man\".", "sql": "SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man'"}, {"query": "How many users are there?", "sql": "SELECT count(*) FROM user_profiles"}, {"query": "How many followers does each user have?", "sql": "SELECT count(*) FROM follows"}, {"query": "Find the number of followers for each user.", "sql": "SELECT count(*) FROM follows GROUP BY f1"}, {"query": "Find the number of tweets in record.", "sql": "SELECT count(*) FROM tweets"}, {"query": "Find the number of users who posted some tweets.", "sql": "SELECT count(DISTINCT UID) FROM tweets"}, {"query": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.", "sql": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'"}, {"query": "Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.", "sql": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'"}, {"query": "Return the text of tweets about the topic 'intern'.", "sql": "SELECT text FROM tweets WHERE text LIKE '%intern%'"}, {"query": "Find the name and email of the users who have more than 1000 followers.", "sql": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000"}, {"query": "Find the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\".", "sql": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift')"}, {"query": "Find the name and email for the users who have more than one follower.", "sql": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1"}, {"query": "Find the names of users who have more than one tweet.", "sql": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1"}, {"query": "Find the id of users who are followed by Mary and Susan.", "sql": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\""}, {"query": "Find the id of users who are followed by Mary or Susan.", "sql": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" OR T1.name  =  \"Susan\""}, {"query": "Find the name of the user who has the largest number of followers.", "sql": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1"}, {"query": "Find the name and email of the user followed by the least number of people.", "sql": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1"}, {"query": "List the name and number of followers for each user, and sort the results by the number of followers in descending order.", "sql": "SELECT name ,  followers FROM user_profiles ORDER BY followers DESC"}, {"query": "List the names of 5 users followed by the largest number of other users.", "sql": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5"}, {"query": "List the text of all tweets in the order of date.", "sql": "SELECT text FROM tweets ORDER BY createdate"}, {"query": "Find the name of each user and number of tweets tweeted by each of them.", "sql": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid"}, {"query": "Find the name and partition id for users who tweeted less than twice.", "sql": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2"}, {"query": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them.", "sql": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1"}, {"query": "Find the average number of followers for the users who do not have any tweet.", "sql": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)"}, {"query": "Find the average number of followers for the users who had some tweets.", "sql": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)"}, {"query": "Find the maximum and total number of followers of all users.", "sql": "SELECT max(followers) ,  sum(followers) FROM user_profiles"}, {"query": "Find the names of all the catalog entries.", "sql": "SELECT distinct(catalog_entry_name) FROM catalog_contents"}, {"query": "What are all the catalog entry names?", "sql": "SELECT distinct(catalog_entry_name) FROM catalog_contents"}, {"query": "Find the list of attribute data types possessed by more than 3 attribute definitions.", "sql": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3"}, {"query": "What are the attribute data types with more than 3 attribute definitions?", "sql": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3"}, {"query": "What is the attribute data type of the attribute with name \"Green\"?", "sql": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\""}, {"query": "Find the attribute data type for the attribute named \"Green\".", "sql": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\""}, {"query": "Find the name and level of catalog structure with level between 5 and 10.", "sql": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10"}, {"query": "What are the name and level of catalog structure with level number between 5 and 10", "sql": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10"}, {"query": "Find all the catalog publishers whose name contains \"Murray\"", "sql": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\""}, {"query": "Which catalog publishers have substring \"Murray\" in their names?", "sql": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\""}, {"query": "Which catalog publisher has published the most catalogs?", "sql": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the catalog publisher that has the most catalogs.", "sql": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the names and publication dates of all catalogs that have catalog level number greater than 5.", "sql": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5"}, {"query": "What are the name and publication date of the catalogs with catalog level number above 5?", "sql": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5"}, {"query": "What are the entry names of catalog with the attribute possessed by most entries.", "sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)"}, {"query": "Find the entry names of the catalog with the attribute that have the most entries.", "sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)"}, {"query": "What is the entry name of the most expensive catalog (in USD)?", "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1"}, {"query": "Find the entry name of the catalog with the highest price (in USD).", "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1"}, {"query": "What is the level name of the cheapest catalog (in USD)?", "sql": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1"}, {"query": "Find the level name of the catalog with the lowest price (in USD).", "sql": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1"}, {"query": "What are the average and minimum price (in Euro) of all products?", "sql": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents"}, {"query": "Give me the average and minimum price (in Euro) of the products.", "sql": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents"}, {"query": "What is the product with the highest height? Give me the catalog entry name.", "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1"}, {"query": "Which catalog content has the highest height? Give me the catalog entry name.", "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1"}, {"query": "Find the name of the product that has the smallest capacity.", "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1"}, {"query": "Which catalog content has the smallest capacity? Return the catalog entry name.", "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1"}, {"query": "Find the names of all the products whose stock number starts with \"2\".", "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\""}, {"query": "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names.", "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\""}, {"query": "Find the names of catalog entries with level number 8.", "sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\""}, {"query": "What are the names of catalog entries with level number 8?", "sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\""}, {"query": "Find the names of the products with length smaller than 3 or height greater than 5.", "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5"}, {"query": "Which catalog contents have length below 3 or above 5? Find the catalog entry names.", "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5"}, {"query": "Find the name and attribute ID of the attribute definitions with attribute value 0.", "sql": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0"}, {"query": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.", "sql": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0"}, {"query": "Find the name and capacity of products with price greater than 700 (in USD).", "sql": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700"}, {"query": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.", "sql": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700"}, {"query": "Find the dates on which more than one revisions were made.", "sql": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1"}, {"query": "On which days more than one revisions were made on catalogs.", "sql": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1"}, {"query": "How many products are there in the records?", "sql": "SELECT count(*) FROM catalog_contents"}, {"query": "Find the total number of catalog contents.", "sql": "SELECT count(*) FROM catalog_contents"}, {"query": "Name all the products with next entry ID greater than 8.", "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8"}, {"query": "What are the catalog entry names of the products with next entry ID above 8?", "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8"}, {"query": "How many aircrafts do we have?", "sql": "SELECT count(*) FROM Aircraft"}, {"query": "How many aircrafts exist in the database?", "sql": "SELECT count(*) FROM Aircraft"}, {"query": "Show name and distance for all aircrafts.", "sql": "SELECT name ,  distance FROM Aircraft"}, {"query": "What are the names and distances for all airplanes?", "sql": "SELECT name ,  distance FROM Aircraft"}, {"query": "Show ids for all aircrafts with more than 1000 distance.", "sql": "SELECT aid FROM Aircraft WHERE distance  >  1000"}, {"query": "What are the ids of all aircrafts that can cover a distance of more than 1000?", "sql": "SELECT aid FROM Aircraft WHERE distance  >  1000"}, {"query": "How many aircrafts have distance between 1000 and 5000?", "sql": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000"}, {"query": "What is the count of aircrafts that have a distance between 1000 and 5000?", "sql": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000"}, {"query": "What is the name and distance for aircraft with id 12?", "sql": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12"}, {"query": "What is the name and distance for the aircraft that has an id of 12?", "sql": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12"}, {"query": "What is the minimum, average, and maximum distance of all aircrafts.", "sql": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft"}, {"query": "Return the minimum, average and maximum distances traveled across all aircrafts.", "sql": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft"}, {"query": "Show the id and name of the aircraft with the maximum distance.", "sql": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1"}, {"query": "What is the id and name of the aircraft that can cover the maximum distance?", "sql": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1"}, {"query": "Show the name of aircrafts with top three lowest distances.", "sql": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3"}, {"query": "What are the aircrafts with top 3 shortest lengthes? List their names.", "sql": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3"}, {"query": "Show names for all aircrafts with distances more than the average.", "sql": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)"}, {"query": "What are the names of all aircrafts that can cover more distances than average?", "sql": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)"}, {"query": "How many employees do we have?", "sql": "SELECT count(*) FROM Employee"}, {"query": "What is the number of employees?", "sql": "SELECT count(*) FROM Employee"}, {"query": "Show name and salary for all employees sorted by salary.", "sql": "SELECT name ,  salary FROM Employee ORDER BY salary"}, {"query": "What is the name and salary of all employees in order of salary?", "sql": "SELECT name ,  salary FROM Employee ORDER BY salary"}, {"query": "Show ids for all employees with at least 100000 salary.", "sql": "SELECT eid FROM Employee WHERE salary  >  100000"}, {"query": "What is the id of every employee who has at least a salary of  100000?", "sql": "SELECT eid FROM Employee WHERE salary  >  100000"}, {"query": "How many employees have salary between 100000 and 200000?", "sql": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000"}, {"query": "What is the number of employees that have a salary between 100000 and 200000?", "sql": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000"}, {"query": "What is the name and salary for employee with id 242518965?", "sql": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965"}, {"query": "What is the name and salary of the employee with the id 242518965?", "sql": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965"}, {"query": "What is average and maximum salary of all employees.", "sql": "SELECT avg(salary) ,  max(salary) FROM Employee"}, {"query": "What is the average and largest salary of all employees?", "sql": "SELECT avg(salary) ,  max(salary) FROM Employee"}, {"query": "Show the id and name of the employee with maximum salary.", "sql": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1"}, {"query": "What is the id and name of the employee with the highest salary?", "sql": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1"}, {"query": "Show the name of employees with three lowest salaries.", "sql": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3"}, {"query": "What is the name of the 3 employees who get paid the least?", "sql": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3"}, {"query": "Show names for all employees with salary more than the average.", "sql": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)"}, {"query": "What are the names of all employees who have a salary higher than average?", "sql": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)"}, {"query": "Show the id and salary of Mark Young.", "sql": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'"}, {"query": "What is the id and salary of the employee named Mark Young?", "sql": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'"}, {"query": "How many flights do we have?", "sql": "SELECT count(*) FROM Flight"}, {"query": "What is the number of flights?", "sql": "SELECT count(*) FROM Flight"}, {"query": "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.", "sql": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin"}, {"query": "What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?", "sql": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin"}, {"query": "Show all flight number from Los Angeles.", "sql": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\""}, {"query": "What are the numbers of all flights coming from Los Angeles?", "sql": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\""}, {"query": "Show origins of all flights with destination Honolulu.", "sql": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\""}, {"query": "What are the origins of all flights that are headed to Honolulu?", "sql": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\""}, {"query": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.", "sql": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\""}, {"query": "What are the departure and arrival dates of all flights from LA to Honolulu?", "sql": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\""}, {"query": "Show flight number for all flights with more than 2000 distance.", "sql": "SELECT flno FROM Flight WHERE distance  >  2000"}, {"query": "What are the numbers of all flights that can cover a distance of more than 2000?", "sql": "SELECT flno FROM Flight WHERE distance  >  2000"}, {"query": "What is the average price for flights from Los Angeles to Honolulu.", "sql": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\""}, {"query": "What is the average price for flights from LA to Honolulu?", "sql": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\""}, {"query": "Show origin and destination for flights with price higher than 300.", "sql": "SELECT origin ,  destination FROM Flight WHERE price  >  300"}, {"query": "What is the origin and destination for all flights whose price is higher than 300?", "sql": "SELECT origin ,  destination FROM Flight WHERE price  >  300"}, {"query": "Show the flight number and distance of the flight with maximum price.", "sql": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1"}, {"query": "What is the flight number and its distance for the one with the maximum price?", "sql": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1"}, {"query": "Show the flight number of flights with three lowest distances.", "sql": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3"}, {"query": "What are the numbers of the shortest flights?", "sql": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3"}, {"query": "What is the average distance and average price for flights from Los Angeles.", "sql": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\""}, {"query": "What is the average distance and price for all flights from LA?", "sql": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\""}, {"query": "Show all origins and the number of flights from each origin.", "sql": "SELECT origin ,  count(*) FROM Flight GROUP BY origin"}, {"query": "For each origin, how many flights came from there?", "sql": "SELECT origin ,  count(*) FROM Flight GROUP BY origin"}, {"query": "Show all destinations and the number of flights to each destination.", "sql": "SELECT destination ,  count(*) FROM Flight GROUP BY destination"}, {"query": "What are the destinations and number of flights to each one?", "sql": "SELECT destination ,  count(*) FROM Flight GROUP BY destination"}, {"query": "Which origin has most number of flights?", "sql": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1"}, {"query": "What place has the most flights coming from there?", "sql": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which destination has least number of flights?", "sql": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"}, {"query": "What destination has the fewest number of flights?", "sql": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"}, {"query": "What is the aircraft name for the flight with number 99", "sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99"}, {"query": "What is the name of the aircraft that was on flight number 99?", "sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99"}, {"query": "Show all flight numbers with aircraft Airbus A340-300.", "sql": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\""}, {"query": "What are the flight numbers for the aircraft Airbus A340-300?", "sql": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\""}, {"query": "Show aircraft names and number of flights for each aircraft.", "sql": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid"}, {"query": "What is the name of each aircraft and how many flights does each one complete?", "sql": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid"}, {"query": "Show names for all aircraft with at least two flights.", "sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2"}, {"query": "What are the names for all aircrafts with at least 2 flights?", "sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2"}, {"query": "How many employees have certificate.", "sql": "SELECT count(DISTINCT eid) FROM Certificate"}, {"query": "What is the count of distinct employees with certificates?", "sql": "SELECT count(DISTINCT eid) FROM Certificate"}, {"query": "Show ids for all employees who don't have a certificate.", "sql": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate"}, {"query": "What are the ids of all employees that don't have certificates?", "sql": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate"}, {"query": "Show names for all aircrafts of which John Williams has certificates.", "sql": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\""}, {"query": "What are the names of all aircrafts that John Williams have certificates to be able to fly?", "sql": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\""}, {"query": "Show names for all employees who have certificate of Boeing 737-800.", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\""}, {"query": "What are the names of all employees who have a certificate to fly Boeing 737-800?", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\""}, {"query": "Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\""}, {"query": "What are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300?", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\""}, {"query": "Show names for all employees who do not have certificate of Boeing 737-800.", "sql": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\""}, {"query": "What are the names of all employees who are not certified to fly Boeing 737-800s?", "sql": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\""}, {"query": "Show the name of aircraft which fewest people have its certificate.", "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the names of the aircraft that the least people are certified to fly?", "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.", "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5"}, {"query": "What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?", "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5"}, {"query": "what is the salary and name of the employee who has the most number of aircraft certificates?", "sql": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the salaray and name of the employee that is certified to fly the most planes?", "sql": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the salaray and name of the employee with the most certificates to fly planes more than 5000?", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1"}, {"query": "How many allergies are there?", "sql": "SELECT count(DISTINCT allergy) FROM Allergy_type"}, {"query": "How many allergy entries are there?", "sql": "SELECT count(DISTINCT allergy) FROM Allergy_type"}, {"query": "How many different allergy types exist?", "sql": "SELECT count(DISTINCT allergytype) FROM Allergy_type"}, {"query": "How many distinct allergies are there?", "sql": "SELECT count(DISTINCT allergytype) FROM Allergy_type"}, {"query": "Show all allergy types.", "sql": "SELECT DISTINCT allergytype FROM Allergy_type"}, {"query": "What are the different allergy types?", "sql": "SELECT DISTINCT allergytype FROM Allergy_type"}, {"query": "Show all allergies and their types.", "sql": "SELECT allergy ,  allergytype FROM Allergy_type"}, {"query": "What are the allergies and their types?", "sql": "SELECT allergy ,  allergytype FROM Allergy_type"}, {"query": "Show all allergies with type food.", "sql": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\""}, {"query": "What are all the different food allergies?", "sql": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\""}, {"query": "What is the type of allergy Cat?", "sql": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\""}, {"query": "What is allergy type of a cat allergy?", "sql": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\""}, {"query": "How many allergies have type animal?", "sql": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\""}, {"query": "How many animal type allergies exist?", "sql": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\""}, {"query": "Show all allergy types and the number of allergies in each type.", "sql": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype"}, {"query": "What are the allergy types and how many allergies correspond to each one?", "sql": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype"}, {"query": "Which allergy type has most number of allergies?", "sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which allergy type is most common?", "sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which allergy type has least number of allergies?", "sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1"}, {"query": "Which allergy type is the least common?", "sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1"}, {"query": "How many students are there?", "sql": "SELECT count(*) FROM Student"}, {"query": "What is the total number of students?", "sql": "SELECT count(*) FROM Student"}, {"query": "Show first name and last name for all students.", "sql": "SELECT Fname ,  Lname FROM Student"}, {"query": "What are the full names of all students", "sql": "SELECT Fname ,  Lname FROM Student"}, {"query": "How many different advisors are listed?", "sql": "SELECT count(DISTINCT advisor) FROM Student"}, {"query": "How many advisors are there?", "sql": "SELECT count(DISTINCT advisor) FROM Student"}, {"query": "Show all majors.", "sql": "SELECT DISTINCT Major FROM Student"}, {"query": "What are the different majors?", "sql": "SELECT DISTINCT Major FROM Student"}, {"query": "Show all cities where students live.", "sql": "SELECT DISTINCT city_code FROM Student"}, {"query": "What cities do students live in?", "sql": "SELECT DISTINCT city_code FROM Student"}, {"query": "Show first name, last name, age for all female students. Their sex is F.", "sql": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'"}, {"query": "What are the full names and ages for all female students whose sex is F?", "sql": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'"}, {"query": "Show student ids for all male students.", "sql": "SELECT StuID FROM Student WHERE Sex  =  'M'"}, {"query": "What are the student ids for all male students?", "sql": "SELECT StuID FROM Student WHERE Sex  =  'M'"}, {"query": "How many students are age 18?", "sql": "SELECT count(*) FROM Student WHERE age  =  18"}, {"query": "How many students are 18 years old?", "sql": "SELECT count(*) FROM Student WHERE age  =  18"}, {"query": "Show all student ids who are older than 20.", "sql": "SELECT StuID FROM Student WHERE age  >  20"}, {"query": "What are the student ids for students over 20 years old?", "sql": "SELECT StuID FROM Student WHERE age  >  20"}, {"query": "Which city does the student whose last name is \"Kim\" live in?", "sql": "SELECT city_code FROM Student WHERE LName  =  \"Kim\""}, {"query": "Give the city that the student whose family name is Kim lives in.", "sql": "SELECT city_code FROM Student WHERE LName  =  \"Kim\""}, {"query": "Who is the advisor of student with ID 1004?", "sql": "SELECT Advisor FROM Student WHERE StuID  =  1004"}, {"query": "Who advises student 1004?", "sql": "SELECT Advisor FROM Student WHERE StuID  =  1004"}, {"query": "How many students live in HKG or CHI?", "sql": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\""}, {"query": "Give the number of students living in either HKG or CHI.", "sql": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\""}, {"query": "Show the minimum, average, and maximum age of all students.", "sql": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student"}, {"query": "What is the minimum, mean, and maximum age across all students?", "sql": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student"}, {"query": "What is the last name of the youngest student?", "sql": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)"}, {"query": "Provide the last name of the youngest student.", "sql": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)"}, {"query": "Show the student id of the oldest student.", "sql": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)"}, {"query": "What student id corresponds to the oldest student?", "sql": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)"}, {"query": "Show all majors and corresponding number of students.", "sql": "SELECT major ,  count(*) FROM Student GROUP BY major"}, {"query": "How many students are there for each major?", "sql": "SELECT major ,  count(*) FROM Student GROUP BY major"}, {"query": "Which major has most number of students?", "sql": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the largest major?", "sql": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show all ages and corresponding number of students.", "sql": "SELECT age ,  count(*) FROM Student GROUP BY age"}, {"query": "How old is each student and how many students are each age?", "sql": "SELECT age ,  count(*) FROM Student GROUP BY age"}, {"query": "Show the average age for male and female students.", "sql": "SELECT avg(age) ,  sex FROM Student GROUP BY sex"}, {"query": "What are the average ages for male and female students?", "sql": "SELECT avg(age) ,  sex FROM Student GROUP BY sex"}, {"query": "Show all cities and corresponding number of students.", "sql": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code"}, {"query": "How many students live in each city?", "sql": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code"}, {"query": "Show all advisors and corresponding number of students.", "sql": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor"}, {"query": "How many students does each advisor have?", "sql": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor"}, {"query": "Which advisor has most number of students?", "sql": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1"}, {"query": "Give the advisor with the most students.", "sql": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1"}, {"query": "How many students have cat allergies?", "sql": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\""}, {"query": "How many students are affected by cat allergies?", "sql": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\""}, {"query": "Show all student IDs who have at least two allergies.", "sql": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2"}, {"query": "What are the students ids of students who have more than one allergy?", "sql": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2"}, {"query": "What are the student ids of students who don't have any allergies?", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy"}, {"query": "Which students are unaffected by allergies?", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy"}, {"query": "How many female students have milk or egg allergies?", "sql": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\""}, {"query": "How many students who are female are allergic to milk or eggs?", "sql": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\""}, {"query": "How many students have a food allergy?", "sql": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\""}, {"query": "How many students are affected by food related allergies?", "sql": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\""}, {"query": "Which allergy has most number of students affected?", "sql": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which allergy is the most common?", "sql": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show all allergies with number of students affected.", "sql": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy"}, {"query": "How many students have each different allergy?", "sql": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy"}, {"query": "Show all allergy type with number of students affected.", "sql": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype"}, {"query": "How many students are affected by each allergy type?", "sql": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype"}, {"query": "Find the last name and age of the student who has allergy to both milk and cat.", "sql": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")"}, {"query": "What are the last names and ages of the students who are allergic to milk and cat?", "sql": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")"}, {"query": "What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.", "sql": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy"}, {"query": "What are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names.", "sql": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy"}, {"query": "Find the first name and gender of the student who has allergy to milk but not cat.", "sql": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")"}, {"query": "What are the first name and gender of the students who have allergy to milk but can put up with cats?", "sql": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")"}, {"query": "Find the average age of the students who have allergies with food and animal types.", "sql": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")"}, {"query": "How old are the students with allergies to food and animal types on average?", "sql": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")"}, {"query": "List the first and last name of the students who do not have any food type allergy.", "sql": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")"}, {"query": "What is the full name of each student who is not allergic to any type of food.", "sql": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")"}, {"query": "Find the number of male (sex is 'M') students who have some food type allery.", "sql": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")"}, {"query": "How many male students (sex is 'M') are allergic to any type of food?", "sql": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")"}, {"query": "Find the different first names and cities of the students who have allergy to milk or cat.", "sql": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\""}, {"query": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?", "sql": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\""}, {"query": "Find the number of students who are older than 18 and do not have allergy to either food or animal.", "sql": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")"}, {"query": "How many students are over 18 and do not have allergy to food type or animal type?", "sql": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")"}, {"query": "Find the first name and major of the students who are not allegry to soy.", "sql": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")"}, {"query": "What are the first name and major of the students who are able to consume soy?", "sql": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")"}, {"query": "A list of the top 5 countries by number of invoices. List country name and number of invoices.", "sql": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;"}, {"query": "What are the top 5 countries by number of invoices and how many do they have?", "sql": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;"}, {"query": "A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.", "sql": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;"}, {"query": "What are the names of the top 8 countries by total invoice size and what are those sizes?", "sql": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;"}, {"query": "A list of the top 10 countries by average invoice size. List country name and average invoice size.", "sql": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;"}, {"query": "What are the names of the countries and average invoice size of the top countries by size?", "sql": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;"}, {"query": "Find out 5 customers who most recently purchased something. List customers' first and last name.", "sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;"}, {"query": "What are the first and last names of the 5 customers who purchased something most recently?", "sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;"}, {"query": "Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.", "sql": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;"}, {"query": "What are the top 10 customers' first and last names by total number of orders and how many orders did they make?", "sql": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;"}, {"query": "List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.", "sql": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;"}, {"query": "What are the top 10 customers' first and last names with the highest gross sales, and also what are the sales?", "sql": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;"}, {"query": "List the top 5 genres by number of tracks. List genres name and total tracks.", "sql": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;"}, {"query": "How many tracks does each genre have and what are the names of the top 5?", "sql": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;"}, {"query": "List every album's title.", "sql": "SELECT title FROM albums;"}, {"query": "What are the titles of all the albums?", "sql": "SELECT title FROM albums;"}, {"query": "List every album ordered by album title in ascending order.", "sql": "SELECT title FROM albums ORDER BY title;"}, {"query": "What are the titles of all the albums alphabetically ascending?", "sql": "SELECT title FROM albums ORDER BY title;"}, {"query": "List every album whose title starts with A in alphabetical order.", "sql": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;"}, {"query": "What are the titles of all albums that start with A in alphabetical order?", "sql": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;"}, {"query": "List the customers first and last name of 10 least expensive invoices.", "sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;"}, {"query": "What are the first and last names of the customers with the 10 cheapest invoices?", "sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;"}, {"query": "List total amount of  invoice from Chicago, IL.", "sql": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";"}, {"query": "What are the total amount of money in the invoices billed from Chicago, Illinois?", "sql": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";"}, {"query": "List the number of invoices from Chicago, IL.", "sql": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";"}, {"query": "How many invoices were billed from Chicago, IL?", "sql": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";"}, {"query": "List the number of invoices from the US, grouped by state.", "sql": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;"}, {"query": "How many invoices were billed from each state?", "sql": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;"}, {"query": "List the state in the US with the most invoices.", "sql": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;"}, {"query": "What are the states with the most invoices?", "sql": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;"}, {"query": "List the number of invoices and the invoice total from California.", "sql": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";"}, {"query": "What is the number of invoices and total money billed in them from CA?", "sql": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";"}, {"query": "List Aerosmith's albums.", "sql": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";"}, {"query": "What are the titles of all the Aerosmith albums?", "sql": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";"}, {"query": "How many albums does Billy Cobham has?", "sql": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";"}, {"query": "How many albums has Billy Cobam released?", "sql": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";"}, {"query": "Eduardo Martins is a customer at which company?", "sql": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";"}, {"query": "What is the company where Eduardo Martins is a customer?", "sql": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";"}, {"query": "What is Astrid Gruber's email and phone number?", "sql": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";"}, {"query": "What is the email and phone number of Astrid Gruber the customer?", "sql": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";"}, {"query": "How many customers live in Prague city?", "sql": "SELECT count(*) FROM customers WHERE city = \"Prague\";"}, {"query": "How many customers live in the city of Prague?", "sql": "SELECT count(*) FROM customers WHERE city = \"Prague\";"}, {"query": "How many customers in state of CA?", "sql": "SELECT count(*) FROM customers WHERE state = \"CA\";"}, {"query": "How many customers are from California?", "sql": "SELECT count(*) FROM customers WHERE state = \"CA\";"}, {"query": "What country does Roberto Almeida live?", "sql": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";"}, {"query": "In which country does Roberto Almeida?", "sql": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";"}, {"query": "List the name of albums that are released by aritist whose name has 'Led'", "sql": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'"}, {"query": "What is the title of the album that was released by the artist whose name has the phrase 'Led'?", "sql": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'"}, {"query": "How many customers does Steve Johnson support?", "sql": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";"}, {"query": "What is the count of customers that Steve Johnson supports?", "sql": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";"}, {"query": "What is the title, phone and hire date of Nancy Edwards?", "sql": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"}, {"query": "What is the title, phone number and hire date for the employee named Nancy Edwards?", "sql": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"}, {"query": "find the full name of employees who report to Nancy Edwards?", "sql": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";"}, {"query": "What is the first and last name of the employee who reports to Nancy Edwards?", "sql": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";"}, {"query": "What is the address of employee Nancy Edwards?", "sql": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"}, {"query": "What is Nancy Edwards's address?", "sql": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"}, {"query": "Find the full name of employee who supported the most number of customers.", "sql": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the full name of the employee who has the most customers?", "sql": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"}, {"query": "How many employees are living in Canada?", "sql": "SELECT count(*) FROM employees WHERE country = \"Canada\";"}, {"query": "How many employees live in Canada?", "sql": "SELECT count(*) FROM employees WHERE country = \"Canada\";"}, {"query": "What is employee Nancy Edwards's phone number?", "sql": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"}, {"query": "What is the the phone number of Nancy Edwards?", "sql": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"}, {"query": "Who is the youngest employee in the company? List employee's first and last name.", "sql": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;"}, {"query": "What si the youngest employee's first and last name?", "sql": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;"}, {"query": "List top 10 employee work longest in the company. List employee's first and last name.", "sql": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;"}, {"query": "What are the first and last names of the top 10 longest-serving employees?", "sql": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;"}, {"query": "Find the number of employees whose title is IT Staff from each city?", "sql": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city"}, {"query": "How many employees who are IT staff are from each city?", "sql": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city"}, {"query": "Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.", "sql": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;"}, {"query": "What are the first and last names of all the employees and how many people report to them?", "sql": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;"}, {"query": "How many orders does Lucas Mancini has?", "sql": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";"}, {"query": "How many orders does Luca Mancini have in his invoices?", "sql": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";"}, {"query": "What is the total amount of money spent by Lucas Mancini?", "sql": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";"}, {"query": "How much money did Lucas Mancini spend?", "sql": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";"}, {"query": "List all media types.", "sql": "SELECT name FROM media_types;"}, {"query": "What are the names of all the media types?", "sql": "SELECT name FROM media_types;"}, {"query": "List all different genre types.", "sql": "SELECT DISTINCT name FROM genres;"}, {"query": "What are the different names of the genres?", "sql": "SELECT DISTINCT name FROM genres;"}, {"query": "List the name of all playlist.", "sql": "SELECT name FROM playlists;"}, {"query": "What are the names of all the playlists?", "sql": "SELECT name FROM playlists;"}, {"query": "Who is the composer of track Fast As a Shark?", "sql": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";"}, {"query": "What is the composer who created the track \"Fast As a Shark\"?", "sql": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";"}, {"query": "How long does track Fast As a Shark has?", "sql": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";"}, {"query": "How many milliseconds long is Fast As a Shark?", "sql": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";"}, {"query": "What is the name of tracks whose genre is Rock?", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";"}, {"query": "What is the name of all tracks in the Rock genre?", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";"}, {"query": "What is title of album which track Balls to the Wall belongs to?", "sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";"}, {"query": "What is the name of the album that has the track Ball to the Wall?", "sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";"}, {"query": "List name of all tracks in Balls to the Wall.", "sql": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";"}, {"query": "What is the name of all tracks in the album named Balls to the Wall?", "sql": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";"}, {"query": "List title of albums have the number of tracks greater than 10.", "sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;"}, {"query": "What are the names of the albums that have more than 10 tracks?", "sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;"}, {"query": "List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";"}, {"query": "What are the names of all Rock tracks that are stored on MPEG audio files?", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";"}, {"query": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";"}, {"query": "What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";"}, {"query": "List the name of tracks belongs to genre Rock or genre Jazz.", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\""}, {"query": "What are the names of the tracks that are Rock or Jazz songs?", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\""}, {"query": "List the name of all tracks in the playlists of Movies.", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";"}, {"query": "What are the names of all tracks that are on playlists titled Movies?", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";"}, {"query": "List the name of playlist which has number of tracks greater than 100.", "sql": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;"}, {"query": "What are the names of all playlists that have more than 100 tracks?", "sql": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;"}, {"query": "List all tracks bought by customer Daan Peeters.", "sql": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";"}, {"query": "What are the tracks that Dean Peeters bought?", "sql": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";"}, {"query": "How much is the track Fast As a Shark?", "sql": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";"}, {"query": "What is the unit price of the tune \"Fast As a Shark\"?", "sql": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";"}, {"query": "Find the name of tracks which are in Movies playlist but not in music playlist.", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"}, {"query": "What are the names of all tracks that are on the Movies playlist but not in the music playlist?", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"}, {"query": "Find the name of tracks which are in both Movies and music playlists.", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"}, {"query": "What are the names of all the tracks that are in both the Movies and music playlists?", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"}, {"query": "Find number of tracks in each genre?", "sql": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;"}, {"query": "How many tracks are in each genre?", "sql": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;"}, {"query": "How many editors are there?", "sql": "SELECT count(*) FROM editor"}, {"query": "List the names of editors in ascending order of age.", "sql": "SELECT Name FROM editor ORDER BY Age ASC"}, {"query": "What are the names and ages of editors?", "sql": "SELECT Name ,  Age FROM editor"}, {"query": "List the names of editors who are older than 25.", "sql": "SELECT Name FROM editor WHERE Age  >  25"}, {"query": "Show the names of editors of age either 24 or 25.", "sql": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25"}, {"query": "What is the name of the youngest editor?", "sql": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1"}, {"query": "What are the different ages of editors? Show each age along with the number of editors of that age.", "sql": "SELECT Age ,  COUNT(*) FROM editor GROUP BY Age"}, {"query": "Please show the most common age of editors.", "sql": "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Show the distinct themes of journals.", "sql": "SELECT DISTINCT Theme FROM journal"}, {"query": "Show the names of editors and the theme of journals for which they serve on committees.", "sql": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID"}, {"query": "For each journal_committee, find the editor name and the journal theme.", "sql": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID"}, {"query": "Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.", "sql": "SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC"}, {"query": "Show the names of editors that are on the committee of journals with sales bigger than 3000.", "sql": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000"}, {"query": "Show the id, name of each editor and the number of journal committees they are on.", "sql": "SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id"}, {"query": "Show the names of editors that are on at least two journal committees.", "sql": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2"}, {"query": "List the names of editors that are not on any journal committee.", "sql": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)"}, {"query": "List the date, theme and sales of the journal which did not have any of the listed editors serving on committee.", "sql": "SELECT date ,  theme ,  sales FROM journal EXCEPT SELECT T1.date ,  T1.theme ,  T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID"}, {"query": "What is the average sales of the journals that have an editor whose work type is 'Photo'?", "sql": "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  'Photo'"}, {"query": "How many accounts do we have?", "sql": "SELECT count(*) FROM Accounts"}, {"query": "Count the number of accounts.", "sql": "SELECT count(*) FROM Accounts"}, {"query": "Show ids, customer ids, names for all accounts.", "sql": "SELECT account_id ,  customer_id ,  account_name FROM Accounts"}, {"query": "What are the account ids, customer ids, and account names for all the accounts?", "sql": "SELECT account_id ,  customer_id ,  account_name FROM Accounts"}, {"query": "Show other account details for account with name 338.", "sql": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\""}, {"query": "What are the other account details for the account with the name 338?", "sql": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\""}, {"query": "What is the first name, last name, and phone of the customer with account name 162?", "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\""}, {"query": "Give the full name and phone of the customer who has the account name 162.", "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\""}, {"query": "How many accounts does the customer with first name Art and last name Turcotte have?", "sql": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\""}, {"query": "Return the number of accounts that the customer with the first name Art and last name Turcotte has.", "sql": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\""}, {"query": "Show all customer ids and the number of accounts for each customer.", "sql": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id"}, {"query": "How many accounts are there for each customer id?", "sql": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id"}, {"query": "Show the customer id and number of accounts with most accounts.", "sql": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the customer id of the customer with the most accounts, and how many accounts does this person have?", "sql": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the customer first, last name and id with least number of accounts.", "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1"}, {"query": "Give the full name and customer id of the customer with the fewest accounts.", "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1"}, {"query": "Show the number of all customers without an account.", "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)"}, {"query": "How many customers do not have an account?", "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)"}, {"query": "Show the first names and last names of customers without any account.", "sql": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id"}, {"query": "What are the full names of customers who do not have any accounts?", "sql": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id"}, {"query": "Show distinct first and last names for all customers with an account.", "sql": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id"}, {"query": "What are the full names of customers who have accounts?", "sql": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id"}, {"query": "How many customers have an account?", "sql": "SELECT count(DISTINCT customer_id) FROM Accounts"}, {"query": "Count the number of customers who hold an account.", "sql": "SELECT count(DISTINCT customer_id) FROM Accounts"}, {"query": "How many customers do we have?", "sql": "SELECT count(*) FROM Customers"}, {"query": "Count the number of customers.", "sql": "SELECT count(*) FROM Customers"}, {"query": "Show ids, first names, last names, and phones for all customers.", "sql": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers"}, {"query": "What are the ids, full names, and phones of each customer?", "sql": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers"}, {"query": "What is the phone and email for customer with first name Aniyah and last name Feest?", "sql": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\""}, {"query": "Return the phone and email of the customer with the first name Aniyah and last name Feest.", "sql": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\""}, {"query": "Show the number of customer cards.", "sql": "SELECT count(*) FROM Customers_cards"}, {"query": "How many customer cards are there?", "sql": "SELECT count(*) FROM Customers_cards"}, {"query": "Show ids, customer ids, card type codes, card numbers for all cards.", "sql": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards"}, {"query": "What are card ids, customer ids, card types, and card numbers for each customer card?", "sql": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards"}, {"query": "Show the date valid from and the date valid to for the card with card number '4560596484842'.", "sql": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\""}, {"query": "What are the valid from and valid to dates for the card with the number 4560596484842?", "sql": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\""}, {"query": "What is the first name, last name, and phone of the customer with card 4560596484842.", "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\""}, {"query": "Return the full name and phone of the customer who has card number 4560596484842.", "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\""}, {"query": "How many cards does customer Art Turcotte have?", "sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\""}, {"query": "Count the number of cards the customer with the first name Art and last name Turcotte has.", "sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\""}, {"query": "How many debit cards do we have?", "sql": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\""}, {"query": "Count the number of customer cards of the type Debit.", "sql": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\""}, {"query": "How many credit cards does customer Blanche Huels have?", "sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\""}, {"query": "Count the number of credit cards that the customer with first name Blanche and last name Huels has.", "sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\""}, {"query": "Show all customer ids and the number of cards owned by each customer.", "sql": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id"}, {"query": "What are the different customer ids, and how many cards does each one hold?", "sql": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id"}, {"query": "What is the customer id with most number of cards, and how many does he have?", "sql": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the id of the customer who has the most cards, as well as the number of cards.", "sql": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show id, first and last names for all customers with at least two cards.", "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2"}, {"query": "What are the ids and full names of customers who hold two or more cards?", "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2"}, {"query": "What is the customer id, first and last name with least number of accounts.", "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1"}, {"query": "Return the id and full name of the customer who has the fewest accounts.", "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1"}, {"query": "Show all card type codes and the number of cards in each type.", "sql": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code"}, {"query": "What are the different card types, and how many cards are there of each?", "sql": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code"}, {"query": "What is the card type code with most number of cards?", "sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the code of the card type that is most common.", "sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show card type codes with at least 5 cards.", "sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5"}, {"query": "What are the codes of card types that have 5 or more cards?", "sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5"}, {"query": "Show all card type codes and the number of customers holding cards in each type.", "sql": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code"}, {"query": "What are the different card type codes, and how many different customers hold each type?", "sql": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code"}, {"query": "Show the customer ids and firstname without a credit card.", "sql": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\""}, {"query": "What are the ids and first names of customers who do not hold a credit card?", "sql": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\""}, {"query": "Show all card type codes.", "sql": "SELECT DISTINCT card_type_code FROM Customers_Cards"}, {"query": "What are the different card type codes?", "sql": "SELECT DISTINCT card_type_code FROM Customers_Cards"}, {"query": "Show the number of card types.", "sql": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards"}, {"query": "How many different card types are there?", "sql": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards"}, {"query": "Show all transaction types.", "sql": "SELECT DISTINCT transaction_type FROM Financial_Transactions"}, {"query": "What are the different types of transactions?", "sql": "SELECT DISTINCT transaction_type FROM Financial_Transactions"}, {"query": "Show the number of transaction types.", "sql": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions"}, {"query": "How many different types of transactions are there?", "sql": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions"}, {"query": "What is the average and total transaction amount?", "sql": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions"}, {"query": "Return the average transaction amount, as well as the total amount of all transactions.", "sql": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions"}, {"query": "Show the card type codes and the number of transactions.", "sql": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code"}, {"query": "What are the different card types, and how many transactions have been made with each?", "sql": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code"}, {"query": "Show the transaction type and the number of transactions.", "sql": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type"}, {"query": "What are the different transaction types, and how many transactions of each have taken place?", "sql": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type"}, {"query": "What is the transaction type that has processed the greatest total amount in transactions?", "sql": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1"}, {"query": "Return the type of transaction with the highest total amount.", "sql": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1"}, {"query": "Show the account id and the number of transactions for each account", "sql": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id"}, {"query": "What are the different account ids that have made financial transactions, as well as how many transactions correspond to each?", "sql": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id"}, {"query": "How many tracks do we have?", "sql": "SELECT count(*) FROM track"}, {"query": "Count the number of tracks.", "sql": "SELECT count(*) FROM track"}, {"query": "Show the name and location for all tracks.", "sql": "SELECT name ,  LOCATION FROM track"}, {"query": "What are the names and locations of all tracks?", "sql": "SELECT name ,  LOCATION FROM track"}, {"query": "Show names and seatings, ordered by seating for all tracks opened after 2000.", "sql": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating"}, {"query": "What are the names and seatings for all tracks opened after 2000, ordered by seating?", "sql": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating"}, {"query": "What is the name, location and seating for the most recently opened track?", "sql": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1"}, {"query": "Return the name, location, and seating of the track that was opened in the most recent year.", "sql": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1"}, {"query": "What is the minimum, maximum, and average seating for all tracks.", "sql": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track"}, {"query": "Return the minimum, maximum, and average seating across all tracks.", "sql": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track"}, {"query": "Show the name, location, open year for all tracks with a seating higher than the average.", "sql": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)"}, {"query": "What are the names, locations, and years of opening for tracks with seating higher than average?", "sql": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)"}, {"query": "What are distinct locations where tracks are located?", "sql": "SELECT DISTINCT LOCATION FROM track"}, {"query": "Give the different locations of tracks.", "sql": "SELECT DISTINCT LOCATION FROM track"}, {"query": "How many races are there?", "sql": "SELECT count(*) FROM race"}, {"query": "Count the number of races.", "sql": "SELECT count(*) FROM race"}, {"query": "What are the distinct classes that races can have?", "sql": "SELECT DISTINCT CLASS FROM race"}, {"query": "Return the different classes of races.", "sql": "SELECT DISTINCT CLASS FROM race"}, {"query": "Show name, class, and date for all races.", "sql": "SELECT name ,  CLASS ,  date FROM race"}, {"query": "What are the names, classes, and dates for all races?", "sql": "SELECT name ,  CLASS ,  date FROM race"}, {"query": "Show the race class and number of races in each class.", "sql": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS"}, {"query": "What are the different classes of races, and how many races correspond to each?", "sql": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS"}, {"query": "What is the race class with most number of races.", "sql": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1"}, {"query": "Give the class of races that is most common.", "sql": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1"}, {"query": "List the race class with at least two races.", "sql": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2"}, {"query": "What are the classes of races that have two or more corresponding races?", "sql": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2"}, {"query": "What are the names for tracks without a race in class 'GT'.", "sql": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'"}, {"query": "Give the names of tracks that do not have a race in the class 'GT'.", "sql": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'"}, {"query": "Show all track names that have had no races.", "sql": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)"}, {"query": "Return the names of tracks that have no had any races.", "sql": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)"}, {"query": "Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.", "sql": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000"}, {"query": "What are the years of opening for tracks with seating between 4000 and 5000?", "sql": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000"}, {"query": "Show the name of track and the number of races in each track.", "sql": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id"}, {"query": "What are the names of different tracks, and how many races has each had?", "sql": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id"}, {"query": "Show the name of track with most number of races.", "sql": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name of the track that has had the greatest number of races?", "sql": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show the name and date for each race and its track name.", "sql": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id"}, {"query": "What are the names and dates of races, and the names of the tracks where they are held?", "sql": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id"}, {"query": "Show the name and location of track with 1 race.", "sql": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1"}, {"query": "What are the names and locations of tracks that have had exactly 1 race?", "sql": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1"}, {"query": "Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.", "sql": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000"}, {"query": "What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats?", "sql": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000"}, {"query": "How many members have the black membership card?", "sql": "SELECT count(*) FROM member WHERE Membership_card  =  'Black'"}, {"query": "Find the number of members living in each address.", "sql": "SELECT count(*) ,  address FROM member GROUP BY address"}, {"query": "Give me the names of members whose address is in Harford or Waterbury.", "sql": "SELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury'"}, {"query": "Find the ids and names of members who are under age 30 or with black membership card.", "sql": "SELECT name ,  member_id FROM member WHERE Membership_card  =  'Black' OR age  <  30"}, {"query": "Find the purchase time, age and address of each member, and show the results in the order of purchase time.", "sql": "SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase"}, {"query": "Which membership card has more than 5 members?", "sql": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5"}, {"query": "Which address has both members younger than 30 and members older than 40?", "sql": "SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40"}, {"query": "What is the membership card held by both members living in Hartford and ones living in Waterbury address?", "sql": "SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'"}, {"query": "How many members are not living in Hartford?", "sql": "SELECT count(*) FROM member WHERE address != 'Hartford'"}, {"query": "Which address do not have any member with the black membership card?", "sql": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'"}, {"query": "Show the shop addresses ordered by their opening year.", "sql": "SELECT address FROM shop ORDER BY open_year"}, {"query": "What are the average score and average staff number of all shops?", "sql": "SELECT avg(num_of_staff) ,  avg(score) FROM shop"}, {"query": "Find the id and address of the shops whose score is below the average score.", "sql": "SELECT shop_id ,  address FROM shop WHERE score  <  (SELECT avg(score) FROM shop)"}, {"query": "Find the address and staff number of the shops that do not have any happy hour.", "sql": "SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)"}, {"query": "What are the id and address of the shops which have a happy hour in May?", "sql": "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'"}, {"query": "which shop has happy hour most frequently? List its id and number of happy hours.", "sql": "SELECT shop_id ,  count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which month has the most happy hours?", "sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which months have more than 2 happy hours?", "sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2"}, {"query": "How many albums are there?", "sql": "SELECT count(*) FROM ALBUM"}, {"query": "Find the number of albums.", "sql": "SELECT count(*) FROM ALBUM"}, {"query": "List the names of all music genres.", "sql": "SELECT Name FROM GENRE"}, {"query": "What are the names of different music genres?", "sql": "SELECT Name FROM GENRE"}, {"query": "Find all the customer information in state NY.", "sql": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\""}, {"query": "What is all the customer information for customers in NY state?", "sql": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\""}, {"query": "What are the first names and last names of the employees who live in Calgary city.", "sql": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\""}, {"query": "Find the full names of employees living in the city of Calgary.", "sql": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\""}, {"query": "What are the distinct billing countries of the invoices?", "sql": "SELECT distinct(BillingCountry) FROM INVOICE"}, {"query": "Find the different billing countries for all invoices.", "sql": "SELECT distinct(BillingCountry) FROM INVOICE"}, {"query": "Find the names of all artists that have \"a\" in their names.", "sql": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\""}, {"query": "What are the names of artist who have the letter 'a' in their names?", "sql": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\""}, {"query": "Find the title of all the albums of the artist \"AC/DC\".", "sql": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\""}, {"query": "What are the titles of albums by the artist \"AC/DC\"?", "sql": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\""}, {"query": "Hom many albums does the artist \"Metallica\" have?", "sql": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\""}, {"query": "Find the number of albums by the artist \"Metallica\".", "sql": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\""}, {"query": "Which artist does the album \"Balls to the Wall\" belong to?", "sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\""}, {"query": "Find the name of the artist who made the album \"Balls to the Wall\".", "sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\""}, {"query": "Which artist has the most albums?", "sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What is the name of the artist with the greatest number of albums?", "sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Find the names of all the tracks that contain the word \"you\".", "sql": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'"}, {"query": "What are the names of tracks that contain the the word you in them?", "sql": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'"}, {"query": "What is the average unit price of all the tracks?", "sql": "SELECT AVG(UnitPrice) FROM TRACK"}, {"query": "Find the average unit price for a track.", "sql": "SELECT AVG(UnitPrice) FROM TRACK"}, {"query": "What are the durations of the longest and the shortest tracks in milliseconds?", "sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK"}, {"query": "Find the maximum and minimum durations of tracks in milliseconds.", "sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK"}, {"query": "Show the album names, ids and the number of tracks for each album.", "sql": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID"}, {"query": "What are the names and ids of the different albums, and how many tracks are on each?", "sql": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID"}, {"query": "What is the name of the most common genre in all tracks?", "sql": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Find the name of the genre that is most frequent across all tracks.", "sql": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What is the least common media type in all tracks?", "sql": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1"}, {"query": "What is the name of the media type that is least common across all tracks?", "sql": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1"}, {"query": "Show the album names and ids for albums that contain tracks with unit price bigger than 1.", "sql": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID"}, {"query": "What are the titles and ids for albums containing tracks with unit price greater than 1?", "sql": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID"}, {"query": "How many tracks belong to rock genre?", "sql": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\""}, {"query": "Count the number of tracks that are part of the rock genre.", "sql": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\""}, {"query": "What is the average unit price of tracks that belong to Jazz genre?", "sql": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\""}, {"query": "Find the average unit price of jazz tracks.", "sql": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\""}, {"query": "What is the first name and last name of the customer that has email \"luisg@embraer.com.br\"?", "sql": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\""}, {"query": "Find the full name of the customer with the email \"luisg@embraer.com.br\".", "sql": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\""}, {"query": "How many customers have email that contains \"gmail.com\"?", "sql": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\""}, {"query": "Count the number of customers that have an email containing \"gmail.com\".", "sql": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\""}, {"query": "What is the first name and last name employee helps the customer with first name Leonie?", "sql": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\""}, {"query": "Find the full names of employees who help customers with the first name Leonie.", "sql": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\""}, {"query": "What city does the employee who helps the customer with postal code 70174 live in?", "sql": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\""}, {"query": "Find the cities corresponding to employees who help customers with the postal code 70174.", "sql": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\""}, {"query": "How many distinct cities does the employees live in?", "sql": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE"}, {"query": "Find the number of different cities that employees live in.", "sql": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE"}, {"query": "Find all invoice dates corresponding to customers with first name Astrid and last name Gruber.", "sql": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\""}, {"query": "What are the invoice dates for customers with the first name Astrid and the last name Gruber?", "sql": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\""}, {"query": "Find all the customer last names that do not have invoice totals larger than 20.", "sql": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20"}, {"query": "What are the last names of customers without invoice totals exceeding 20?", "sql": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20"}, {"query": "Find the first names of all customers that live in Brazil and have an invoice.", "sql": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\""}, {"query": "What are the different first names for customers from Brazil who have also had an invoice?", "sql": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\""}, {"query": "Find the address of all customers that live in Germany and have invoice.", "sql": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\""}, {"query": "What are the addresses of customers living in Germany who have had an invoice?", "sql": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\""}, {"query": "List the phone numbers of all employees.", "sql": "SELECT Phone FROM EMPLOYEE"}, {"query": "What are the phone numbers for each employee?", "sql": "SELECT Phone FROM EMPLOYEE"}, {"query": "How many tracks are in the AAC audio file media type?", "sql": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\""}, {"query": "Count the number of tracks that are of the media type \"AAC audio file\".", "sql": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\""}, {"query": "What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?", "sql": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\""}, {"query": "Find the average millisecond length of Latin and Pop tracks.", "sql": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\""}, {"query": "Please show the employee first names and ids of employees who serve at least 10 customers.", "sql": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10"}, {"query": "What are the first names and support rep ids for employees serving 10 or more customers?", "sql": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10"}, {"query": "Please show the employee last names that serves no more than 20 customers.", "sql": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20"}, {"query": "What are the last names of employees who serve at most 20 customers?", "sql": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20"}, {"query": "Please list all album titles in alphabetical order.", "sql": "SELECT Title FROM ALBUM ORDER BY Title"}, {"query": "What are all the album titles, in alphabetical order?", "sql": "SELECT Title FROM ALBUM ORDER BY Title"}, {"query": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.", "sql": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name"}, {"query": "What are the names and ids of artists with 3 or more albums, listed in alphabetical order?", "sql": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name"}, {"query": "Find the names of artists that do not have any albums.", "sql": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId"}, {"query": "What are the names of artists who have not released any albums?", "sql": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId"}, {"query": "What is the average unit price of rock tracks?", "sql": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\""}, {"query": "Find the average unit price of tracks from the Rock genre.", "sql": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\""}, {"query": "What are the duration of the longest and shortest pop tracks in milliseconds?", "sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\""}, {"query": "Find the maximum and minimum millisecond lengths of pop tracks.", "sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\""}, {"query": "What are the birth dates of employees living in Edmonton?", "sql": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\""}, {"query": "Find the birth dates corresponding to employees who live in the city of Edmonton.", "sql": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\""}, {"query": "What are the distinct unit prices of all tracks?", "sql": "SELECT distinct(UnitPrice) FROM TRACK"}, {"query": "Find the distinct unit prices for tracks.", "sql": "SELECT distinct(UnitPrice) FROM TRACK"}, {"query": "How many artists do not have any album?", "sql": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)"}, {"query": "Cound the number of artists who have not released an album.", "sql": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)"}, {"query": "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?", "sql": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'"}, {"query": "Find the titles of albums that contain tracks of both the Reggae and Rock genres.", "sql": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'"}, {"query": "Find all the phone numbers.", "sql": "SELECT customer_phone FROM available_policies"}, {"query": "What are all the phone numbers?", "sql": "SELECT customer_phone FROM available_policies"}, {"query": "What are the customer phone numbers under the policy \"Life Insurance\"?", "sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\""}, {"query": "What are the phone numbers of customers using the policy with the code \"Life Insurance\"?", "sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\""}, {"query": "Which policy type has the most records in the database?", "sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which policy type appears most frequently in the available policies?", "sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are all the customer phone numbers under the most popular policy type?", "sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)"}, {"query": "Find the phone numbers of customers using the most common policy type among the available policies.", "sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)"}, {"query": "Find the policy type used by more than 4 customers.", "sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4"}, {"query": "Find the policy types more than 4 customers use. Show their type code.", "sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4"}, {"query": "Find the total and average amount of settlements.", "sql": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements"}, {"query": "Return the sum and average of all settlement amounts.", "sql": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements"}, {"query": "Find the name of services that have been used for more than 2 times in first notification of loss.", "sql": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2"}, {"query": "Which services have been used more than twice in first notification of loss? Return the service name.", "sql": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2"}, {"query": "What is the effective date of the claim that has the largest amount of total settlement?", "sql": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1"}, {"query": "Find the claim that has the largest total settlement amount. Return the effective date of the claim.", "sql": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1"}, {"query": "How many policies are listed for the customer named \"Dayana Robel\"?", "sql": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\""}, {"query": "Count the total number of policies used by the customer named \"Dayana Robel\".", "sql": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\""}, {"query": "What is the name of the customer who has the most policies listed?", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which customer uses the most policies? Give me the customer name.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are all the policy types of the customer named \"Dayana Robel\"?", "sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\""}, {"query": "Tell me the types of the policy used by the customer named \"Dayana Robel\".", "sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\""}, {"query": "What are all the policy types of the customer that has the most policies listed?", "sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)"}, {"query": "List all the policy types used by the customer enrolled in the most policies.", "sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)"}, {"query": "List all the services in the alphabetical order.", "sql": "SELECT service_name FROM services ORDER BY service_name"}, {"query": "Give me a list of all the service names sorted alphabetically.", "sql": "SELECT service_name FROM services ORDER BY service_name"}, {"query": "How many services are there?", "sql": "SELECT count(*) FROM services"}, {"query": "Count the total number of available services.", "sql": "SELECT count(*) FROM services"}, {"query": "Find the names of users who do not have a first notification of loss record.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id"}, {"query": "Which customers do not have a first notification of loss record? Give me the customer names.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id"}, {"query": "Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\".", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\""}, {"query": "Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\""}, {"query": "Find the names of customers who have used both the service \"Close a policy\" and the service \"New policy application\".", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\""}, {"query": "Which customers have used both the service named \"Close a policy\" and the service named \"Upgrade a policy\"? Give me the customer names.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\""}, {"query": "Find the IDs of customers whose name contains \"Diana\".", "sql": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\""}, {"query": "What are the IDs of customers who have \"Diana\" in part of their names?", "sql": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\""}, {"query": "What are the maximum and minimum settlement amount on record?", "sql": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements"}, {"query": "Find the maximum and minimum settlement amount.", "sql": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements"}, {"query": "List all the customers in increasing order of IDs.", "sql": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC"}, {"query": "What is the ordered list of customer ids?", "sql": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC"}, {"query": "Retrieve the open and close dates of all the policies associated with the customer whose name contains \"Diana\"", "sql": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\""}, {"query": "What are the open and close dates of all the policies used by the customer who have \"Diana\" in part of their names?", "sql": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\""}, {"query": "How many kinds of enzymes are there?", "sql": "SELECT count(*) FROM enzyme"}, {"query": "What is the total count of enzymes?", "sql": "SELECT count(*) FROM enzyme"}, {"query": "List the name of enzymes in descending lexicographical order.", "sql": "SELECT name FROM enzyme ORDER BY name DESC"}, {"query": "What are the names of enzymes in descending order?", "sql": "SELECT name FROM enzyme ORDER BY name DESC"}, {"query": "List the names and the locations that the enzymes can make an effect.", "sql": "SELECT name ,  LOCATION FROM enzyme"}, {"query": "What are the names and locations of all enzymes listed?", "sql": "SELECT name ,  LOCATION FROM enzyme"}, {"query": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?", "sql": "SELECT max(OMIM) FROM enzyme"}, {"query": "What is the maximum OMIM value in the database?", "sql": "SELECT max(OMIM) FROM enzyme"}, {"query": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?", "sql": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'"}, {"query": "What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'?", "sql": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'"}, {"query": "What are the names of enzymes who does not produce 'Heme'?", "sql": "SELECT name FROM enzyme WHERE product != 'Heme'"}, {"query": "What are the names of enzymes whose product is not 'Heme'?", "sql": "SELECT name FROM enzyme WHERE product != 'Heme'"}, {"query": "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?", "sql": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'"}, {"query": "What are the names and trade names of the medcines that are FDA approved?", "sql": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'"}, {"query": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?", "sql": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'"}, {"query": "What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?", "sql": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'"}, {"query": "What are the ids and names of the medicine that can interact with two or more enzymes?", "sql": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"}, {"query": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?", "sql": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"}, {"query": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.", "sql": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC"}, {"query": "What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?", "sql": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC"}, {"query": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?", "sql": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the id and name of the enzyme that can interact with the most medicines as an activator?", "sql": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?", "sql": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'"}, {"query": "What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?", "sql": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'"}, {"query": "What is the most common interaction type between enzymes and medicine? And how many are there?", "sql": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the most common types of interactions between enzymes and medicine, and how many types are there?", "sql": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1"}, {"query": "How many medicines have the FDA approval status 'No' ?", "sql": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'"}, {"query": "How many medicines were not approved by the FDA?", "sql": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'"}, {"query": "How many enzymes do not have any interactions?", "sql": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );"}, {"query": "What is the count of enzymes without any interactions?", "sql": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );"}, {"query": "What is the id and trade name of the medicines can interact with at least 3 enzymes?", "sql": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3"}, {"query": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?", "sql": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3"}, {"query": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?", "sql": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'"}, {"query": "What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?", "sql": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'"}, {"query": "List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.", "sql": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'"}, {"query": "What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?", "sql": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'"}, {"query": "Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'.", "sql": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'"}, {"query": "What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'?", "sql": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'"}, {"query": "How many distinct FDA approval statuses are there for the medicines?", "sql": "SELECT count(DISTINCT FDA_approved) FROM medicine"}, {"query": "How many different FDA approval statuses exist for medicines?", "sql": "SELECT count(DISTINCT FDA_approved) FROM medicine"}, {"query": "Which enzyme names have the substring \"ALA\"?", "sql": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\""}, {"query": "What are the names of enzymes that include the string 'ALA'?", "sql": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\""}, {"query": "find the number of medicines offered by each trade.", "sql": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name"}, {"query": "How many medicines are offered by each trade name?", "sql": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name"}, {"query": "List all schools and their nicknames in the order of founded year.", "sql": "SELECT school ,  nickname FROM university ORDER BY founded"}, {"query": "What are the different schools and their nicknames, ordered by their founding years?", "sql": "SELECT school ,  nickname FROM university ORDER BY founded"}, {"query": "List all public schools and their locations.", "sql": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'"}, {"query": "What are the public schools and what are their locations?", "sql": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'"}, {"query": "When was the school with the largest enrollment founded?", "sql": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1"}, {"query": "Return the founded year for the school with the largest enrollment.", "sql": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1"}, {"query": "Find the founded year of the newest non public school.", "sql": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1"}, {"query": "What is the founded year of the non public school that was founded most recently?", "sql": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1"}, {"query": "How many schools are in the basketball match?", "sql": "SELECT count(DISTINCT school_id) FROM basketball_match"}, {"query": "Count the number of schools that have had basketball matches.", "sql": "SELECT count(DISTINCT school_id) FROM basketball_match"}, {"query": "What is the highest acc percent score in the competition?", "sql": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1"}, {"query": "Return the highest acc percent across all basketball matches.", "sql": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1"}, {"query": "What is the primary conference of the school that has the lowest acc percent score in the competition?", "sql": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1"}, {"query": "Return the primary conference of the school with the lowest acc percentage score.", "sql": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1"}, {"query": "What is the team name and acc regular season score of the school that was founded for the longest time?", "sql": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1"}, {"query": "Return the name of the team and the acc during the regular season for the school that was founded the earliest.", "sql": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1"}, {"query": "Find the location and all games score of the school that has Clemson as its team name.", "sql": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'"}, {"query": "What are the all games score and location of the school called Clemson?", "sql": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'"}, {"query": "What are the average enrollment size of the universities that are founded before 1850?", "sql": "SELECT avg(enrollment) FROM university WHERE founded  <  1850"}, {"query": "Return the average enrollment of universities founded before 1850.", "sql": "SELECT avg(enrollment) FROM university WHERE founded  <  1850"}, {"query": "Show the enrollment and primary_conference of the oldest college.", "sql": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1"}, {"query": "What are the enrollment and primary conference for the university which was founded the earliest?", "sql": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1"}, {"query": "What is the total and minimum enrollment of all schools?", "sql": "SELECT sum(enrollment) ,  min(enrollment) FROM university"}, {"query": "Return the total and minimum enrollments across all schools.", "sql": "SELECT sum(enrollment) ,  min(enrollment) FROM university"}, {"query": "Find the total student enrollment for different affiliation type schools.", "sql": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation"}, {"query": "What are the total enrollments of universities of each affiliation type?", "sql": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation"}, {"query": "How many schools do not participate in the basketball match?", "sql": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)"}, {"query": "Count the number of universities that do not participate in the baketball match.", "sql": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)"}, {"query": "Find the schools that were either founded after 1850 or public.", "sql": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'"}, {"query": "What are the schools that were either founded before 1850 or are public?", "sql": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'"}, {"query": "Find how many different affiliation types there are.", "sql": "SELECT count(DISTINCT affiliation) FROM university"}, {"query": "Count the number of different affiliation types.", "sql": "SELECT count(DISTINCT affiliation) FROM university"}, {"query": "Find how many school locations have the word 'NY'.", "sql": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\""}, {"query": "How many universities have a location that contains NY?", "sql": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\""}, {"query": "Find the team names of the universities whose enrollments are smaller than the average enrollment size.", "sql": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)"}, {"query": "What are the names of teams from universities that have a below average enrollment?", "sql": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)"}, {"query": "Find the number of universities that have over a 20000 enrollment size for each affiliation type.", "sql": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation"}, {"query": "What are the different affiliations, and how many schools with each have an enrollment size of above 20000?", "sql": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation"}, {"query": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.", "sql": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation"}, {"query": "What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?", "sql": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation"}, {"query": "What is the maximum enrollment across all schools?", "sql": "SELECT max(Enrollment) FROM university"}, {"query": "Return the maximum enrollment across all schools.", "sql": "SELECT max(Enrollment) FROM university"}, {"query": "List all information regarding the basketball match.", "sql": "SELECT * FROM basketball_match"}, {"query": "What is all the information about the basketball match?", "sql": "SELECT * FROM basketball_match"}, {"query": "List names of all teams in the basketball competition, ordered by all home scores in descending order.", "sql": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC"}, {"query": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?", "sql": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC"}, {"query": "the names of models that launched between 2002 and 2004.", "sql": "SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004;"}, {"query": "Which model has the least amount of RAM? List the model name and the amount of RAM.", "sql": "SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;"}, {"query": "What are the chip model and screen mode of the phone with hardware model name \"LG-P760\"?", "sql": "SELECT chip_model ,  screen_mode FROM phone WHERE Hardware_Model_name = \"LG-P760\";"}, {"query": "How many phone hardware models are produced by the company named \"Nokia Corporation\"?", "sql": "SELECT count(*) FROM phone WHERE Company_name = \"Nokia Corporation\";"}, {"query": "What is maximum and minimum RAM size of phone produced by company named \"Nokia Corporation\"?", "sql": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";"}, {"query": "What is the average ROM size of phones produced by the company named \"Nokia Corporation\"?", "sql": "SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";"}, {"query": "List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.", "sql": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32;"}, {"query": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.", "sql": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';"}, {"query": "Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is \"LG-P760\".", "sql": "SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = \"LG-P760\";"}, {"query": "List the hardware model name and company name for the phone whose screen mode type is \"Graphics.\"", "sql": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\";"}, {"query": "Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.", "sql": "SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;"}, {"query": "List the name of the company that produced more than one phone model.", "sql": "SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;"}, {"query": "List the maximum, minimum and average number of used kb in screen mode.", "sql": "SELECT max(used_kb) , min(used_kb) , avg(used_kb) FROM screen_mode;"}, {"query": "List the name of the phone model launched in year 2002 and with the highest RAM size.", "sql": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;"}, {"query": "What are the wifi and screen mode type of the hardware model named \"LG-P760\"?", "sql": "SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = \"LG-P760\";"}, {"query": "List the hardware model name for the phones that have screen mode type \"Text\" or RAM size greater than 32.", "sql": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = \"Text\" OR T1.RAM_MiB  >  32;"}, {"query": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"", "sql": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\""}, {"query": "List the hardware model name for the phons that were produced by \"Nokia Corporation\" but whose screen mode type is not Text.", "sql": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  \"Nokia Corporation\" AND T1.Type != \"Text\";"}, {"query": "List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15.", "sql": "SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15;"}, {"query": "Find the number of phones for each accreditation type.", "sql": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type"}, {"query": "How many phones belongs to each accreditation type?", "sql": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type"}, {"query": "Find the accreditation level that more than 3 phones use.", "sql": "SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*)  >  3"}, {"query": "Find the details for all chip models.", "sql": "SELECT * FROM chip_model"}, {"query": "How many models do not have the wifi function?", "sql": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'"}, {"query": "Count the number of chip model that do not have wifi.", "sql": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'"}, {"query": "List all the model names sorted by their launch year.", "sql": "SELECT model_name FROM chip_model ORDER BY launch_year"}, {"query": "Find the average ram mib size of the chip models that are never used by any phone.", "sql": "SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)"}, {"query": "Find the names of the chip models that are not used by any phone with full accreditation type.", "sql": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'"}, {"query": "Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.", "sql": "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'"}, {"query": "How many countries are there in total?", "sql": "SELECT count(*) FROM country"}, {"query": "Count the number of countries.", "sql": "SELECT count(*) FROM country"}, {"query": "Show the country name and capital of all countries.", "sql": "SELECT Country_name ,  Capital FROM country"}, {"query": "What are the names and capitals of each country?", "sql": "SELECT Country_name ,  Capital FROM country"}, {"query": "Show all official native languages that contain the word \"English\".", "sql": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\""}, {"query": "What are the official native languages that contain the string \"English\".", "sql": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\""}, {"query": "Show all distinct positions of matches.", "sql": "SELECT DISTINCT POSITION FROM match_season"}, {"query": "What are the different positions for match season?", "sql": "SELECT DISTINCT POSITION FROM match_season"}, {"query": "Show the players from college UCLA.", "sql": "SELECT Player FROM match_season WHERE College  =  \"UCLA\""}, {"query": "Who are the players from UCLA?", "sql": "SELECT Player FROM match_season WHERE College  =  \"UCLA\""}, {"query": "Show the distinct position of players from college UCLA or Duke.", "sql": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\""}, {"query": "What are the different positions of players from UCLA or Duke colleges?", "sql": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\""}, {"query": "Show the draft pick numbers and draft classes of players whose positions are defenders.", "sql": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\""}, {"query": "What are the draft pick numbers and draft classes for players who play the Defender position?", "sql": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\""}, {"query": "How many distinct teams are involved in match seasons?", "sql": "SELECT count(DISTINCT Team) FROM match_season"}, {"query": "Count the number of different teams involved in match season.", "sql": "SELECT count(DISTINCT Team) FROM match_season"}, {"query": "Show the players and the years played.", "sql": "SELECT Player ,  Years_Played FROM player"}, {"query": "Who are the different players and how many years has each played?", "sql": "SELECT Player ,  Years_Played FROM player"}, {"query": "Show all team names.", "sql": "SELECT Name FROM Team"}, {"query": "What are the names of all teams?", "sql": "SELECT Name FROM Team"}, {"query": "Show the season, the player, and the name of the country that player belongs to.", "sql": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country"}, {"query": "For each player, what are their name, season, and country that they belong to?", "sql": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country"}, {"query": "Which players are from Indonesia?", "sql": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\""}, {"query": "Who are the players from Indonesia?", "sql": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\""}, {"query": "What are the distinct positions of the players from a country whose capital is Dublin?", "sql": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\""}, {"query": "Give the different positions of players who play for the country with the capital Dublin.", "sql": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\""}, {"query": "What are the official languages of the countries of players from Maryland or Duke college?", "sql": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\""}, {"query": "Return the official native languages of countries who have players from Maryland or Duke colleges.", "sql": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\""}, {"query": "How many distinct official languages are there among countries of players whose positions are defenders.", "sql": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""}, {"query": "Count the number of different official languages corresponding to countries that players who play Defender are from.", "sql": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""}, {"query": "Show the season, the player, and the name of the team that players belong to.", "sql": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id"}, {"query": "Who are the different players, what season do they play in, and what is the name of the team they are on?", "sql": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id"}, {"query": "Show the positions of the players from the team with name \"Ryley Goldner\".", "sql": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\""}, {"query": "Return the positions of players on the team Ryley Goldner.", "sql": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\""}, {"query": "How many distinct colleges are associated with players from the team with name \"Columbus Crew\".", "sql": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\""}, {"query": "Count the number of different colleges that players who play for Columbus Crew are from.", "sql": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\""}, {"query": "Show the players and years played for players from team \"Columbus Crew\".", "sql": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\""}, {"query": "What are the players who played for Columbus Crew, and how many years did each play for?", "sql": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\""}, {"query": "Show the position of players and the corresponding number of players.", "sql": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION"}, {"query": "How many players played each position?", "sql": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION"}, {"query": "Show the country names and the corresponding number of players.", "sql": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name"}, {"query": "How many players are from each country?", "sql": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name"}, {"query": "Return all players sorted by college in ascending alphabetical order.", "sql": "SELECT player FROM match_season ORDER BY College ASC"}, {"query": "What are all the players who played in match season, sorted by college in ascending alphabetical order?", "sql": "SELECT player FROM match_season ORDER BY College ASC"}, {"query": "Show the most common position of players in match seasons.", "sql": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the position that is most common among players in match seasons?", "sql": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show the top 3 most common colleges of players in match seasons.", "sql": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3"}, {"query": "What are the three colleges from which the most players are from?", "sql": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3"}, {"query": "Show the name of colleges that have at least two players.", "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2"}, {"query": "What are the names of all colleges that have two or more players?", "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2"}, {"query": "Show the name of colleges that have at least two players in descending alphabetical order.", "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC"}, {"query": "What are the names of colleges that have two or more players, listed in descending alphabetical order?", "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC"}, {"query": "What are the names of teams that do no have match season record?", "sql": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)"}, {"query": "Return the names of teams that have no match season record.", "sql": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)"}, {"query": "What are the names of countries that have both players with position forward and players with position defender?", "sql": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""}, {"query": "Return the names of countries that have players that play the Forward position, as well as players who play the Defender position.", "sql": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""}, {"query": "Which college have both players with position midfielder and players with position defender?", "sql": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\""}, {"query": "Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.", "sql": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\""}, {"query": "How many climbers are there?", "sql": "SELECT count(*) FROM climber"}, {"query": "Count the number of climbers.", "sql": "SELECT count(*) FROM climber"}, {"query": "List the names of climbers in descending order of points.", "sql": "SELECT Name FROM climber ORDER BY Points DESC"}, {"query": "What are the names of the climbers, ordered by points descending?", "sql": "SELECT Name FROM climber ORDER BY Points DESC"}, {"query": "List the names of climbers whose country is not Switzerland.", "sql": "SELECT Name FROM climber WHERE Country != \"Switzerland\""}, {"query": "What are the names of climbers who are not from the country of Switzerland?", "sql": "SELECT Name FROM climber WHERE Country != \"Switzerland\""}, {"query": "What is the maximum point for climbers whose country is United Kingdom?", "sql": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\""}, {"query": "Return the maximum number of points for climbers from the United Kingdom.", "sql": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\""}, {"query": "How many distinct countries are the climbers from?", "sql": "SELECT COUNT(DISTINCT Country) FROM climber"}, {"query": "Count the number of different countries that climbers are from.", "sql": "SELECT COUNT(DISTINCT Country) FROM climber"}, {"query": "What are the names of mountains in ascending alphabetical order?", "sql": "SELECT Name FROM mountain ORDER BY Name ASC"}, {"query": "Give the names of mountains in alphabetical order.", "sql": "SELECT Name FROM mountain ORDER BY Name ASC"}, {"query": "What are the countries of mountains with height bigger than 5000?", "sql": "SELECT Country FROM mountain WHERE Height  >  5000"}, {"query": "Return the countries of the mountains that have a height larger than 5000.", "sql": "SELECT Country FROM mountain WHERE Height  >  5000"}, {"query": "What is the name of the highest mountain?", "sql": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1"}, {"query": "Return the name of the mountain with the greatest height.", "sql": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1"}, {"query": "List the distinct ranges of the mountains with the top 3 prominence.", "sql": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3"}, {"query": "What are the different ranges of the 3 mountains with the highest prominence?", "sql": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3"}, {"query": "Show names of climbers and the names of mountains they climb.", "sql": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID"}, {"query": "What are the names of climbers and the corresponding names of mountains that they climb?", "sql": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID"}, {"query": "Show the names of climbers and the heights of mountains they climb.", "sql": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID"}, {"query": "What are the names of climbers and the corresponding heights of the mountains that they climb?", "sql": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID"}, {"query": "Show the height of the mountain climbed by the climber with the maximum points.", "sql": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1"}, {"query": "What is the height of the mountain climbined by the climbing who had the most points?", "sql": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1"}, {"query": "Show the distinct names of mountains climbed by climbers from country \"West Germany\".", "sql": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\""}, {"query": "What are the different names of mountains ascended by climbers from the country of West Germany?", "sql": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\""}, {"query": "Show the times used by climbers to climb mountains in Country Uganda.", "sql": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\""}, {"query": "What are the times used by climbers who climbed mountains in the country of Uganda?", "sql": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\""}, {"query": "Please show the countries and the number of climbers from each country.", "sql": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country"}, {"query": "How many climbers are from each country?", "sql": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country"}, {"query": "List the countries that have more than one mountain.", "sql": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1"}, {"query": "Which countries have more than one mountain?", "sql": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1"}, {"query": "List the names of mountains that do not have any climber.", "sql": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)"}, {"query": "What are the names of countains that no climber has climbed?", "sql": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)"}, {"query": "Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.", "sql": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200"}, {"query": "What are the countries that have both mountains that are higher than 5600 and lower than 5200?", "sql": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200"}, {"query": "Show the range that has the most number of mountains.", "sql": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Which range contains the most mountains?", "sql": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Show the names of mountains with height more than 5000 or prominence more than 1000.", "sql": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000"}, {"query": "What are the names of mountains that have a height of over 5000 or a prominence of over 1000?", "sql": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000"}, {"query": "How many body builders are there?", "sql": "SELECT count(*) FROM body_builder"}, {"query": "List the total scores of body builders in ascending order.", "sql": "SELECT Total FROM body_builder ORDER BY Total ASC"}, {"query": "List the snatch score and clean jerk score of body builders in ascending order of snatch score.", "sql": "SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC"}, {"query": "What is the average snatch score of body builders?", "sql": "SELECT avg(Snatch) FROM body_builder"}, {"query": "What are the clean and jerk score of the body builder with the highest total score?", "sql": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1"}, {"query": "What are the birthdays of people in ascending order of height?", "sql": "SELECT Birth_Date FROM People ORDER BY Height ASC"}, {"query": "What are the names of body builders?", "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID"}, {"query": "What are the names of body builders whose total score is higher than 300?", "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300"}, {"query": "What is the name of the body builder with the greatest body weight?", "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"}, {"query": "What are the birth date and birth place of the body builder with the highest total points?", "sql": "SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1"}, {"query": "What are the heights of body builders with total score smaller than 315?", "sql": "SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  315"}, {"query": "What is the average total score of body builders with height bigger than 200?", "sql": "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200"}, {"query": "What are the names of body builders in descending order of total scores?", "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC"}, {"query": "List each birth place along with the number of people from there.", "sql": "SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place"}, {"query": "What is the most common birth place of people?", "sql": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What are the birth places that are shared by at least two people?", "sql": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2"}, {"query": "List the height and weight of people in descending order of height.", "sql": "SELECT Height ,  Weight FROM people ORDER BY Height DESC"}, {"query": "Show all information about each body builder.", "sql": "SELECT * FROM body_builder"}, {"query": "List the names and origins of people who are not body builders.", "sql": "SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id"}, {"query": "How many distinct birth places are there?", "sql": "SELECT count(DISTINCT Birth_Place) FROM people"}, {"query": "How many persons are not body builders?", "sql": "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)"}, {"query": "List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.", "sql": "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;"}, {"query": "What are the total scores of the body builders whose birthday contains the string \"January\" ?", "sql": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE \"%January%\";"}, {"query": "What is the minimum snatch score?", "sql": "SELECT min(snatch) FROM body_builder"}, {"query": "How many elections are there?", "sql": "SELECT count(*) FROM election"}, {"query": "List the votes of elections in descending order.", "sql": "SELECT Votes FROM election ORDER BY Votes DESC"}, {"query": "List the dates and vote percents of elections.", "sql": "SELECT Date ,  Vote_Percent FROM election"}, {"query": "What are the minimum and maximum vote percents of elections?", "sql": "SELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election"}, {"query": "What are the names and parties of representatives?", "sql": "SELECT Name ,  Party FROM representative"}, {"query": "What are the names of representatives whose party is not \"Republican\"?", "sql": "SELECT Name FROM Representative WHERE Party != \"Republican\""}, {"query": "What are the life spans of representatives from New York state or Indiana state?", "sql": "SELECT Lifespan FROM representative WHERE State  =  \"New York\" OR State  =  \"Indiana\""}, {"query": "What are the names of representatives and the dates of elections they participated in.", "sql": "SELECT T2.Name ,  T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID"}, {"query": "What are the names of representatives with more than 10000 votes in election?", "sql": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE Votes  >  10000"}, {"query": "What are the names of representatives in descending order of votes?", "sql": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC"}, {"query": "What is the party of the representative that has the smallest number of votes.", "sql": "SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes ASC LIMIT 1"}, {"query": "What are the lifespans of representatives in descending order of vote percent?", "sql": "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC"}, {"query": "What is the average number of votes of representatives from party \"Republican\"?", "sql": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  \"Republican\""}, {"query": "What are the different parties of representative? Show the party name and the number of representatives in each party.", "sql": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party"}, {"query": "What is the party that has the largest number of representatives?", "sql": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What parties have at least three representatives?", "sql": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  3"}, {"query": "What states have at least two representatives?", "sql": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2"}, {"query": "List the names of representatives that have not participated in elections listed here.", "sql": "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)"}, {"query": "Show the parties that have both representatives in New York state and representatives in Pennsylvania state.", "sql": "SELECT Party FROM representative WHERE State  =  \"New York\" INTERSECT SELECT Party FROM representative WHERE State  =  \"Pennsylvania\""}, {"query": "How many distinct parties are there for representatives?", "sql": "SELECT count(DISTINCT Party) FROM representative"}, {"query": "How many apartment bookings are there in total?", "sql": "SELECT count(*) FROM Apartment_Bookings"}, {"query": "Count the total number of apartment bookings.", "sql": "SELECT count(*) FROM Apartment_Bookings"}, {"query": "Show the start dates and end dates of all the apartment bookings.", "sql": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings"}, {"query": "What are the start date and end date of each apartment booking?", "sql": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings"}, {"query": "Show all distinct building descriptions.", "sql": "SELECT DISTINCT building_description FROM Apartment_Buildings"}, {"query": "Give me a list of all the distinct building descriptions.", "sql": "SELECT DISTINCT building_description FROM Apartment_Buildings"}, {"query": "Show the short names of the buildings managed by \"Emma\".", "sql": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  \"Emma\""}, {"query": "Which buildings does \"Emma\" manage? Give me the short names of the buildings.", "sql": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  \"Emma\""}, {"query": "Show the addresses and phones of all the buildings managed by \"Brenden\".", "sql": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\""}, {"query": "What are the address and phone number of the buildings managed by \"Brenden\"?", "sql": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\""}, {"query": "What are the building full names that contain the word \"court\"?", "sql": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\""}, {"query": "Find all the building full names containing the word \"court\".", "sql": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\""}, {"query": "What is the minimum and maximum number of bathrooms of all the apartments?", "sql": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments"}, {"query": "Give me the minimum and maximum bathroom count among all the apartments.", "sql": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments"}, {"query": "What is the average number of bedrooms of all apartments?", "sql": "SELECT avg(bedroom_count) FROM Apartments"}, {"query": "Find the average number of bedrooms of all the apartments.", "sql": "SELECT avg(bedroom_count) FROM Apartments"}, {"query": "Return the apartment number and the number of rooms for each apartment.", "sql": "SELECT apt_number ,  room_count FROM Apartments"}, {"query": "What are the apartment number and the room count of each apartment?", "sql": "SELECT apt_number ,  room_count FROM Apartments"}, {"query": "What is the average number of rooms of apartments with type code \"Studio\"?", "sql": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\""}, {"query": "Find the average room count of the apartments that have the \"Studio\" type code.", "sql": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\""}, {"query": "Return the apartment numbers of the apartments with type code \"Flat\".", "sql": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\""}, {"query": "Which apartments have type code \"Flat\"? Give me their apartment numbers.", "sql": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\""}, {"query": "Return the first names and last names of all guests", "sql": "SELECT guest_first_name ,  guest_last_name FROM Guests"}, {"query": "What are the first names and last names of all the guests?", "sql": "SELECT guest_first_name ,  guest_last_name FROM Guests"}, {"query": "Return the date of birth for all the guests with gender code \"Male\".", "sql": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\""}, {"query": "What are dates of birth of all the guests whose gender is \"Male\"?", "sql": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\""}, {"query": "Show the apartment numbers, start dates, and end dates of all the apartment bookings.", "sql": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id"}, {"query": "What are the apartment number, start date, and end date of each apartment booking?", "sql": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id"}, {"query": "What are the booking start and end dates of the apartments with type code \"Duplex\"?", "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \"Duplex\""}, {"query": "Return the booking start date and end date for the apartments that have type code \"Duplex\".", "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \"Duplex\""}, {"query": "What are the booking start and end dates of the apartments with more than 2 bedrooms?", "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2"}, {"query": "Find the booking start date and end date for the apartments that have more than two bedrooms.", "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2"}, {"query": "What is the booking status code of the apartment with apartment number \"Suite 634\"?", "sql": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\""}, {"query": "Tell me the booking status code for the apartment with number \"Suite 634\".", "sql": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\""}, {"query": "Show the distinct apartment numbers of the apartments that have bookings with status code \"Confirmed\".", "sql": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\""}, {"query": "Which apartments have bookings with status code \"Confirmed\"? Return their apartment numbers.", "sql": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\""}, {"query": "Show the average room count of the apartments that have booking status code \"Provisional\".", "sql": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\""}, {"query": "What is the average room count of the apartments whose booking status code is \"Provisional\"?", "sql": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\""}, {"query": "Show the guest first names, start dates, and end dates of all the apartment bookings.", "sql": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id"}, {"query": "What are the guest first name, start date, and end date of each apartment booking?", "sql": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id"}, {"query": "Show the start dates and end dates of all the apartment bookings made by guests with gender code \"Female\".", "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\""}, {"query": "What are the start date and end date of the apartment bookings made by female guests (gender code \"Female\")?", "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\""}, {"query": "Show the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\".", "sql": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\""}, {"query": "Which guests have apartment bookings with status code \"Confirmed\"? Return their first names and last names.", "sql": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\""}, {"query": "Show the facility codes of apartments with more than 4 bedrooms.", "sql": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4"}, {"query": "What are the facility codes of the apartments with more than four bedrooms?", "sql": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4"}, {"query": "Show the total number of rooms of all apartments with facility code \"Gym\".", "sql": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\""}, {"query": "Find the total number of rooms in the apartments that have facility code \"Gym\".", "sql": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\""}, {"query": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".", "sql": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\""}, {"query": "How many rooms in total are there in the apartments in the building with short name \"Columbus Square\"?", "sql": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\""}, {"query": "Show the addresses of the buildings that have apartments with more than 2 bathrooms.", "sql": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2"}, {"query": "Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings.", "sql": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2"}, {"query": "Show the apartment type codes and apartment numbers in the buildings managed by \"Kyle\".", "sql": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\""}, {"query": "What apartment type codes and apartment numbers do the buildings managed by \"Kyle\" have?", "sql": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\""}, {"query": "Show the booking status code and the corresponding number of bookings.", "sql": "SELECT \tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code"}, {"query": "How many bookings does each booking status have? List the booking status code and the number of corresponding bookings.", "sql": "SELECT \tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code"}, {"query": "Return all the apartment numbers sorted by the room count in ascending order.", "sql": "SELECT apt_number FROM Apartments ORDER BY room_count ASC"}, {"query": "Sort the apartment numbers in ascending order of room count.", "sql": "SELECT apt_number FROM Apartments ORDER BY room_count ASC"}, {"query": "Return the apartment number with the largest number of bedrooms.", "sql": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1"}, {"query": "What is the apartment number of the apartment with the most beds?", "sql": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1"}, {"query": "Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.", "sql": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC"}, {"query": "Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments.", "sql": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC"}, {"query": "Show the top 3 apartment type codes sorted by the average number of rooms in descending order.", "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3"}, {"query": "What are the top three apartment types in terms of the average room count? Give me the", "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3"}, {"query": "Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.", "sql": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1"}, {"query": "Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms.", "sql": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1"}, {"query": "Show the most common apartment type code.", "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which apartment type code appears the most often?", "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show the most common apartment type code among apartments with more than 1 bathroom.", "sql": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which apartment type code is the most common among apartments with more than one bathroom?", "sql": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show each apartment type code, and the maximum and minimum number of rooms for each type.", "sql": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code"}, {"query": "Return each apartment type code along with the maximum and minimum number of rooms among each type.", "sql": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code"}, {"query": "Show each gender code and the corresponding count of guests sorted by the count in descending order.", "sql": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC"}, {"query": "Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts.", "sql": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC"}, {"query": "How many apartments do not have any facility?", "sql": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)"}, {"query": "Find the number of apartments that have no facility.", "sql": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)"}, {"query": "Show the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\"", "sql": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\""}, {"query": "Which apartments have bookings with both status codes \"Provisional\" and \"Confirmed\"? Give me the apartment numbers.", "sql": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\""}, {"query": "Show the apartment numbers of apartments with unit status availability of both 0 and 1.", "sql": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1"}, {"query": "Which apartments have unit status availability of both 0 and 1? Return their apartment numbers.", "sql": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1"}, {"query": "How many games are held after season 2007?", "sql": "SELECT count(*) FROM game WHERE season  >  2007"}, {"query": "List the dates of games by the home team name in descending order.", "sql": "SELECT Date FROM game ORDER BY home_team DESC"}, {"query": "List the season, home team, away team of all the games.", "sql": "SELECT season ,  home_team ,  away_team FROM game"}, {"query": "What are the maximum, minimum and average home games each stadium held?", "sql": "SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM stadium"}, {"query": "What is the average attendance of stadiums with capacity percentage higher than 100%?", "sql": "SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100"}, {"query": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?", "sql": "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'"}, {"query": "What is the season of the game which causes the player 'Walter Samuel' to get injured?", "sql": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'"}, {"query": "What are the ids, scores, and dates of the games which caused at least two injury accidents?", "sql": "SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"}, {"query": "What are the id and name of the stadium where the most injury accidents happened?", "sql": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the id and name of the stadium where the largest number of injury accidents occurred.", "sql": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"}, {"query": "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?", "sql": "SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'"}, {"query": "How many different kinds of information sources are there for injury accidents?", "sql": "SELECT count(DISTINCT SOURCE) FROM injury_accident"}, {"query": "How many games are free of injury accidents?", "sql": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )"}, {"query": "How many distinct kinds of injuries happened after season 2010?", "sql": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010"}, {"query": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.", "sql": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'"}, {"query": "Show the name, average attendance, total attendance for stadiums where no accidents happened.", "sql": "SELECT name ,  average_attendance ,  total_attendance FROM stadium EXCEPT SELECT T2.name ,  T2.average_attendance ,  T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id"}, {"query": "Which stadium name contains the substring \"Bank\"?", "sql": "SELECT name FROM stadium WHERE name LIKE \"%Bank%\""}, {"query": "How many games has each stadium held?", "sql": "SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id"}, {"query": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.", "sql": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC"}, {"query": "List all country and league names.", "sql": "SELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id"}, {"query": "How many leagues are there in England?", "sql": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\""}, {"query": "What is the average weight of all players?", "sql": "SELECT avg(weight) FROM Player"}, {"query": "What is the maximum and minimum height of all players?", "sql": "SELECT max(weight) ,  min(weight) FROM Player"}, {"query": "List all player names who have an overall rating higher than the average.", "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes )"}, {"query": "What are the names of players who have the best dribbling?", "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling  =  ( SELECT max(overall_rating) FROM Player_Attributes)"}, {"query": "List the names of all players who have a crossing score higher than 90 and prefer their right foot.", "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing  >  90 AND T2.preferred_foot  =  \"right\""}, {"query": "List the names of all left-footed players who have overall rating between 85 and 90.", "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  \"left\" AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90"}, {"query": "What is the average rating for right-footed players and left-footed players?", "sql": "SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot"}, {"query": "Of all players with an overall rating greater than 80, how many are right-footed and left-footed?", "sql": "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot"}, {"query": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.", "sql": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85"}, {"query": "List all of the ids for left-footed players with a height between 180cm and 190cm.", "sql": "SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  \"left\""}, {"query": "Who are the top 3 players in terms of overall rating?", "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3"}, {"query": "List the names and birthdays of the top five players in terms of potential.", "sql": "SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5"}, {"query": "How many performances are there?", "sql": "SELECT count(*) FROM performance"}, {"query": "List the hosts of performances in ascending order of attendance.", "sql": "SELECT HOST FROM performance ORDER BY Attendance ASC"}, {"query": "What are the dates and locations of performances?", "sql": "SELECT Date ,  LOCATION FROM performance"}, {"query": "Show the attendances of the performances at location \"TD Garden\" or \"Bell Centre\"", "sql": "SELECT Attendance FROM performance WHERE LOCATION  =  \"TD Garden\" OR LOCATION  =  \"Bell Centre\""}, {"query": "What is the average number of attendees for performances?", "sql": "SELECT avg(Attendance) FROM performance"}, {"query": "What is the date of the performance with the highest number of attendees?", "sql": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1"}, {"query": "Show different locations and the number of performances at each location.", "sql": "SELECT LOCATION ,  COUNT(*) FROM performance GROUP BY LOCATION"}, {"query": "Show the most common location of performances.", "sql": "SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Show the locations that have at least two performances.", "sql": "SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*)  >=  2"}, {"query": "Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees.", "sql": "SELECT LOCATION FROM performance WHERE Attendance  >  2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance  <  1000"}, {"query": "Show the names of members and the location of the performances they attended.", "sql": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID"}, {"query": "Show the names of members and the location of performances they attended in ascending alphabetical order of their names.", "sql": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC"}, {"query": "Show the dates of performances with attending members whose roles are \"Violin\".", "sql": "SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  \"Violin\""}, {"query": "Show the names of members and the dates of performances they attended in descending order of attendance of the performances.", "sql": "SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC"}, {"query": "List the names of members who did not attend any performance.", "sql": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance)"}, {"query": "Find the buildings which have rooms with capacity more than 50.", "sql": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50"}, {"query": "What are the distinct buildings with capacities of greater than 50?", "sql": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50"}, {"query": "Count the number of rooms that are not in the Lamberton building.", "sql": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'"}, {"query": "How many classrooms are not in Lamberton?", "sql": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'"}, {"query": "What is the name and building of the departments whose budget is more than the average budget?", "sql": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)"}, {"query": "Give the name and building of the departments with greater than average budget.", "sql": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)"}, {"query": "Find the room number of the rooms which can sit 50 to 100 students and their buildings.", "sql": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100"}, {"query": "What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students?", "sql": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100"}, {"query": "Find the name and building of the department with the highest budget.", "sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1"}, {"query": "What is the department name and corresponding building for the department with the greatest budget?", "sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1"}, {"query": "What is the name of the student who has the highest total credits in the History department.", "sql": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1"}, {"query": "Give the name of the student in the History department with the most credits.", "sql": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1"}, {"query": "How many rooms does the Lamberton building have?", "sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'"}, {"query": "Count the number of classrooms in Lamberton.", "sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'"}, {"query": "How many students have advisors?", "sql": "SELECT count(DISTINCT s_id) FROM advisor"}, {"query": "Count the number of students who have advisors.", "sql": "SELECT count(DISTINCT s_id) FROM advisor"}, {"query": "How many departments offer courses?", "sql": "SELECT count(DISTINCT dept_name) FROM course"}, {"query": "Count the number of departments which offer courses.", "sql": "SELECT count(DISTINCT dept_name) FROM course"}, {"query": "How many different courses offered by Physics department?", "sql": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'"}, {"query": "Count the number of courses in the Physics department.", "sql": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'"}, {"query": "Find the title of courses that have two prerequisites?", "sql": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2"}, {"query": "What are the titles for courses with two prerequisites?", "sql": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2"}, {"query": "Find the title, credit, and department name of courses that have more than one prerequisites?", "sql": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1"}, {"query": "What is the title, credit value, and department name for courses with more than one prerequisite?", "sql": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1"}, {"query": "How many courses that do not have prerequisite?", "sql": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"}, {"query": "Count the number of courses without prerequisites.", "sql": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"}, {"query": "Find the name of the courses that do not have any prerequisite?", "sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"}, {"query": "What are the titles of courses without prerequisites?", "sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"}, {"query": "How many different instructors have taught some course?", "sql": "SELECT COUNT (DISTINCT id) FROM teaches"}, {"query": "Count the number of distinct instructors who have taught a course.", "sql": "SELECT COUNT (DISTINCT id) FROM teaches"}, {"query": "Find the total budgets of the Marketing or Finance department.", "sql": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'"}, {"query": "What is the sum of budgets of the Marketing and Finance departments?", "sql": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'"}, {"query": "Find the department name of the instructor whose name contains 'Soisalon'.", "sql": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'"}, {"query": "What is the name of the department with an instructure who has a name like 'Soisalon'?", "sql": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'"}, {"query": "How many rooms whose capacity is less than 50 does the Lamberton building have?", "sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50"}, {"query": "Count the number of rooms in Lamberton with capacity lower than 50.", "sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50"}, {"query": "Find the name and budget of departments whose budgets are more than the average budget.", "sql": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)"}, {"query": "What are the names and budgets of departments with budgets greater than the average?", "sql": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)"}, {"query": "what is the name of the instructor who is in Statistics department and earns the lowest salary?", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1"}, {"query": "Give the name of the lowest earning instructor in the Statistics department.", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1"}, {"query": "Find the title of course that is provided by both Statistics and Psychology departments.", "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'"}, {"query": "What is the title of a course that is listed in both the Statistics and Psychology departments?", "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'"}, {"query": "Find the title of course that is provided by Statistics but not Psychology departments.", "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'"}, {"query": "What are the titles of courses that are in the Statistics department but not the Psychology department?", "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'"}, {"query": "Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010.", "sql": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010"}, {"query": "What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?", "sql": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010"}, {"query": "Find the name of students who took any class in the years of 2009 and 2010.", "sql": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010"}, {"query": "What are the names of the students who took classes in 2009 or 2010?", "sql": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010"}, {"query": "Find the names of the top 3 departments that provide the largest amount of courses?", "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3"}, {"query": "What are the names of the 3 departments with the most courses?", "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3"}, {"query": "Find the name of the department that offers the highest total credits?", "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1"}, {"query": "What is the name of the department with the most credits?", "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1"}, {"query": "List the names of all courses ordered by their titles and credits.", "sql": "SELECT title FROM course ORDER BY title ,  credits"}, {"query": "Given the titles of all courses, in order of titles and credits.", "sql": "SELECT title FROM course ORDER BY title ,  credits"}, {"query": "Which department has the lowest budget?", "sql": "SELECT dept_name FROM department ORDER BY budget LIMIT 1"}, {"query": "Give the name of the department with the lowest budget.", "sql": "SELECT dept_name FROM department ORDER BY budget LIMIT 1"}, {"query": "List the names and buildings of all departments sorted by the budget from large to small.", "sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC"}, {"query": "What are the names and buildings of the deparments, sorted by budget descending?", "sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC"}, {"query": "Who is the instructor with the highest salary?", "sql": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1"}, {"query": "Give the name of the highest paid instructor.", "sql": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1"}, {"query": "List the information of all instructors ordered by their salary in ascending order.", "sql": "SELECT * FROM instructor ORDER BY salary"}, {"query": "Give all information regarding instructors, in order of salary from least to greatest.", "sql": "SELECT * FROM instructor ORDER BY salary"}, {"query": "Find the name of the students and their department names sorted by their total credits in ascending order.", "sql": "SELECT name ,  dept_name FROM student ORDER BY tot_cred"}, {"query": "What are the names of students and their respective departments, ordered by number of credits from least to greatest?", "sql": "SELECT name ,  dept_name FROM student ORDER BY tot_cred"}, {"query": "list in alphabetic order all course names and their instructors' names in year 2008.", "sql": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title"}, {"query": "Show all titles and their instructors' names for courses in 2008, in alphabetical order by title.", "sql": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title"}, {"query": "Find the name of instructors who are advising more than one student.", "sql": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1"}, {"query": "What are the names of instructors who advise more than one student?", "sql": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1"}, {"query": "Find the name of the students who have more than one advisor?", "sql": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1"}, {"query": "What are the names of students who have more than one advisor?", "sql": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1"}, {"query": "Find the number of rooms with more than 50 capacity for each building.", "sql": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building"}, {"query": "How many rooms in each building have a capacity of over 50?", "sql": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building"}, {"query": "Find the maximum and average capacity among rooms in each building.", "sql": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building"}, {"query": "What are the greatest and average capacity for rooms in each building?", "sql": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building"}, {"query": "Find the title of the course that is offered by more than one department.", "sql": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1"}, {"query": "What are the titles of courses that are offered in more than one department?", "sql": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1"}, {"query": "Find the total credits of courses provided by different department.", "sql": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name"}, {"query": "How many total credits are offered by each department?", "sql": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name"}, {"query": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors.", "sql": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)"}, {"query": "What is the lowest salary in departments with average salary greater than the overall average.", "sql": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)"}, {"query": "Find the number of courses provided in each semester and year.", "sql": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR"}, {"query": "How many courses are provided in each semester and year?", "sql": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR"}, {"query": "Find the year which offers the largest number of courses.", "sql": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which year had the greatest number of courses?", "sql": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the year and semester when offers the largest number of courses.", "sql": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the year and semester with the most courses?", "sql": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the name of department has the highest amount of students?", "sql": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name of the deparment with the highest enrollment?", "sql": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the total number of students in each department.", "sql": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name"}, {"query": "How many students are in each department?", "sql": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name"}, {"query": "Find the semester and year which has the least number of student taking any class.", "sql": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1"}, {"query": "Which semeseter and year had the fewest students?", "sql": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1"}, {"query": "What is the id of the instructor who advises of all students from History department?", "sql": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'"}, {"query": "Give id of the instructor who advises students in the History department.", "sql": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'"}, {"query": "Find the name and salary of the instructors who are advisors of any student from History department?", "sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'"}, {"query": "What are the names and salaries of instructors who advises students in the History department?", "sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'"}, {"query": "Find the id of the courses that do not have any prerequisite?", "sql": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq"}, {"query": "What are the ids of courses without prerequisites?", "sql": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq"}, {"query": "Find the name of the courses that do not have any prerequisite?", "sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"}, {"query": "What are the names of courses without prerequisites?", "sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"}, {"query": "What is the title of the prerequisite class of International Finance course?", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')"}, {"query": "Give the title of the prerequisite to the course International Finance.", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')"}, {"query": "Find the title of course whose prerequisite is course Differential Geometry.", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')"}, {"query": "What is the title of the course with Differential Geometry as a prerequisite?", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')"}, {"query": "Find the names of students who have taken any course in the fall semester of year 2003.", "sql": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)"}, {"query": "What are the names of students who took a course in the Fall of 2003?", "sql": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)"}, {"query": "What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?", "sql": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010"}, {"query": "Give the title of the course offered in Chandler during the Fall of 2010.", "sql": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010"}, {"query": "Find the name of the instructors who taught C Programming course before.", "sql": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'"}, {"query": "What are the names of instructors who have taught C Programming courses?", "sql": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'"}, {"query": "Find the name and salary of instructors who are advisors of the students from the Math department.", "sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'"}, {"query": "What are the names and salaries of instructors who advise students in the Math department?", "sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'"}, {"query": "Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.", "sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred"}, {"query": "What are the names of all instructors who advise students in the math depart sorted by total credits of the student.", "sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred"}, {"query": "What is the course title of the prerequisite of course Mobile Computing?", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')"}, {"query": "What is the title of the course that is a prerequisite for Mobile Computing?", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')"}, {"query": "Find the name of instructor who is the advisor of the student who has the highest number of total credits.", "sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1"}, {"query": "What is the name of the instructor who advises the student with the greatest number of total credits?", "sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1"}, {"query": "Find the name of instructors who didn't teach any courses?", "sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)"}, {"query": "What are the names of instructors who didn't teach?", "sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)"}, {"query": "Find the id of instructors who didn't teach any courses?", "sql": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches"}, {"query": "What are the ids of instructors who didnt' teach?", "sql": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches"}, {"query": "Find the names of instructors who didn't each any courses in any Spring semester.", "sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')"}, {"query": "What are the names of instructors who didn't teach courses in the Spring?", "sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')"}, {"query": "Find the name of the department which has the highest average salary of professors.", "sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1"}, {"query": "Which department has the highest average instructor salary?", "sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1"}, {"query": "Find the number and averaged salary of all instructors who are in the department with the highest budget.", "sql": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1"}, {"query": "How many instructors are in the department with the highest budget, and what is their average salary?", "sql": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1"}, {"query": "What is the title and credits of the course that is taught in the largest classroom (with the highest capacity)?", "sql": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)"}, {"query": "Give the title and credits for the course that is taught in the classroom with the greatest capacity.", "sql": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)"}, {"query": "Find the name of students who didn't take any course from Biology department.", "sql": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')"}, {"query": "What are the names of students who haven't taken any Biology courses?", "sql": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')"}, {"query": "Find the total number of students and total number of instructors for each department.", "sql": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name"}, {"query": "How many students and instructors are in each department?", "sql": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name"}, {"query": "Find the name of students who have taken the prerequisite course of the course with title International Finance.", "sql": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')"}, {"query": "What are the names of students who have taken the prerequisite for the course International Finance?", "sql": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')"}, {"query": "Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.", "sql": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')"}, {"query": "What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?", "sql": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')"}, {"query": "Find the name of students who took some course offered by Statistics department.", "sql": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'"}, {"query": "What are the names of students who have taken Statistics courses?", "sql": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'"}, {"query": "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.", "sql": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title"}, {"query": "What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?", "sql": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title"}, {"query": "Find the names of all instructors in computer science department", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'"}, {"query": "What are the names of all instructors in the Comp. Sci. department?", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'"}, {"query": "Find the names of all instructors in Comp. Sci. department with salary > 80000.", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000"}, {"query": "What are the names of the instructors in the Comp. Sci. department who earn more than 80000?", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000"}, {"query": "Find the names of all instructors who have taught some course and the course_id.", "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID"}, {"query": "What are the names of all instructors who have taught a course, as well as the corresponding course id?", "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID"}, {"query": "Find the names of all instructors in the Art department who have taught some course and the course_id.", "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'"}, {"query": "What are the names of Art instructors who have taught a course, and the corresponding course id?", "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'"}, {"query": "Find the names of all instructors whose name includes the substring \u201cdar\u201d.", "sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'"}, {"query": "What are the names of all instructors with names that include \"dar\"?", "sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'"}, {"query": "List in alphabetic order the names of all distinct instructors.", "sql": "SELECT DISTINCT name FROM  instructor ORDER BY name"}, {"query": "List the distinct names of the instructors, ordered by name.", "sql": "SELECT DISTINCT name FROM  instructor ORDER BY name"}, {"query": "Find courses that ran in Fall 2009 or in Spring 2010.", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"}, {"query": "What are the ids for courses in the Fall of 2009 or the Spring of 2010?", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"}, {"query": "Find courses that ran in Fall 2009 and in Spring 2010.", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"}, {"query": "What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"}, {"query": "Find courses that ran in Fall 2009 but not in Spring 2010.", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"}, {"query": "What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"}, {"query": "Find the salaries of all distinct instructors that are less than the largest salary.", "sql": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)"}, {"query": "What are the distinct salaries of all instructors who earned less than the maximum salary?", "sql": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)"}, {"query": "Find the total number of instructors who teach a course in the Spring 2010 semester.", "sql": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010"}, {"query": "How many instructors teach a course in the Spring of 2010?", "sql": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010"}, {"query": "Find the names and average salaries of all departments whose average salary is greater than 42000.", "sql": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000"}, {"query": "What are the names and average salaries for departments with average salary higher than 42000?", "sql": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000"}, {"query": "Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.", "sql": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')"}, {"query": "What are the names of instructors who earn more than at least one instructor from the Biology department?", "sql": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')"}, {"query": "Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.", "sql": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')"}, {"query": "What are the names of all instructors with a higher salary than any of the instructors in the Biology department?", "sql": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')"}, {"query": "How many debates are there?", "sql": "SELECT count(*) FROM debate"}, {"query": "List the venues of debates in ascending order of the number of audience.", "sql": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC"}, {"query": "What are the date and venue of each debate?", "sql": "SELECT Date ,  Venue FROM debate"}, {"query": "List the dates of debates with number of audience bigger than 150", "sql": "SELECT Date FROM debate WHERE Num_of_Audience  >  150"}, {"query": "Show the names of people aged either 35 or 36.", "sql": "SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36"}, {"query": "What is the party of the youngest people?", "sql": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1"}, {"query": "Show different parties of people along with the number of people in each party.", "sql": "SELECT Party ,  COUNT(*) FROM people GROUP BY Party"}, {"query": "Show the party that has the most people.", "sql": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Show the distinct venues of debates", "sql": "SELECT DISTINCT Venue FROM debate"}, {"query": "Show the names of people, and dates and venues of debates they are on the affirmative side.", "sql": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID"}, {"query": "Show the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name.", "sql": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Negative  =  T3.People_ID ORDER BY T3.Name ASC"}, {"query": "Show the names of people that are on affirmative side of debates with number of audience bigger than 200.", "sql": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200"}, {"query": "Show the names of people and the number of times they have been on the affirmative side of debates.", "sql": "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name"}, {"query": "Show the names of people who have been on the negative side of debates at least twice.", "sql": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"}, {"query": "List the names of people that have not been on the affirmative side of debates.", "sql": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)"}, {"query": "List the names of all the customers in alphabetical order.", "sql": "SELECT customer_details FROM customers ORDER BY customer_details"}, {"query": "Sort the customer names in alphabetical order.", "sql": "SELECT customer_details FROM customers ORDER BY customer_details"}, {"query": "Find all the policy type codes associated with the customer \"Dayana Robel\"", "sql": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\""}, {"query": "What are the type codes of the policies used by the customer \"Dayana Robel\"?", "sql": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\""}, {"query": "Which type of policy is most frequently used? Give me the policy type code.", "sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the type code of the most frequently used policy.", "sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find all the policy types that are used by more than 2 customers.", "sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2"}, {"query": "Which types of policy are chosen by more than 2 customers? Give me the policy type codes.", "sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2"}, {"query": "Find the total and average amount paid in claim headers.", "sql": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers"}, {"query": "What are the total amount and average amount paid in claim headers?", "sql": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers"}, {"query": "Find the total amount claimed in the most recently created document.", "sql": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)"}, {"query": "How much amount in total were claimed in the most recently created document?", "sql": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)"}, {"query": "What is the name of the customer who has made the largest amount of claim in a single claim?", "sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)"}, {"query": "Which customer made the largest amount of claim in a single claim? Return the customer details.", "sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)"}, {"query": "What is the name of the customer who has made the minimum amount of payment in one claim?", "sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)"}, {"query": "Which customer made the smallest amount of claim in one claim? Return the customer details.", "sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)"}, {"query": "Find the names of customers who have no policies associated.", "sql": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id"}, {"query": "What are the names of customers who do not have any policies?", "sql": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id"}, {"query": "How many claim processing stages are there in total?", "sql": "SELECT count(*) FROM claims_processing_stages"}, {"query": "Find the number of distinct stages in claim processing.", "sql": "SELECT count(*) FROM claims_processing_stages"}, {"query": "What is the name of the claim processing stage that most of the claims are on?", "sql": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which claim processing stage has the most claims? Show the claim status name.", "sql": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the names of customers whose name contains \"Diana\".", "sql": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\""}, {"query": "Which customers have the substring \"Diana\" in their names? Return the customer details.", "sql": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\""}, {"query": "Find the names of the customers who have an deputy policy.", "sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\""}, {"query": "Which customers have an insurance policy with the type code \"Deputy\"? Give me the customer details.", "sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\""}, {"query": "Find the names of customers who either have an deputy policy or uniformed policy.", "sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\""}, {"query": "Which customers have an insurance policy with the type code \"Deputy\" or \"Uniform\"? Return the customer details.", "sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\""}, {"query": "Find the names of all the customers and staff members.", "sql": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff"}, {"query": "What are the names of the customers and staff members?", "sql": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff"}, {"query": "Find the number of records of each policy type and its type code.", "sql": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code"}, {"query": "For each policy type, return its type code and its count in the record.", "sql": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code"}, {"query": "Find the name of the customer that has been involved in the most policies.", "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which customer have the most policies? Give me the customer details.", "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the description of the claim status \"Open\"?", "sql": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\""}, {"query": "Find the description of the claim status \"Open\".", "sql": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\""}, {"query": "How many distinct claim outcome codes are there?", "sql": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing"}, {"query": "Count the number of distinct claim outcome codes.", "sql": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing"}, {"query": "Which customer is associated with the latest policy?", "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)"}, {"query": "Find the customer who started a policy most recently.", "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)"}, {"query": "Show the number of accounts.", "sql": "SELECT count(*) FROM Accounts"}, {"query": "How many accounts are there?", "sql": "SELECT count(*) FROM Accounts"}, {"query": "How many customers have opened an account?", "sql": "SELECT count(DISTINCT customer_id) FROM Accounts"}, {"query": "Count the number of customers who have an account.", "sql": "SELECT count(DISTINCT customer_id) FROM Accounts"}, {"query": "Show the id, the date of account opened, the account name, and other account detail for all accounts.", "sql": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts"}, {"query": "What are the ids, date opened, name, and other details for all accounts?", "sql": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts"}, {"query": "Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.", "sql": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'"}, {"query": "What are the ids, names, dates of opening, and other details for accounts corresponding to the customer with the first name \"Meaghan\"?", "sql": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'"}, {"query": "Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.", "sql": "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\""}, {"query": "What are the names and other details for accounts corresponding to the customer named Meaghan Keeling?", "sql": "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\""}, {"query": "Show the first name and last name for the customer with account name 900.", "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\""}, {"query": "What are the full names of customers with the account name 900?", "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\""}, {"query": "How many customers don't have an account?", "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)"}, {"query": "Count the number of customers who do not have an account.", "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)"}, {"query": "Show the unique first names, last names, and phone numbers for all customers with any account.", "sql": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id"}, {"query": "What are the distinct first names, last names, and phone numbers for customers with accounts?", "sql": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id"}, {"query": "Show customer ids who don't have an account.", "sql": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts"}, {"query": "What are the customer ids for customers who do not have an account?", "sql": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts"}, {"query": "How many accounts does each customer have? List the number and customer id.", "sql": "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id"}, {"query": "Count the number of accounts corresponding to each customer id.", "sql": "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id"}, {"query": "What is the customer id, first and last name with most number of accounts.", "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the id and full name of the customer with the most accounts.", "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show id, first name and last name for all customers and the number of accounts.", "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id"}, {"query": "What are the the full names and ids for all customers, and how many accounts does each have?", "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id"}, {"query": "Show first name and id for all customers with at least 2 accounts.", "sql": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2"}, {"query": "What are the first names and ids for customers who have two or more accounts?", "sql": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2"}, {"query": "Show the number of customers.", "sql": "SELECT count(*) FROM Customers"}, {"query": "Count the number of customers.", "sql": "SELECT count(*) FROM Customers"}, {"query": "Show the number of customers for each gender.", "sql": "SELECT gender ,  count(*) FROM Customers GROUP BY gender"}, {"query": "How many customers are there of each gender?", "sql": "SELECT gender ,  count(*) FROM Customers GROUP BY gender"}, {"query": "How many transactions do we have?", "sql": "SELECT count(*) FROM Financial_transactions"}, {"query": "Count the number of transactions.", "sql": "SELECT count(*) FROM Financial_transactions"}, {"query": "How many transaction does each account have? Show the number and account id.", "sql": "SELECT count(*) ,  account_id FROM Financial_transactions"}, {"query": "Count the number of financial transactions that correspond to each account id.", "sql": "SELECT count(*) ,  account_id FROM Financial_transactions"}, {"query": "How many transaction does account with name 337 have?", "sql": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\""}, {"query": "Count the number of financial transactions that the account with the name 337 has.", "sql": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\""}, {"query": "What is the average, minimum, maximum, and total transaction amount?", "sql": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions"}, {"query": "Return the average, minimum, maximum, and total transaction amounts.", "sql": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions"}, {"query": "Show ids for all transactions whose amounts are greater than the average.", "sql": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)"}, {"query": "What are the ids for transactions that have an amount greater than the average amount of a transaction?", "sql": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)"}, {"query": "Show the transaction types and the total amount of transactions.", "sql": "SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type"}, {"query": "What are total transaction amounts for each transaction type?", "sql": "SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type"}, {"query": "Show the account name, id and the number of transactions for each account.", "sql": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id"}, {"query": "Return the names and ids of each account, as well as the number of transactions.", "sql": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id"}, {"query": "Show the account id with most number of transactions.", "sql": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the id of the account with the most transactions?", "sql": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show the account id and name with at least 4 transactions.", "sql": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4"}, {"query": "What are the ids and names of accounts with 4 or more transactions?", "sql": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4"}, {"query": "Show all product sizes.", "sql": "SELECT DISTINCT product_size FROM Products"}, {"query": "What are the different product sizes?", "sql": "SELECT DISTINCT product_size FROM Products"}, {"query": "Show all product colors.", "sql": "SELECT DISTINCT product_color FROM Products"}, {"query": "What are the different product colors?", "sql": "SELECT DISTINCT product_color FROM Products"}, {"query": "Show the invoice number and the number of transactions for each invoice.", "sql": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number"}, {"query": "How many transactions correspond to each invoice number?", "sql": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number"}, {"query": "What is the invoice number and invoice date for the invoice with most number of transactions?", "sql": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions?", "sql": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1"}, {"query": "How many invoices do we have?", "sql": "SELECT count(*) FROM Invoices"}, {"query": "Count the number of invoices.", "sql": "SELECT count(*) FROM Invoices"}, {"query": "Show invoice dates and order id and details for all invoices.", "sql": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id"}, {"query": "What are the invoice dates, order ids, and order details for all invoices?", "sql": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id"}, {"query": "Show the order ids and the number of invoices for each order.", "sql": "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id"}, {"query": "How many invoices correspond to each order id?", "sql": "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id"}, {"query": "What is the order id and order details for the order more than two invoices.", "sql": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2"}, {"query": "Return the order ids and details for orderes with two or more invoices.", "sql": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2"}, {"query": "What is the customer last name, id and phone number with most number of orders?", "sql": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the last name, id and phone number of the customer who has made the greatest number of orders.", "sql": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show all product names without an order.", "sql": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id"}, {"query": "What are the names of products that have never been ordered?", "sql": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id"}, {"query": "Show all product names and the total quantity ordered for each product name.", "sql": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name"}, {"query": "What are the different product names, and what is the sum of quantity ordered for each product?", "sql": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name"}, {"query": "Show the order ids and the number of items in each order.", "sql": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id"}, {"query": "How many order items correspond to each order id?", "sql": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id"}, {"query": "Show the product ids and the number of unique orders containing each product.", "sql": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id"}, {"query": "How many distinct order ids correspond to each product?", "sql": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id"}, {"query": "Show all product names and the number of customers having an order on each product.", "sql": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name"}, {"query": "What are teh names of the different products, as well as the number of customers who have ordered each product.", "sql": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name"}, {"query": "Show order ids and the number of products in each order.", "sql": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id"}, {"query": "How many different products correspond to each order id?", "sql": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id"}, {"query": "Show order ids and the total quantity in each order.", "sql": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id"}, {"query": "Give the order ids for all orders, as well as the total product quantity in each.", "sql": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id"}, {"query": "How many products were not included in any order?", "sql": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"}, {"query": "Count the number of products that were never ordered.", "sql": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"}, {"query": "How many churches opened before 1850 are there?", "sql": "SELECT count(*) FROM Church WHERE Open_Date  <  1850"}, {"query": "Show the name, open date, and organizer for all churches.", "sql": "SELECT name ,  open_date ,  organized_by FROM Church"}, {"query": "List all church names in descending order of opening date.", "sql": "SELECT name FROM church ORDER BY open_date DESC"}, {"query": "Show the opening year in whcih at least two churches opened.", "sql": "SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  2"}, {"query": "Show the organizer and name for churches that opened between 1830 and 1840.", "sql": "SELECT organized_by ,  name FROM church WHERE open_date BETWEEN 1830 AND 1840"}, {"query": "Show all opening years and the number of churches that opened in that year.", "sql": "SELECT open_date ,  count(*) FROM church GROUP BY open_date"}, {"query": "Show the name and opening year for three churches that opened most recently.", "sql": "SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3"}, {"query": "How many female people are older than 30 in our record?", "sql": "SELECT count(*) FROM people WHERE is_male  =  'F' AND age  >  30"}, {"query": "Show the country where people older than 30 and younger than 25 are from.", "sql": "SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30"}, {"query": "Show the minimum, maximum, and average age for all people.", "sql": "SELECT min(age) ,  max(age) ,  avg(age) FROM people"}, {"query": "Show the name and country for all people whose age is smaller than the average.", "sql": "SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)"}, {"query": "Show the pair of male and female names in all weddings after year 2014", "sql": "SELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  2014"}, {"query": "Show the name and age for all male people who don't have a wedding.", "sql": "SELECT name ,  age FROM people WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM wedding)"}, {"query": "Show all church names except for those that had a wedding in year 2015.", "sql": "SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id WHERE T2.year  =  2015"}, {"query": "Show all church names that have hosted least two weddings.", "sql": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2"}, {"query": "Show the names for all females from Canada having a wedding in year 2016.", "sql": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  'F' AND T2.country  =  'Canada'"}, {"query": "How many weddings are there in year 2016?", "sql": "SELECT count(*) FROM wedding WHERE YEAR  =  2016"}, {"query": "Show the church names for the weddings of all people older than 30.", "sql": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  30 OR T3.age  >  30"}, {"query": "Show all countries and the number of people from each country.", "sql": "SELECT country ,  count(*) FROM people GROUP BY country"}, {"query": "How many churches have a wedding in year 2016?", "sql": "SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  2016"}, {"query": "How many artists do we have?", "sql": "SELECT count(*) FROM artist"}, {"query": "Count the number of artists.", "sql": "SELECT count(*) FROM artist"}, {"query": "Show all artist name, age, and country ordered by the yeared they joined.", "sql": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join"}, {"query": "What are the names, ages, and countries of artists, sorted by the year they joined?", "sql": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join"}, {"query": "What are all distinct country for artists?", "sql": "SELECT DISTINCT country FROM artist"}, {"query": "Return the different countries for artists.", "sql": "SELECT DISTINCT country FROM artist"}, {"query": "Show all artist names and the year joined who are not from United States.", "sql": "SELECT name ,  year_join FROM artist WHERE country != 'United States'"}, {"query": "What are the names and year of joining for artists that do not have the country \"United States\"?", "sql": "SELECT name ,  year_join FROM artist WHERE country != 'United States'"}, {"query": "How many artists are above age 46 and joined after 1990?", "sql": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990"}, {"query": "Count the number of artists who are older than 46 and joined after 1990.", "sql": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990"}, {"query": "What is the average and minimum age of all artists from United States.", "sql": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'"}, {"query": "Return the average and minimum ages across artists from the United States.", "sql": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'"}, {"query": "What is the name of the artist who joined latest?", "sql": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1"}, {"query": "Return the name of the artist who has the latest join year.", "sql": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1"}, {"query": "How many exhibition are there in year 2005 or after?", "sql": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005"}, {"query": "Count the number of exhibitions that happened in or after 2005.", "sql": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005"}, {"query": "Show theme and year for all exhibitions with ticket prices lower than 15.", "sql": "SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15"}, {"query": "What are the theme and year for all exhibitions that have a ticket price under 15?", "sql": "SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15"}, {"query": "Show all artist names and the number of exhibitions for each artist.", "sql": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id"}, {"query": "How many exhibitions has each artist had?", "sql": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id"}, {"query": "What is the name and country for the artist with most number of exhibitions?", "sql": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the name and country corresponding to the artist who has had the most exhibitions.", "sql": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show names for artists without any exhibition.", "sql": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)"}, {"query": "What are the names of artists that have not had any exhibitions?", "sql": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)"}, {"query": "What is the theme and artist name for the exhibition with a ticket price higher than the average?", "sql": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)"}, {"query": "Return the names of artists and the themes of their exhibitions that had a ticket price higher than average.", "sql": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)"}, {"query": "Show the average, minimum, and maximum ticket prices for exhibitions for all years before 2009.", "sql": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009"}, {"query": "What are the average, minimum, and maximum ticket prices for exhibitions that happened prior to 2009?", "sql": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009"}, {"query": "Show theme and year for all exhibitions in an descending order of ticket price.", "sql": "SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC"}, {"query": "What are the themes and years for exhibitions, sorted by ticket price descending?", "sql": "SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC"}, {"query": "What is the theme, date, and attendance for the exhibition in year 2004?", "sql": "SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004"}, {"query": "Return the themes, dates, and attendance for exhibitions that happened in 2004.", "sql": "SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004"}, {"query": "Show all artist names who didn't have an exhibition in 2004.", "sql": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004"}, {"query": "What are the names of artists who did not have an exhibition in 2004?", "sql": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004"}, {"query": "Show the theme for exhibitions with both records of an attendance below 100 and above 500.", "sql": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500"}, {"query": "Which themes have had corresponding exhibitions that have had attendance both below 100 and above 500?", "sql": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500"}, {"query": "How many exhibitions have a attendance more than 100 or have a ticket price below 10?", "sql": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10"}, {"query": "Count the number of exhibitions that have had an attendnance of over 100 or a ticket prices under 10.", "sql": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10"}, {"query": "Show all artist names with an average exhibition attendance over 200.", "sql": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200"}, {"query": "What are the names of artist whose exhibitions draw over 200 attendees on average?", "sql": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200"}, {"query": "Find the id of the item whose title is \"orange\".", "sql": "SELECT i_id FROM item WHERE title  =  \"orange\""}, {"query": "List all information in the item table.", "sql": "SELECT * FROM item"}, {"query": "Find the number of reviews.", "sql": "SELECT count(*) FROM review"}, {"query": "How many users are there?", "sql": "SELECT count(*) FROM useracct"}, {"query": "Find the average and maximum rating of all reviews.", "sql": "SELECT avg(rating) ,  max(rating) FROM review"}, {"query": "Find the highest rank of all reviews.", "sql": "SELECT min(rank) FROM review"}, {"query": "How many different users wrote some reviews?", "sql": "SELECT count(DISTINCT u_id) FROM review"}, {"query": "How many different items were reviewed by some users?", "sql": "SELECT count(DISTINCT i_id) FROM review"}, {"query": "Find the number of items that did not receive any review.", "sql": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)"}, {"query": "Find the names of users who did not leave any review.", "sql": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)"}, {"query": "Find the names of goods that receive a rating of 10.", "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  =  10"}, {"query": "Find the titles of items whose rating is higher than the average review rating of all items.", "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)"}, {"query": "Find the titles of items that received any rating below 5.", "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5"}, {"query": "Find the titles of items that received both a rating higher than 8 and a rating below 5.", "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5"}, {"query": "Find the names of items whose rank is higher than 3 and whose average rating is above 5.", "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rank  >  3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating)  >  5"}, {"query": "Find the name of the item with the lowest average rating.", "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1"}, {"query": "List the titles of all items in alphabetic order .", "sql": "SELECT title FROM item ORDER BY title"}, {"query": "Find the name of the user who gives the most reviews.", "sql": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the name and id of the item with the highest average rating.", "sql": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1"}, {"query": "Find the name and id of the good with the highest average rank.", "sql": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1"}, {"query": "For each user, return the name and the average rating of reviews given by them.", "sql": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id"}, {"query": "For each user, find their name and the number of reviews written by them.", "sql": "SELECT T1.name ,  count(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id"}, {"query": "Find the name of the user who gave the highest rating.", "sql": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1"}, {"query": "Find the name of the source user with the highest average trust score.", "sql": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT 1"}, {"query": "Find each target user's name and average trust score.", "sql": "SELECT T1.name ,  avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id GROUP BY T2.target_u_id"}, {"query": "Find the name of the target user with the lowest trust score.", "sql": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id ORDER BY trust LIMIT 1"}, {"query": "Find the names of the items that did not receive any review.", "sql": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)"}, {"query": "Find the names of users who did not leave any review.", "sql": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)"}, {"query": "Find the number of users who did not write any review.", "sql": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)"}, {"query": "Find the number of items without any review.", "sql": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)"}, {"query": "How many players are there?", "sql": "SELECT count(*) FROM player"}, {"query": "List the names of players in ascending order of votes.", "sql": "SELECT Player_name FROM player ORDER BY Votes ASC"}, {"query": "What are the gender and occupation of players?", "sql": "SELECT Gender ,  Occupation FROM player"}, {"query": "List the name and residence for players whose occupation is not \"Researcher\".", "sql": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\""}, {"query": "Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\".", "sql": "SELECT Sponsor_name FROM player WHERE Residence  =  \"Brandon\" OR Residence  =  \"Birtle\""}, {"query": "What is the name of the player with the largest number of votes?", "sql": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1"}, {"query": "Show different occupations along with the number of players in each occupation.", "sql": "SELECT Occupation ,  COUNT(*) FROM player GROUP BY Occupation"}, {"query": "Please show the most common occupation of players.", "sql": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Show the residences that have at least two players.", "sql": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >=  2"}, {"query": "Show the names of players and names of their coaches.", "sql": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID"}, {"query": "Show the names of players coached by the rank 1 coach.", "sql": "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1"}, {"query": "Show the names and genders of players with a coach starting after 2011.", "sql": "SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011"}, {"query": "Show the names of players and names of their coaches in descending order of the votes of players.", "sql": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC"}, {"query": "List the names of players that do not have coaches.", "sql": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)"}, {"query": "Show the residences that have both a player of gender \"M\" and a player of gender \"F\".", "sql": "SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\""}, {"query": "How many coaches does each club has? List the club id, name and the number of coaches.", "sql": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id"}, {"query": "How many gold medals has the club with the most coaches won?", "sql": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "How many gymnasts are there?", "sql": "SELECT count(*) FROM gymnast"}, {"query": "Count the number of gymnasts.", "sql": "SELECT count(*) FROM gymnast"}, {"query": "List the total points of gymnasts in descending order.", "sql": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC"}, {"query": "What are the total points for all gymnasts, ordered by total points descending?", "sql": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC"}, {"query": "List the total points of gymnasts in descending order of floor exercise points.", "sql": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC"}, {"query": "What are the total points of gymnasts, ordered by their floor exercise points descending?", "sql": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC"}, {"query": "What is the average horizontal bar points for all gymnasts?", "sql": "SELECT avg(Horizontal_Bar_Points) FROM gymnast"}, {"query": "Return the average horizontal bar points across all gymnasts.", "sql": "SELECT avg(Horizontal_Bar_Points) FROM gymnast"}, {"query": "What are the names of people in ascending alphabetical order?", "sql": "SELECT Name FROM People ORDER BY Name ASC"}, {"query": "Return the names of people, ordered alphabetically.", "sql": "SELECT Name FROM People ORDER BY Name ASC"}, {"query": "What are the names of gymnasts?", "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"}, {"query": "Return the names of the gymnasts.", "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"}, {"query": "What are the names of gymnasts whose hometown is not \"Santo Domingo\"?", "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"Santo Domingo\""}, {"query": "Return the names of gymnasts who did not grow up in Santo Domingo.", "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"Santo Domingo\""}, {"query": "What is the age of the tallest person?", "sql": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1"}, {"query": "Return the age of the person with the greatest height.", "sql": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1"}, {"query": "List the names of the top 5 oldest people.", "sql": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5"}, {"query": "What are the names of the five oldest people?", "sql": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5"}, {"query": "What is the total point count of the youngest gymnast?", "sql": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1"}, {"query": "Return the total points of the gymnast with the lowest age.", "sql": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1"}, {"query": "What is the average age of all gymnasts?", "sql": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"}, {"query": "Return the average age across all gymnasts.", "sql": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"}, {"query": "What are the distinct hometowns of gymnasts with total points more than 57.5?", "sql": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5"}, {"query": "Give the different hometowns of gymnasts that have a total point score of above 57.5.", "sql": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5"}, {"query": "What are the hometowns of gymnasts and the corresponding number of gymnasts?", "sql": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown"}, {"query": "How many gymnasts are from each hometown?", "sql": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown"}, {"query": "What is the most common hometown of gymnasts?", "sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Return the hometown that is most common among gymnasts.", "sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What are the hometowns that are shared by at least two gymnasts?", "sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2"}, {"query": "Give the hometowns from which two or more gymnasts are from.", "sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2"}, {"query": "List the names of gymnasts in ascending order by their heights.", "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC"}, {"query": "What are the names of gymnasts, ordered by their heights ascending?", "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC"}, {"query": "List the distinct hometowns that are not associated with any gymnast.", "sql": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"}, {"query": "From which hometowns did no gymnasts come from?", "sql": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"}, {"query": "Show the hometowns shared by people older than 23 and younger than 20.", "sql": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20"}, {"query": "From which hometowns did both people older than 23 and younger than 20 come from?", "sql": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20"}, {"query": "How many distinct hometowns did these people have?", "sql": "SELECT count(DISTINCT Hometown) FROM people"}, {"query": "Count the number of different hometowns of these people.", "sql": "SELECT count(DISTINCT Hometown) FROM people"}, {"query": "Show the ages of gymnasts in descending order of total points.", "sql": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC"}, {"query": "What are the ages of the gymnasts, ordered descending by their total points?", "sql": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC"}, {"query": "Find the total savings balance of all accounts except the account with name \u2018Brown\u2019.", "sql": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'"}, {"query": "What is the total balance of savings accounts not belonging to someone with the name Brown?", "sql": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'"}, {"query": "How many accounts are there in total?", "sql": "SELECT count(*) FROM accounts"}, {"query": "Count the number of accounts.", "sql": "SELECT count(*) FROM accounts"}, {"query": "What is the total checking balance in all accounts?", "sql": "SELECT sum(balance) FROM checking"}, {"query": "Find the total balance across checking accounts.", "sql": "SELECT sum(balance) FROM checking"}, {"query": "Find the average checking balance.", "sql": "SELECT avg(balance) FROM checking"}, {"query": "What is the average balance in checking accounts?", "sql": "SELECT avg(balance) FROM checking"}, {"query": "How many accounts have a savings balance above the average savings balance?", "sql": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)"}, {"query": "Find the number of accounts with a savings balance that is higher than the average savings balance.", "sql": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)"}, {"query": "Find the name and id of accounts whose checking balance is below the maximum checking balance.", "sql": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)"}, {"query": "What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance?", "sql": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)"}, {"query": "What is the checking balance of the account whose owner\u2019s name contains the substring \u2018ee\u2019?", "sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'"}, {"query": "Find the balance of the checking account belonging to an owner whose name contains 'ee'.", "sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'"}, {"query": "Find the checking balance and saving balance in the Brown\u2019s account.", "sql": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'"}, {"query": "What are the checking and savings balances in accounts belonging to Brown?", "sql": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'"}, {"query": "Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance.", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)"}, {"query": "What are the names of accounts with checking balances greater than the average checking balance and savings balances below the average savings balance?", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)"}, {"query": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance.", "sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))"}, {"query": "What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance?", "sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))"}, {"query": "List all customers\u2019 names in the alphabetical order.", "sql": "SELECT name FROM accounts ORDER BY name"}, {"query": "What are the names of all the customers in alphabetical order?", "sql": "SELECT name FROM accounts ORDER BY name"}, {"query": "Find the name of account that has the lowest total checking and saving balance.", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1"}, {"query": "What is the name corresponding to the accoung with the lowest sum of checking and savings balances?", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1"}, {"query": "Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance.", "sql": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)"}, {"query": "What are the names and sum of checking and savings balances for accounts with savings balances higher than the average savings balance?", "sql": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)"}, {"query": "Find the name and checking balance of the account with the lowest savings balance.", "sql": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1"}, {"query": "What are the names and balances of checking accounts belonging to the customer with the lowest savings balance?", "sql": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1"}, {"query": "Find the number of checking accounts for each account name.", "sql": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name"}, {"query": "What are the names of customers with accounts, and how many checking accounts do each of them have?", "sql": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name"}, {"query": "Find the total saving balance for each account name.", "sql": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name"}, {"query": "What are the names of customers with accounts, and what are the total savings balances for each?", "sql": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name"}, {"query": "Find the name of accounts whose checking balance is below the average checking balance.", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)"}, {"query": "What are the names of customers with checking balances lower than the average checking balance?", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)"}, {"query": "Find the saving balance of the account with the highest checking balance.", "sql": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1"}, {"query": "What is the savings balance of the account belonging to the customer with the highest checking balance?", "sql": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1"}, {"query": "Find the total checking and saving balance of all accounts sorted by the total balance in ascending order.", "sql": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance"}, {"query": "What is the sum of checking and savings balances for all customers, ordered by the total balance?", "sql": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance"}, {"query": "Find the name and checking balance of the account with the lowest saving balance.", "sql": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1"}, {"query": "What is the name and checking balance of the account which has the lowest savings balance?", "sql": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1"}, {"query": "Find the name, checking balance and saving balance of all accounts in the bank.", "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid"}, {"query": "What are the names, checking balances, and savings balances for all customers?", "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid"}, {"query": "Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.", "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC"}, {"query": "What are the names, checking balances, and savings balances of customers, ordered by the total of checking and savings balances descending?", "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC"}, {"query": "Find the name of accounts whose checking balance is higher than corresponding saving balance.", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance"}, {"query": "What are the names of customers with a higher checking balance than savings balance?", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance"}, {"query": "Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.", "sql": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance"}, {"query": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?", "sql": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance"}, {"query": "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.", "sql": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3"}, {"query": "What are names and savings balances of the three accounts with the highest savings balances?", "sql": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3"}, {"query": "How many main stream browsers whose market share is at least 5 exist?", "sql": "SELECT count(*) FROM browser WHERE market_share  >=  5"}, {"query": "List the name of browsers in descending order by market share.", "sql": "SELECT name FROM browser ORDER BY market_share DESC"}, {"query": "List the ids, names and market shares of all browsers.", "sql": "SELECT id ,  name ,  market_share FROM browser"}, {"query": "What is the maximum, minimum and average market share of the listed browsers?", "sql": "SELECT max(market_share) ,  min(market_share) ,  avg(market_share) FROM browser"}, {"query": "What is the id and market share of the browser Safari?", "sql": "SELECT id ,  market_share FROM browser WHERE name  =  'Safari'"}, {"query": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?", "sql": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'"}, {"query": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?", "sql": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  'CProxy' AND T2.compatible_since_year  >  1998"}, {"query": "What are the ids and names of the web accelerators that are compatible with two or more browsers?", "sql": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"}, {"query": "What is the id and name of the browser that is compatible with the most web accelerators?", "sql": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"}, {"query": "When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?", "sql": "SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T3.name  =  'CACHEbox' AND T2.name  =  'Internet Explorer'"}, {"query": "How many different kinds of clients are supported by the web clients accelerators?", "sql": "SELECT count(DISTINCT client) FROM web_client_accelerator"}, {"query": "How many accelerators are not compatible with the browsers listed ?", "sql": "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );"}, {"query": "What distinct accelerator names are compatible with the browswers that have market share higher than 15?", "sql": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  15;"}, {"query": "List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.", "sql": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox'"}, {"query": "Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.", "sql": "SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'"}, {"query": "Which accelerator name contains substring \"Opera\"?", "sql": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\""}, {"query": "Find the number of web accelerators used for each Operating system.", "sql": "SELECT Operating_system ,  count(*) FROM web_client_accelerator GROUP BY Operating_system"}, {"query": "give me names of all compatible browsers and accelerators in the descending order of compatible year", "sql": "SELECT T2.name ,  T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id ORDER BY T1.compatible_since_year DESC"}, {"query": "How many wrestlers are there?", "sql": "SELECT count(*) FROM wrestler"}, {"query": "Count the number of wrestlers.", "sql": "SELECT count(*) FROM wrestler"}, {"query": "List the names of wrestlers in descending order of days held.", "sql": "SELECT Name FROM wrestler ORDER BY Days_held DESC"}, {"query": "What are the names of the wrestlers, ordered descending by days held?", "sql": "SELECT Name FROM wrestler ORDER BY Days_held DESC"}, {"query": "What is the name of the wrestler with the fewest days held?", "sql": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1"}, {"query": "Return the name of the wrestler who had the lowest number of days held.", "sql": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1"}, {"query": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?", "sql": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\""}, {"query": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.", "sql": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\""}, {"query": "What are the names and location of the wrestlers?", "sql": "SELECT Name ,  LOCATION FROM wrestler"}, {"query": "Give the names and locations of all wrestlers.", "sql": "SELECT Name ,  LOCATION FROM wrestler"}, {"query": "What are the elimination moves of wrestlers whose team is \"Team Orton\"?", "sql": "SELECT Elimination_Move FROM Elimination WHERE Team  =  \"Team Orton\""}, {"query": "Return the elimination movies of wrestlers on Team Orton.", "sql": "SELECT Elimination_Move FROM Elimination WHERE Team  =  \"Team Orton\""}, {"query": "What are the names of wrestlers and the elimination moves?", "sql": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID"}, {"query": "Give the names of wrestlers and their elimination moves.", "sql": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID"}, {"query": "List the names of wrestlers and the teams in elimination in descending order of days held.", "sql": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC"}, {"query": "What are the names of wrestlers and their teams in elimination, ordered descending by days held?", "sql": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC"}, {"query": "List the time of elimination of the wrestlers with largest days held.", "sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1"}, {"query": "What is the time of elimination for the wrestler with the most days held?", "sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1"}, {"query": "Show times of elimination of wrestlers with days held more than 50.", "sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50"}, {"query": "What are the times of elimination for wrestlers with over 50 days held?", "sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50"}, {"query": "Show different teams in eliminations and the number of eliminations from each team.", "sql": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team"}, {"query": "How many eliminations did each team have?", "sql": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team"}, {"query": "Show teams that have suffered more than three eliminations.", "sql": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3"}, {"query": "Which teams had more than 3 eliminations?", "sql": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3"}, {"query": "Show the reign and days held of wrestlers.", "sql": "SELECT Reign ,  Days_held FROM wrestler"}, {"query": "What are the reigns and days held of all wrestlers?", "sql": "SELECT Reign ,  Days_held FROM wrestler"}, {"query": "What are the names of wrestlers days held less than 100?", "sql": "SELECT Name FROM wrestler WHERE Days_held  <  100"}, {"query": "Return the names of wrestlers with fewer than 100 days held.", "sql": "SELECT Name FROM wrestler WHERE Days_held  <  100"}, {"query": "Please show the most common reigns of wrestlers.", "sql": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Which reign is the most common among wrestlers?", "sql": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "List the locations that are shared by more than two wrestlers.", "sql": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2"}, {"query": "Which locations are shared by more than two wrestlers?", "sql": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2"}, {"query": "List the names of wrestlers that have not been eliminated.", "sql": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)"}, {"query": "What are the names of wrestlers who have never been eliminated?", "sql": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)"}, {"query": "Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".", "sql": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\""}, {"query": "What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin?", "sql": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\""}, {"query": "What is the number of distinct teams that suffer elimination?", "sql": "SELECT COUNT (DISTINCT team) FROM elimination"}, {"query": "How many different teams have had eliminated wrestlers?", "sql": "SELECT COUNT (DISTINCT team) FROM elimination"}, {"query": "Show the times of elimination by \"Punk\" or \"Orton\".", "sql": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\""}, {"query": "What are the times of elimination for any instances in which the elimination was done by Punk or Orton?", "sql": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\""}, {"query": "How many schools are there?", "sql": "SELECT count(*) FROM school"}, {"query": "Count the number of schools.", "sql": "SELECT count(*) FROM school"}, {"query": "Show all school names in alphabetical order.", "sql": "SELECT school_name FROM school ORDER BY school_name"}, {"query": "List the name, location, mascot for all schools.", "sql": "SELECT school_name ,  LOCATION ,  mascot FROM school"}, {"query": "What are the total and average enrollment of all schools?", "sql": "SELECT sum(enrollment) ,  avg(enrollment) FROM school"}, {"query": "What are the mascots for schools with enrollments above the average?", "sql": "SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school)"}, {"query": "List the name of the school with the smallest enrollment.", "sql": "SELECT school_name FROM school ORDER BY enrollment LIMIT 1"}, {"query": "Show the average, maximum, minimum enrollment of all schools.", "sql": "SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school"}, {"query": "Show each county along with the number of schools and total enrollment in each county.", "sql": "SELECT county ,  count(*) ,  sum(enrollment) FROM school GROUP BY county"}, {"query": "How many donors have endowment for school named \"Glenn\"?", "sql": "SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  \"Glenn\""}, {"query": "List each donator name and the amount of endowment in descending order of the amount of endowment.", "sql": "SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC"}, {"query": "List the names of the schools without any endowment.", "sql": "SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment)"}, {"query": "List all the names of schools with an endowment amount smaller than or equal to 10.", "sql": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10"}, {"query": "Show the names of donors who donated to both school \"Glenn\" and \"Triton.\"", "sql": "SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Triton'"}, {"query": "Show the names of all the donors except those whose donation amount less than 9.", "sql": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9"}, {"query": "List the amount and donor name for the largest amount of donation.", "sql": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1"}, {"query": "How many budgets are above 3000 in year 2001 or before?", "sql": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001"}, {"query": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000", "sql": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001"}, {"query": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.", "sql": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002"}, {"query": "Show all donor names.", "sql": "SELECT DISTINCT donator_name FROM endowment"}, {"query": "How many budget record has a budget amount smaller than the invested amount?", "sql": "SELECT count(*) FROM budget WHERE budgeted  <  invested"}, {"query": "What is the total budget amount for school \"Glenn\" in all years?", "sql": "SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn'"}, {"query": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.", "sql": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10"}, {"query": "Find the names of schools that have more than one donator with donation amount above 8.5.", "sql": "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1"}, {"query": "Find the number of schools that have more than one donator whose donation amount is less than 8.5.", "sql": "SELECT count(*) FROM (SELECT * FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING count(*)  >  1)"}, {"query": "List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget.", "sql": "SELECT T1.School_name ,  T1.Mascot ,  T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id  =  T2.school_id WHERE Budgeted  >  6000 OR YEAR  <  2003 ORDER BY T2.total_budget_percent_invested ,  T2.total_budget_percent_budgeted"}, {"query": "How many buildings are there?", "sql": "SELECT count(*) FROM building"}, {"query": "Show the name, street address, and number of floors for all buildings ordered by the number of floors.", "sql": "SELECT name ,  street_address ,  floors FROM building ORDER BY floors"}, {"query": "What is the name of the tallest building?", "sql": "SELECT name FROM building ORDER BY height_feet DESC LIMIT 1"}, {"query": "What are the average, maximum, and minimum number of floors for all buildings?", "sql": "SELECT avg(floors) ,  max(floors) ,  min(floors) FROM building"}, {"query": "Show the number of buildings with a height above the average or a number of floors above the average.", "sql": "SELECT count(*) FROM building WHERE height_feet  >  (SELECT avg(height_feet) FROM building) OR floors  >  (SELECT avg(floors) FROM building)"}, {"query": "List the names of buildings with at least 200 feet of height and with at least 20 floors.", "sql": "SELECT name FROM building WHERE height_feet  >=  200 AND floors  >=  20"}, {"query": "Show the names and locations of institutions that are founded after 1990 and have the type \"Private\".", "sql": "SELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  'Private'"}, {"query": "Show institution types, along with the number of institutions and total enrollment for each type.", "sql": "SELECT TYPE ,  count(*) ,  sum(enrollment) FROM institution GROUP BY TYPE"}, {"query": "Show the institution type with the largest number of institutions.", "sql": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.", "sql": "SELECT TYPE FROM institution WHERE founded  >  1990 AND enrollment  >=  1000"}, {"query": "Show the name of buildings that do not have any institution.", "sql": "SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)"}, {"query": "Show the names of buildings except for those having an institution founded in 2003.", "sql": "SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003"}, {"query": "For each building, show the name of the building and the number of institutions in it.", "sql": "SELECT T1.name ,  count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id"}, {"query": "Show the names and heights of buildings with at least two institutions founded after 1880.", "sql": "SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2"}, {"query": "Show all the distinct institution types.", "sql": "SELECT DISTINCT TYPE FROM institution"}, {"query": "Show institution names along with the number of proteins for each institution.", "sql": "SELECT T1.institution ,  count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.institution_id"}, {"query": "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?", "sql": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'"}, {"query": "Show the protein name and the institution name.", "sql": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id"}, {"query": "How many proteins are associated with an institution in a building with at least 20 floors?", "sql": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20"}, {"query": "How many institutions do not have an associated protein in our record?", "sql": "SELECT count(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein)"}, {"query": "Show all the locations where no cinema has capacity over 800.", "sql": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800"}, {"query": "Show all the locations where some cinemas were opened in both year 2010 and year 2011.", "sql": "SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011"}, {"query": "How many cinema do we have?", "sql": "SELECT count(*) FROM cinema"}, {"query": "Count the number of cinemas.", "sql": "SELECT count(*) FROM cinema"}, {"query": "Show name, opening year, and capacity for each cinema.", "sql": "SELECT name ,  openning_year ,  capacity FROM cinema"}, {"query": "Show the cinema name and location for cinemas with capacity above average.", "sql": "SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)"}, {"query": "What are all the locations with a cinema?", "sql": "SELECT DISTINCT LOCATION FROM cinema"}, {"query": "Find the distinct locations that has a cinema.", "sql": "SELECT DISTINCT LOCATION FROM cinema"}, {"query": "Show all the cinema names and opening years in descending order of opening year.", "sql": "SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC"}, {"query": "What are the name and location of the cinema with the largest capacity?", "sql": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1"}, {"query": "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.", "sql": "SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011"}, {"query": "Show each location and the number of cinemas there.", "sql": "SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION"}, {"query": "What is the location with the most cinemas opened in year 2010 or later?", "sql": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show all the locations with at least two cinemas with capacity above 300.", "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2"}, {"query": "Which locations have 2 or more cinemas with capacity over 300?", "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2"}, {"query": "Show the title and director for all films.", "sql": "SELECT title ,  directed_by FROM film"}, {"query": "What are the title and director of each film?", "sql": "SELECT title ,  directed_by FROM film"}, {"query": "Show all directors.", "sql": "SELECT DISTINCT directed_by FROM film"}, {"query": "Who are all the directors?", "sql": "SELECT DISTINCT directed_by FROM film"}, {"query": "List all directors along with the number of films directed by each director.", "sql": "SELECT directed_by ,  count(*) FROM film GROUP BY directed_by"}, {"query": "What is total number of show times per dat for each cinema?", "sql": "SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id"}, {"query": "What are the title and maximum price of each film?", "sql": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id"}, {"query": "Give me the title and highest price for each film.", "sql": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id"}, {"query": "Show cinema name, film title, date, and price for each record in schedule.", "sql": "SELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id"}, {"query": "What are the title and director of the films without any schedule?", "sql": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)"}, {"query": "Show director with the largest number of show times in total.", "sql": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1"}, {"query": "Find the locations that have more than one movie theater with capacity above 300.", "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1"}, {"query": "In which locations are there more than one movie theater with capacity above 300?", "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1"}, {"query": "How many films have the word 'Dummy' in their titles?", "sql": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\""}, {"query": "Count the number of films whose title contains the word 'Dummy'.", "sql": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\""}, {"query": "Are the customers holding coupons with amount 500 bad or good?", "sql": "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500"}, {"query": "How many bookings did each customer make? List the customer id, first name, and the count.", "sql": "SELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id"}, {"query": "What is the maximum total amount paid by a customer? List the customer id and amount.", "sql": "SELECT customer_id ,  sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1"}, {"query": "What are the id and the amount of refund of the booking that incurred the most times of payments?", "sql": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the id of the product that is booked for 3 times?", "sql": "SELECT product_id FROM products_booked GROUP BY product_id HAVING count(*)  =  3"}, {"query": "What is the product description of the product booked with an amount of 102.76?", "sql": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76"}, {"query": "What are the start date and end date of the booking that has booked the product named 'Book collection A'?", "sql": "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'"}, {"query": "What are the names of products whose availability equals to 1?", "sql": "SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.available_yn  =  1"}, {"query": "How many different product types are there?", "sql": "SELECT count(DISTINCT product_type_code) FROM products_for_hire"}, {"query": "What are the first name, last name, and gender of all the good customers? Order by their last name.", "sql": "SELECT first_name ,  last_name ,  gender_mf FROM customers WHERE good_or_bad_customer  =  'good' ORDER BY last_name"}, {"query": "What is the average amount due for all the payments?", "sql": "SELECT avg(amount_due) FROM payments"}, {"query": "What are the maximum, minimum, and average booked count for the products booked?", "sql": "SELECT max(booked_count) ,  min(booked_count) ,  avg(booked_count) FROM products_booked"}, {"query": "What are all the distinct payment types?", "sql": "SELECT DISTINCT payment_type_code FROM payments"}, {"query": "What are the daily hire costs for the products with substring 'Book' in its name?", "sql": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'"}, {"query": "How many products are never booked with amount higher than 200?", "sql": "SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount  >  200 )"}, {"query": "What are the coupon amount of the coupons owned by both good and bad customers?", "sql": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'"}, {"query": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'", "sql": "SELECT payment_date FROM payments WHERE amount_paid  >  300 OR payment_type_code  =  'Check'"}, {"query": "What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?", "sql": "SELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  'Cutlery' AND daily_hire_cost  <  20"}, {"query": "How many phones are there?", "sql": "SELECT count(*) FROM phone"}, {"query": "List the names of phones in ascending order of price.", "sql": "SELECT Name FROM phone ORDER BY Price ASC"}, {"query": "What are the memories and carriers of phones?", "sql": "SELECT Memory_in_G ,  Carrier FROM phone"}, {"query": "List the distinct carriers of phones with memories bigger than 32.", "sql": "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32"}, {"query": "Show the names of phones with carrier either \"Sprint\" or \"TMobile\".", "sql": "SELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\""}, {"query": "What is the carrier of the most expensive phone?", "sql": "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1"}, {"query": "Show different carriers of phones together with the number of phones with each carrier.", "sql": "SELECT Carrier ,  COUNT(*) FROM phone GROUP BY Carrier"}, {"query": "Show the most frequently used carrier of the phones.", "sql": "SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.", "sql": "SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64"}, {"query": "Show the names of phones and the districts of markets they are on.", "sql": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID"}, {"query": "Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market.", "sql": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking"}, {"query": "Show the names of phones that are on market with number of shops greater than 50.", "sql": "SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID WHERE T2.Num_of_shops  >  50"}, {"query": "For each phone, show its names and total number of stocks.", "sql": "SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name"}, {"query": "Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.", "sql": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC"}, {"query": "List the names of phones that are not on any market.", "sql": "SELECT Name FROM phone WHERE Phone_id NOT IN (SELECT Phone_ID FROM phone_market)"}, {"query": "How many gas companies are there?", "sql": "SELECT count(*) FROM company"}, {"query": "What is the total number of companies?", "sql": "SELECT count(*) FROM company"}, {"query": "List the company name and rank for all companies in the decreasing order of their sales.", "sql": "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC"}, {"query": "What is the name and rank of every company ordered by descending number of sales?", "sql": "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC"}, {"query": "Show the company name and the main industry for all companies whose headquarters are not from USA.", "sql": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'"}, {"query": "What are the companies and main industries of all companies that are not headquartered in the United States?", "sql": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'"}, {"query": "Show all company names and headquarters in the descending order of market value.", "sql": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC"}, {"query": "What are the names and headquarters of all companies ordered by descending market value?", "sql": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC"}, {"query": "Show minimum, maximum, and average market value for all companies.", "sql": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company"}, {"query": "What is the minimum, maximum, and average market value for every company?", "sql": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company"}, {"query": "Show all main industry for all companies.", "sql": "SELECT DISTINCT main_industry FROM company"}, {"query": "What are the different main industries for all companies?", "sql": "SELECT DISTINCT main_industry FROM company"}, {"query": "List all headquarters and the number of companies in each headquarter.", "sql": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters"}, {"query": "For each headquarter, what are the headquarter and how many companies are centered there?", "sql": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters"}, {"query": "Show all main industry and total market value in each industry.", "sql": "SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry"}, {"query": "What are the main indstries and total market value for each industry?", "sql": "SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry"}, {"query": "List the main industry with highest total market value and its number of companies.", "sql": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1"}, {"query": "For each main industry, what is the total number of companies for the industry with the highest total market value?", "sql": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1"}, {"query": "Show headquarters with at least two companies in the banking industry.", "sql": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2"}, {"query": "What are the headquarters with at least two companies in the banking industry?", "sql": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2"}, {"query": "Show gas station id, location, and manager_name for all gas stations ordered by open year.", "sql": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year"}, {"query": "What are the gas station ids, locations, and manager names for the gas stations ordered by opening year?", "sql": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year"}, {"query": "How many gas station are opened between 2000 and 2005?", "sql": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005"}, {"query": "What is the total number of gas stations that opened between 2000 and 2005?", "sql": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005"}, {"query": "Show all locations and the number of gas stations in each location ordered by the count.", "sql": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)"}, {"query": "For each location, how many gas stations are there in order?", "sql": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)"}, {"query": "Show all headquarters with both a company in banking industry and a company in Oil and gas.", "sql": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'"}, {"query": "What are the headquarters that have both a company in the banking and 'oil and gas' industries?", "sql": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'"}, {"query": "Show all headquarters without a company in banking industry.", "sql": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'"}, {"query": "What are the headquarters without companies that are in the banking industry?", "sql": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'"}, {"query": "Show the company name with the number of gas station.", "sql": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id"}, {"query": "For each company id, what are the companies and how many gas stations does each one operate?", "sql": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id"}, {"query": "Show company name and main industry without a gas station.", "sql": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)"}, {"query": "What are the main industries of the companies without gas stations and what are the companies?", "sql": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)"}, {"query": "Show the manager name for gas stations belonging to the ExxonMobil company.", "sql": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'"}, {"query": "What are the names of the managers for gas stations that are operated by the ExxonMobil company?", "sql": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'"}, {"query": "Show all locations where a gas station for company with market value greater than 100 is located.", "sql": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100"}, {"query": "What are the locations that have gas stations owned by a company with a market value greater than 100?", "sql": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100"}, {"query": "Show the manager name with most number of gas stations opened after 2000.", "sql": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name of the manager with the most gas stations that opened after 2000?", "sql": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1"}, {"query": "order all gas station locations by the opening year.", "sql": "SELECT LOCATION FROM gas_station ORDER BY open_year"}, {"query": "What are the locations of all the gas stations ordered by opening year?", "sql": "SELECT LOCATION FROM gas_station ORDER BY open_year"}, {"query": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.", "sql": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion"}, {"query": "What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?", "sql": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion"}, {"query": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.", "sql": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3"}, {"query": "What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets?", "sql": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3"}, {"query": "How many regions do we have?", "sql": "SELECT count(*) FROM region"}, {"query": "Count the number of regions.", "sql": "SELECT count(*) FROM region"}, {"query": "Show all distinct region names ordered by their labels.", "sql": "SELECT DISTINCT region_name FROM region ORDER BY Label"}, {"query": "What are the different region names, ordered by labels?", "sql": "SELECT DISTINCT region_name FROM region ORDER BY Label"}, {"query": "How many parties do we have?", "sql": "SELECT count(DISTINCT party_name) FROM party"}, {"query": "Count the number of different parties.", "sql": "SELECT count(DISTINCT party_name) FROM party"}, {"query": "Show the ministers and the time they took and left office, listed by the time they left office.", "sql": "SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office"}, {"query": "Who are the ministers, when did they take office, and when did they leave office, ordered by when they left office?", "sql": "SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office"}, {"query": "Show the minister who took office after 1961 or before 1959.", "sql": "SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959"}, {"query": "Who are the ministers who took office after 1961 or before 1959?", "sql": "SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959"}, {"query": "Show all ministers who do not belong to Progress Party.", "sql": "SELECT minister FROM party WHERE party_name != 'Progress Party'"}, {"query": "Which ministers are not a part of the Progress Party?", "sql": "SELECT minister FROM party WHERE party_name != 'Progress Party'"}, {"query": "Show all ministers and parties they belong to in descending order of the time they took office.", "sql": "SELECT minister ,  party_name FROM party ORDER BY took_office DESC"}, {"query": "Who are the ministers and what parties do they belong to, listed descending by the times they took office?", "sql": "SELECT minister ,  party_name FROM party ORDER BY took_office DESC"}, {"query": "Return the minister who left office at the latest time.", "sql": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1"}, {"query": "Which minister left office the latest?", "sql": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1"}, {"query": "List member names and their party names.", "sql": "SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id"}, {"query": "What are the names of members and their corresponding parties?", "sql": "SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id"}, {"query": "Show all party names and the number of members in each party.", "sql": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id"}, {"query": "How many members are in each party?", "sql": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id"}, {"query": "What is the name of party with most number of members?", "sql": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the name of the party with the most members.", "sql": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show all party names and their region names.", "sql": "SELECT T1.party_name ,  T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id"}, {"query": "What are the names of parties and their respective regions?", "sql": "SELECT T1.party_name ,  T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id"}, {"query": "Show names of parties that does not have any members.", "sql": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)"}, {"query": "What are the names of parties that have no members?", "sql": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)"}, {"query": "Show the member names which are in both the party with id 3 and the party with id 1.", "sql": "SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1"}, {"query": "Which member names are shared among members in the party with the id 3 and the party with the id 1?", "sql": "SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1"}, {"query": "Show member names that are not in the Progress Party.", "sql": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != \"Progress Party\""}, {"query": "Which member names corresponding to members who are not in the Progress Party?", "sql": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != \"Progress Party\""}, {"query": "How many party events do we have?", "sql": "SELECT count(*) FROM party_events"}, {"query": "Count the number of party events.", "sql": "SELECT count(*) FROM party_events"}, {"query": "Show party names and the number of events for each party.", "sql": "SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id"}, {"query": "How many events are there for each party?", "sql": "SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id"}, {"query": "Show all member names who are not in charge of any event.", "sql": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id"}, {"query": "What are the names of members who are not in charge of any events?", "sql": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id"}, {"query": "What are the names of parties with at least 2 events?", "sql": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2"}, {"query": "Return the names of parties that have two or more events.", "sql": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2"}, {"query": "What is the name of member in charge of greatest number of events?", "sql": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the name of the member who is in charge of the most events.", "sql": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "find the event names that have more than 2 records.", "sql": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2"}, {"query": "Which event names were used more than twice for party events?", "sql": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2"}, {"query": "How many Annual Meeting events happened in the United Kingdom region?", "sql": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\""}, {"query": "Count the number of Annual Meeting events that took place in the region of the United Kingdom.", "sql": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\""}, {"query": "How many pilots are there?", "sql": "SELECT count(*) FROM pilot"}, {"query": "List the names of pilots in ascending order of rank.", "sql": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC"}, {"query": "What are the positions and teams of pilots?", "sql": "SELECT POSITION ,  Team FROM pilot"}, {"query": "List the distinct positions of pilots older than 30.", "sql": "SELECT DISTINCT POSITION FROM pilot WHERE Age  >  30"}, {"query": "Show the names of pilots from team \"Bradley\" or \"Fordham\".", "sql": "SELECT Pilot_name FROM pilot WHERE Team  =  \"Bradley\" OR Team  =  \"Fordham\""}, {"query": "What is the joined year of the pilot of the highest rank?", "sql": "SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1"}, {"query": "What are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality.", "sql": "SELECT Nationality ,  COUNT(*) FROM pilot GROUP BY Nationality"}, {"query": "Show the most common nationality of pilots.", "sql": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.", "sql": "SELECT POSITION FROM pilot WHERE Join_Year\t <  2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year\t >  2005"}, {"query": "Show the names of pilots and models of aircrafts they have flied with.", "sql": "SELECT T3.Pilot_name ,  T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID"}, {"query": "Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot.", "sql": "SELECT T3.Pilot_name ,  T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID ORDER BY T3.Rank"}, {"query": "Show the fleet series of the aircrafts flied by pilots younger than 34", "sql": "SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  34"}, {"query": "Show the names of pilots and the number of records they have.", "sql": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name"}, {"query": "Show names of pilots that have more than one record.", "sql": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1"}, {"query": "List the names of pilots that do not have any record.", "sql": "SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record)"}, {"query": "What document status codes do we have?", "sql": "SELECT document_status_code FROM Ref_Document_Status;"}, {"query": "What is the description of document status code 'working'?", "sql": "SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = \"working\";"}, {"query": "What document type codes do we have?", "sql": "SELECT document_type_code FROM Ref_Document_Types;"}, {"query": "What is the description of document type 'Paper'?", "sql": "SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = \"Paper\";"}, {"query": "What are the shipping agent names?", "sql": "SELECT shipping_agent_name FROM Ref_Shipping_Agents;"}, {"query": "What is the shipping agent code of shipping agent UPS?", "sql": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\";"}, {"query": "What are all role codes?", "sql": "SELECT role_code FROM ROLES;"}, {"query": "What is the description of role code ED?", "sql": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";"}, {"query": "How many employees do we have?", "sql": "SELECT count(*) FROM Employees;"}, {"query": "What is the role of the employee named Koby?", "sql": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";"}, {"query": "List all document ids and receipt dates of documents.", "sql": "SELECT document_id ,  receipt_date FROM Documents;"}, {"query": "How many employees does each role have? List role description, id and number of employees.", "sql": "SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;"}, {"query": "List roles that have more than one employee. List the role description and number of employees.", "sql": "SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id)  >  1;"}, {"query": "What is the document status description of the document with id 1?", "sql": "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;"}, {"query": "How many documents have the status code done?", "sql": "SELECT count(*) FROM Documents WHERE document_status_code = \"done\";"}, {"query": "List the document type code for the document with the id 2.", "sql": "SELECT document_type_code FROM Documents WHERE document_id = 2;"}, {"query": "List the document ids for any documents with the status code done and the type code paper.", "sql": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\";"}, {"query": "What is the name of the shipping agent of the document with id 2?", "sql": "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;"}, {"query": "How many documents were shipped by USPS?", "sql": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";"}, {"query": "Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.", "sql": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;"}, {"query": "What is the receipt date of the document with id 3?", "sql": "SELECT receipt_date FROM Documents WHERE document_id = 3;"}, {"query": "What address was the document with id 4 mailed to?", "sql": "SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;"}, {"query": "What is the mail date of the document with id 7?", "sql": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;"}, {"query": "List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.", "sql": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";"}, {"query": "List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.", "sql": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";"}, {"query": "What is draft detail of the document with id 7?", "sql": "SELECT draft_details FROM Document_Drafts WHERE document_id = 7;"}, {"query": "How many draft copies does the document with id 2 have?", "sql": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;"}, {"query": "Which document has the most draft copies? List its document id and number of draft copies.", "sql": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;"}, {"query": "Which documents have more than 1 draft copies? List document id and number of draft copies.", "sql": "SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*)  >  1;"}, {"query": "List all employees in the circulation history of the document with id 1. List the employee's name.", "sql": "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;"}, {"query": "List the employees who have not showed up in any circulation history of documents. List the employee's name.", "sql": "SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id"}, {"query": "Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.", "sql": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;"}, {"query": "For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.", "sql": "SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;"}, {"query": "List all department names ordered by their starting date.", "sql": "SELECT dname FROM department ORDER BY mgr_start_date"}, {"query": "find all dependent names who have a spouse relation with some employee.", "sql": "SELECT Dependent_name FROM dependent WHERE relationship  =  'Spouse'"}, {"query": "how many female dependents are there?", "sql": "SELECT count(*) FROM dependent WHERE sex  =  'F'"}, {"query": "Find the names of departments that are located in Houston.", "sql": "SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber  =  t2.dnumber WHERE t2.dlocation  =  'Houston'"}, {"query": "Return the first names and last names of employees who earn more than 30000 in salary.", "sql": "SELECT fname ,  lname FROM employee WHERE salary  >  30000"}, {"query": "Find the number of employees of each gender whose salary is lower than 50000.", "sql": "SELECT count(*) ,  sex FROM employee WHERE salary  <  50000 GROUP BY sex"}, {"query": "list the first and last names, and the addresses of all employees in the ascending order of their birth date.", "sql": "SELECT fname ,  lname ,  address FROM employee ORDER BY Bdate"}, {"query": "what are the event details of the services that have the type code 'Marriage'?", "sql": "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  'Marriage'"}, {"query": "What are the ids and details of events that have more than one participants?", "sql": "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1"}, {"query": "How many events have each participants attended? List the participant id, type and the number.", "sql": "SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID"}, {"query": "What are all the the participant ids, type code and details?", "sql": "SELECT Participant_ID ,  Participant_Type_Code ,  Participant_Details FROM  Participants"}, {"query": "How many participants belong to the type 'Organizer'?", "sql": "SELECT count(*) FROM participants WHERE participant_type_code  =  'Organizer'"}, {"query": "List the type of the services in alphabetical order.", "sql": "SELECT service_type_code FROM services ORDER BY service_type_code"}, {"query": "List the service id and details for the events.", "sql": "SELECT service_id ,  event_details FROM EVENTS"}, {"query": "How many events had participants whose details had the substring 'Dr.'", "sql": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'"}, {"query": "What is the most common participant type?", "sql": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which service id and type has the least number of participants?", "sql": "SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1"}, {"query": "What is the id of the event with the most participants?", "sql": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which events id does not have any participant with detail 'Kenyatta Kuhn'?", "sql": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'"}, {"query": "Which services type had both successful and failure event details?", "sql": "SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Fail'"}, {"query": "How many events did not have any participants?", "sql": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)"}, {"query": "What are all the distinct participant ids who attended any events?", "sql": "SELECT count(DISTINCT participant_id) FROM participants_in_Events"}, {"query": "What is the name of the race held most recently?", "sql": "SELECT name FROM races ORDER BY date DESC LIMIT 1"}, {"query": "What is the name of the race that occurred most recently?", "sql": "SELECT name FROM races ORDER BY date DESC LIMIT 1"}, {"query": "What is the name and date of the most recent race?", "sql": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1"}, {"query": "What is the name and date of the race that occurred most recently?", "sql": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1"}, {"query": "Find the names of all races held in 2017.", "sql": "SELECT name FROM races WHERE YEAR = 2017"}, {"query": "What are the names of all the races that occurred in the year 2017?", "sql": "SELECT name FROM races WHERE YEAR = 2017"}, {"query": "Find the distinct names of all races held between 2014 and 2017?", "sql": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017"}, {"query": "What are the unique names of all race held between 2014 and 2017?", "sql": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017"}, {"query": "List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?", "sql": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000"}, {"query": "What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?", "sql": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000"}, {"query": "Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?", "sql": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000"}, {"query": "What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?", "sql": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000"}, {"query": "What are the forename and surname of the driver who has the smallest laptime?", "sql": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1"}, {"query": "What is the forename and surname of the driver with the shortest laptime?", "sql": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1"}, {"query": "What is the id and family name of the driver who has the longest laptime?", "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1"}, {"query": "What is the id and last name of the driver with the longest laptime?", "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1"}, {"query": "What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?", "sql": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2"}, {"query": "What is the id, first name, and last name of the driver who was in the first position for laptime at least twice?", "sql": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2"}, {"query": "How many drivers participated in the race Australian Grand Prix held in 2009?", "sql": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009"}, {"query": "How many drivers were in the Australian Grand Prix held in 2009?", "sql": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009"}, {"query": "How many drivers did not participate in the races held in 2009?", "sql": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )"}, {"query": "How many drivers did not race in 2009?", "sql": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )"}, {"query": "Give me a list of names and years of races that had any driver whose forename is Lewis?", "sql": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\""}, {"query": "What are the names and years of all races that had a driver with the last name Lewis?", "sql": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\""}, {"query": "Find the forename and surname of drivers whose nationality is German?", "sql": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\""}, {"query": "What is the first and last name of all the German drivers?", "sql": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\""}, {"query": "Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?", "sql": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\""}, {"query": "What is the id and first name of all the drivers who participated in the Australian Grand Prix and the Chinese Grand Prix?", "sql": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\""}, {"query": "What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?", "sql": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\""}, {"query": "What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?", "sql": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\""}, {"query": "Find all the forenames of distinct drivers who was in position 1 as standing and won?", "sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1"}, {"query": "What are all the different first names of the drivers who are in position as standing and won?", "sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1"}, {"query": "Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?", "sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20"}, {"query": "What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?", "sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20"}, {"query": "What are the numbers of constructors for different nationalities?", "sql": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality"}, {"query": "For each nationality, how many different constructors are there?", "sql": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality"}, {"query": "What are the numbers of races for each constructor id?", "sql": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid"}, {"query": "For each constructor id, how many races are there?", "sql": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid"}, {"query": "What are the names of races that were held after 2017 and the circuits were in the country of Spain?", "sql": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017"}, {"query": "What are the names of the races held after 2017 in Spain?", "sql": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017"}, {"query": "What are the unique names of races that held after 2000 and the circuits were in Spain?", "sql": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000"}, {"query": "What are the names of all races held after 2000 in Spain?", "sql": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000"}, {"query": "Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841.", "sql": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)"}, {"query": "What is the id and stop number for each driver that has a shorter pit stop than the driver in the race with id 841?", "sql": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)"}, {"query": "Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?", "sql": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)"}, {"query": "What are the different ids and stop durations of all the drivers whose stop lasted longer than the driver in the race with the id 841?", "sql": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)"}, {"query": "List the forenames of all distinct drivers in alphabetical order?", "sql": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC"}, {"query": "What are the first names of all the different drivers in alphabetical order?", "sql": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC"}, {"query": "List the names of all distinct races in reversed  lexicographic order?", "sql": "SELECT DISTINCT name FROM races ORDER BY name DESC"}, {"query": "What are the different names of all the races in reverse alphabetical order?", "sql": "SELECT DISTINCT name FROM races ORDER BY name DESC"}, {"query": "What are the names of races held between 2009 and 2011?", "sql": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011"}, {"query": "What are the names of all races held between 2009 and 2011?", "sql": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011"}, {"query": "What are the names of races held after 12:00:00 or before 09:00:00?", "sql": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\""}, {"query": "What are the names of all races that occurred after 12:00:00 or before 09:00:00?", "sql": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\""}, {"query": "What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?", "sql": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"}, {"query": "What are the drivers' first names,last names, and ids for all those that had more than 8 stops or participated in more than 5 races?", "sql": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"}, {"query": "What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?", "sql": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"}, {"query": "What are the last names and ids of all drivers who had 11 pit stops and participated in more than 5 races?", "sql": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"}, {"query": "What is the id and last name of the driver who participated in the most races after 2010?", "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the id and last name of the driver who participated in the most races after 2010?", "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the names of circuits that belong to UK or Malaysia?", "sql": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\""}, {"query": "What are the names of all the circuits that are in the UK or Malaysia?", "sql": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\""}, {"query": "Find the id and location of circuits that belong to France or Belgium?", "sql": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\""}, {"query": "What are the ids and locations of all circuits in France or Belgium?", "sql": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\""}, {"query": "Find the names of Japanese constructors that have once earned more than 5 points?", "sql": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5"}, {"query": "What are the names of all the Japanese constructors that have earned more than 5 points?", "sql": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5"}, {"query": "What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?", "sql": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\""}, {"query": "What is the average fastest lap speed for the Monaco Grand Prix in 2008?", "sql": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\""}, {"query": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?", "sql": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\""}, {"query": "What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?", "sql": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\""}, {"query": "What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?", "sql": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year"}, {"query": "For each race name, What is the maximum fastest lap speed for races after 2004 ordered by year?", "sql": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year"}, {"query": "What are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year?", "sql": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year"}, {"query": "What is the average fastest lap speed for races held after 2004, for each race, ordered by year?", "sql": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year"}, {"query": "Find the id, forename and number of races of all drivers who have at least participated in two races?", "sql": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2"}, {"query": "What is the id, forename, and number of races for all drivers that have participated in at least 2 races?", "sql": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2"}, {"query": "Find the driver id and number of races of all drivers who have at most participated in 30 races?", "sql": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30"}, {"query": "For each id of a driver who participated in at most 30 races, how many races did they participate in?", "sql": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30"}, {"query": "Find the id and surname of the driver who participated the most number of races?", "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the ids and last names of all drivers who participated in the most races?", "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"}, {"query": "How many technicians are there?", "sql": "SELECT count(*) FROM technician"}, {"query": "What is the number of technicians?", "sql": "SELECT count(*) FROM technician"}, {"query": "List the names of technicians in ascending order of age.", "sql": "SELECT Name FROM technician ORDER BY Age ASC"}, {"query": "What are the names of the technicians by ascending order of age?", "sql": "SELECT Name FROM technician ORDER BY Age ASC"}, {"query": "What are the team and starting year of technicians?", "sql": "SELECT Team ,  Starting_Year FROM technician"}, {"query": "What is the team and starting year for each technician?", "sql": "SELECT Team ,  Starting_Year FROM technician"}, {"query": "List the name of technicians whose team is not \"NYY\".", "sql": "SELECT Name FROM technician WHERE Team != \"NYY\""}, {"query": "What is the name of the technician whose team is not 'NYY'?", "sql": "SELECT Name FROM technician WHERE Team != \"NYY\""}, {"query": "Show the name of technicians aged either 36 or 37", "sql": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37"}, {"query": "What are the names of the technicians aged either 36 or 37?", "sql": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37"}, {"query": "What is the starting year of the oldest technicians?", "sql": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1"}, {"query": "What is the starting year for the oldest technician?", "sql": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1"}, {"query": "Show different teams of technicians and the number of technicians in each team.", "sql": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team"}, {"query": "For each team, how many technicians are there?", "sql": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team"}, {"query": "Please show the team that has the most number of technicians.", "sql": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What are the teams with the most technicians?", "sql": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Show the team that have at least two technicians.", "sql": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2"}, {"query": "What is the team with at least 2 technicians?", "sql": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2"}, {"query": "Show names of technicians and series of machines they are assigned to repair.", "sql": "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID"}, {"query": "What are the names of technicians and the machine series that they repair?", "sql": "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID"}, {"query": "Show names of technicians in ascending order of quality rank of the machine they are assigned.", "sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank"}, {"query": "What are the names of the technicians by ascending order of quality rank for the machine they are assigned?", "sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank"}, {"query": "Show names of technicians who are assigned to repair machines with value point more than 70.", "sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70"}, {"query": "What are the names of the technicians that are assigned to repair machines with more point values than 70?", "sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70"}, {"query": "Show names of technicians and the number of machines they are assigned to repair.", "sql": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name"}, {"query": "What are the names of the technicians  and how many machines are they assigned to repair?", "sql": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name"}, {"query": "List the names of technicians who have not been assigned to repair machines.", "sql": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)"}, {"query": "What are the names of the technicians that have not been assigned to repair machines?", "sql": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)"}, {"query": "Show the starting years shared by technicians from team \"CLE\" and \"CWS\".", "sql": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\""}, {"query": "What are the starting years shared by the technicians from the team \"CLE\" or \"CWS\"?", "sql": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\""}, {"query": "How many entrepreneurs are there?", "sql": "SELECT count(*) FROM entrepreneur"}, {"query": "Count the number of entrepreneurs.", "sql": "SELECT count(*) FROM entrepreneur"}, {"query": "List the companies of entrepreneurs in descending order of money requested.", "sql": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC"}, {"query": "What are the companies of entrepreneurs, ordered descending by amount of money requested?", "sql": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC"}, {"query": "List the companies and the investors of entrepreneurs.", "sql": "SELECT Company ,  Investor FROM entrepreneur"}, {"query": "What are the companies and investors that correspond to each entrepreneur?", "sql": "SELECT Company ,  Investor FROM entrepreneur"}, {"query": "What is the average money requested by all entrepreneurs?", "sql": "SELECT avg(Money_Requested) FROM entrepreneur"}, {"query": "Return the average money requested across all entrepreneurs.", "sql": "SELECT avg(Money_Requested) FROM entrepreneur"}, {"query": "What are the names of people in ascending order of weight?", "sql": "SELECT Name FROM People ORDER BY Weight ASC"}, {"query": "Return the names of people, ordered by weight ascending.", "sql": "SELECT Name FROM People ORDER BY Weight ASC"}, {"query": "What are the names of entrepreneurs?", "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID"}, {"query": "Return the names of entrepreneurs.", "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID"}, {"query": "What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?", "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\""}, {"query": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.", "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\""}, {"query": "What is the weight of the shortest person?", "sql": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1"}, {"query": "Return the weight of the shortest person.", "sql": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1"}, {"query": "What is the name of the entrepreneur with the greatest weight?", "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"}, {"query": "Return the name of the heaviest entrepreneur.", "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"}, {"query": "What is the total money requested by entrepreneurs with height more than 1.85?", "sql": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85"}, {"query": "Give the total money requested by entrepreneurs who are taller than 1.85.", "sql": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85"}, {"query": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?", "sql": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\""}, {"query": "Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones.", "sql": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\""}, {"query": "What are the weights of entrepreneurs in descending order of money requested?", "sql": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC"}, {"query": "Return the weights of entrepreneurs, ordered descending by amount of money requested.", "sql": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC"}, {"query": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?", "sql": "SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor"}, {"query": "How many entrepreneurs correspond to each investor?", "sql": "SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor"}, {"query": "What is the investor that has invested in the most number of entrepreneurs?", "sql": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Return the investor who have invested in the greatest number of entrepreneurs.", "sql": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What are the investors that have invested in at least two entrepreneurs?", "sql": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2"}, {"query": "Return the investors who have invested in two or more entrepreneurs.", "sql": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2"}, {"query": "List the names of entrepreneurs and their companies in descending order of money requested?", "sql": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested"}, {"query": "What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?", "sql": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested"}, {"query": "List the names of people that are not entrepreneurs.", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)"}, {"query": "What are the names of people who are not entrepreneurs?", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)"}, {"query": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.", "sql": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000"}, {"query": "What are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000?", "sql": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000"}, {"query": "How many distinct companies are there?", "sql": "SELECT count(DISTINCT Company) FROM entrepreneur"}, {"query": "Count the number of different companies.", "sql": "SELECT count(DISTINCT Company) FROM entrepreneur"}, {"query": "Show the company of the tallest entrepreneur.", "sql": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1"}, {"query": "Which company was started by the entrepreneur with the greatest height?", "sql": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1"}, {"query": "How many perpetrators are there?", "sql": "SELECT count(*) FROM perpetrator"}, {"query": "List the date of perpetrators in descending order of the number of people killed.", "sql": "SELECT Date FROM perpetrator ORDER BY Killed DESC"}, {"query": "List the number of people injured by perpetrators in ascending order.", "sql": "SELECT Injured FROM perpetrator ORDER BY Injured ASC"}, {"query": "What is the average number of people injured by all perpetrators?", "sql": "SELECT avg(Injured) FROM perpetrator"}, {"query": "What is the location of the perpetrator with the largest kills.", "sql": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1"}, {"query": "What are the names of people in ascending order of height?", "sql": "SELECT Name FROM People ORDER BY Height ASC"}, {"query": "What are the names of perpetrators?", "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID"}, {"query": "What are the names of perpetrators whose country is not \"China\"?", "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\""}, {"query": "What is the name of the perpetrator with the biggest weight.", "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1"}, {"query": "What is the total kills of the perpetrators with height more than 1.84.", "sql": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84"}, {"query": "What are the names of perpetrators in country \"China\" or \"Japan\"?", "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\""}, {"query": "What are the heights of perpetrators in descending order of the number of people they injured?", "sql": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC"}, {"query": "What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.", "sql": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country"}, {"query": "What is the country that has the most perpetrators?", "sql": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What are the countries that have at least two perpetrators?", "sql": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*)  >=  2"}, {"query": "List the names of perpetrators in descending order of the year.", "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC"}, {"query": "List the names of people that are not perpetrators.", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)"}, {"query": "Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.", "sql": "SELECT Country FROM perpetrator WHERE Injured  >  50 INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  20"}, {"query": "How many distinct locations of perpetrators are there?", "sql": "SELECT count(DISTINCT LOCATION) FROM perpetrator"}, {"query": "Show the date of the tallest perpetrator.", "sql": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"query": "In which year did the most recent crime happen?", "sql": "SELECT max(YEAR) FROM perpetrator;"}, {"query": "Report the name of all campuses in Los Angeles county.", "sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\""}, {"query": "What campuses are located in the county of Los Angeles?", "sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\""}, {"query": "What are the names of all campuses located at Chico?", "sql": "SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\""}, {"query": "What campuses are located in Chico?", "sql": "SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\""}, {"query": "Find all the campuses opened in 1958.", "sql": "SELECT campus FROM campuses WHERE YEAR  =  1958"}, {"query": "What are the campuses that opened in 1958?", "sql": "SELECT campus FROM campuses WHERE YEAR  =  1958"}, {"query": "Find the name of the campuses opened before 1800.", "sql": "SELECT campus FROM campuses WHERE YEAR  <  1800"}, {"query": "What campuses opened before 1800?", "sql": "SELECT campus FROM campuses WHERE YEAR  <  1800"}, {"query": "Which campus was opened between 1935 and 1939?", "sql": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939"}, {"query": "What campuses opened between 1935 and 1939?", "sql": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939"}, {"query": "Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.", "sql": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\""}, {"query": "What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?", "sql": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\""}, {"query": "What is the campus fee of \"San Jose State University\" in year 1996?", "sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996"}, {"query": "What is the campus fee for San Jose State University in 1996?", "sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996"}, {"query": "What is the campus fee of \"San Francisco State University\" in year 1996?", "sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996"}, {"query": "What is the campus fee for San Francisco State University in 1996?", "sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996"}, {"query": "Find the count of universities whose campus fee is greater than the average campus fee.", "sql": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)"}, {"query": "How many universities have a campus fee higher than average?", "sql": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)"}, {"query": "Find the count of universities whose campus fee is greater than the average campus fee.", "sql": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)"}, {"query": "How many universities have a campus fee greater than the average?", "sql": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)"}, {"query": "Which university is in Los Angeles county and opened after 1950?", "sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950"}, {"query": "What campuses are located in Los Angeles county and opened after 1950?", "sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950"}, {"query": "Which year has the most degrees conferred?", "sql": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1"}, {"query": "In what year was the most degrees conferred?", "sql": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1"}, {"query": "Which campus has the most degrees conferred in all times?", "sql": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1"}, {"query": "What campus has the most degrees  conferrred over its entire existence?", "sql": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1"}, {"query": "Which campus has the most faculties in year 2003?", "sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1"}, {"query": "What campus has the most faculties in 2003?", "sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1"}, {"query": "Find the average fee on a CSU campus in 1996", "sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996"}, {"query": "What is the average fee for a CSU campus in the year of 1996?", "sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996"}, {"query": "What is the average fee on a CSU campus in 2005?", "sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005"}, {"query": "What is the average fee for a CSU campus in the year of 2005?", "sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005"}, {"query": "report the total number of degrees granted between 1998 and 2002.", "sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus"}, {"query": "how many degrees were conferred between 1998 and 2002?", "sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus"}, {"query": "For each Orange county campus, report the number of degrees granted after 2000.", "sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus"}, {"query": "What is the total number of degrees granted after 2000 for each Orange county campus?", "sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus"}, {"query": "Find the names of the campus which has more faculties in 2002 than every campus in Orange county.", "sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")"}, {"query": "What are the names of the campus that have more faculties in 2002 than the maximum number in Orange county?", "sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")"}, {"query": "What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?", "sql": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200"}, {"query": "What campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled?", "sql": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200"}, {"query": "How many campuses are there in Los Angeles county?", "sql": "SELECT count(*) FROM campuses WHERE county  =  \"Los Angeles\""}, {"query": "How many campuses exist are in the county of LA?", "sql": "SELECT count(*) FROM campuses WHERE county  =  \"Los Angeles\""}, {"query": "List the campuses in Los Angeles county.", "sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\""}, {"query": "What campuses are in Los Angeles county?", "sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\""}, {"query": "How many degrees were conferred in \"San Jose State University\" in 2000?", "sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000"}, {"query": "How many degrees were conferred at San Jose State University in 2000?", "sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000"}, {"query": "What are the degrees conferred in \"San Francisco State University\" in 2001.", "sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001"}, {"query": "What degrees were conferred in San Francisco State University in the year 2001?", "sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001"}, {"query": "How many faculty is there in total in the year of 2002?", "sql": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002"}, {"query": "How many faculty, in total, are there in the year 2002?", "sql": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002"}, {"query": "What is the number of faculty lines in campus \"Long Beach State University\" in 2002?", "sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\""}, {"query": "What is the number of faculty at Long Beach State University in 2002?", "sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\""}, {"query": "How many faculty lines are there in \"San Francisco State University\" in year 2004?", "sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\""}, {"query": "How many faculty lines are there at San Francisco State University in 2004?", "sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\""}, {"query": "List the campus that have between 600 and 1000 faculty lines in year 2004.", "sql": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004"}, {"query": "What are the campuses that had between 600 and 1000 faculty members in 2004?", "sql": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004"}, {"query": "How many faculty lines are there in the university that conferred the most number of degrees in year 2002?", "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1"}, {"query": "How many faculty members did the university that conferred the most degrees in 2002 have?", "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1"}, {"query": "How many faculty lines are there in the university that conferred the least number of degrees in year 2001?", "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1"}, {"query": "How many faculty members are at the university that gave the least number of degrees in 2001?", "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1"}, {"query": "How many undergraduates are there in \"San Jose State University\" in year 2004?", "sql": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\""}, {"query": "How many undergraduates are there at San Jose State", "sql": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\""}, {"query": "What is the number of graduates in \"San Francisco State University\" in year 2004?", "sql": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\""}, {"query": "How many people graduated from San Francisco State University in 2004?", "sql": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\""}, {"query": "What is the campus fee of \"San Francisco State University\" in year 2000?", "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000"}, {"query": "In the year 2000, what is the campus fee for San Francisco State University?", "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000"}, {"query": "Find the campus fee of \"San Jose State University\" in year 2000.", "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000"}, {"query": "What is the campus fee in the year 2000 for San Jose State University?", "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000"}, {"query": "How many CSU campuses are there?", "sql": "SELECT count(*) FROM campuses"}, {"query": "What is the total number of campuses?", "sql": "SELECT count(*) FROM campuses"}, {"query": "How many candidates are there?", "sql": "SELECT count(*) FROM candidate"}, {"query": "Count the number of candidates.", "sql": "SELECT count(*) FROM candidate"}, {"query": "Which poll resource provided the most number of candidate information?", "sql": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the poll resource associated with the most candidates.", "sql": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1"}, {"query": "what are the top 3 highest support rates?", "sql": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3"}, {"query": "Return the top 3 greatest support rates.", "sql": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3"}, {"query": "Find the id of the candidate who got the lowest oppose rate.", "sql": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1"}, {"query": "What is the id of the candidate with the lowest oppose rate?", "sql": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1"}, {"query": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.", "sql": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate"}, {"query": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?", "sql": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate"}, {"query": "which poll source does the highest oppose rate come from?", "sql": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1"}, {"query": "Return the poll source corresponding to the candidate who has the oppose rate.", "sql": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1"}, {"query": "List all people names in the order of their date of birth from old to young.", "sql": "SELECT name FROM people ORDER BY date_of_birth"}, {"query": "What are the names of all people, ordered by their date of birth?", "sql": "SELECT name FROM people ORDER BY date_of_birth"}, {"query": "Find the average height and weight for all males (sex is M).", "sql": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'"}, {"query": "What are the average height and weight across males (sex is M)?", "sql": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'"}, {"query": "find the names of people who are taller than 200 or lower than 190.", "sql": "SELECT name FROM people WHERE height  >  200 OR height  <  190"}, {"query": "What are the names of people who have a height greater than 200 or less than 190?", "sql": "SELECT name FROM people WHERE height  >  200 OR height  <  190"}, {"query": "Find the average and minimum weight for each gender.", "sql": "SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex"}, {"query": "What are the average and minimum weights for people of each sex?", "sql": "SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex"}, {"query": "Find the name and gender of the candidate who got the highest support rate.", "sql": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1"}, {"query": "What is the name and sex of the candidate with the highest support rate?", "sql": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1"}, {"query": "Find the name of the candidates whose oppose percentage is the lowest for each sex.", "sql": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex"}, {"query": "For each sex, what is the name and sex of the candidate with the oppose rate for their sex?", "sql": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex"}, {"query": "which gender got the highest average uncertain ratio.", "sql": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1"}, {"query": "What is the sex of the candidate who had the highest unsure rate?", "sql": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1"}, {"query": "what are the names of people who did not participate in the candidate election.", "sql": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)"}, {"query": "Give the names of people who did not participate in the candidate election.", "sql": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)"}, {"query": "Find the names of the candidates whose support percentage is lower than their oppose rate.", "sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate"}, {"query": "What are the names of candidates who have a lower support rate than oppose rate?", "sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate"}, {"query": "how many people are there whose weight is higher than 85 for each gender?", "sql": "SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex"}, {"query": "Count the number of people of each sex who have a weight higher than 85.", "sql": "SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex"}, {"query": "find the highest support percentage, lowest consider rate and oppose rate of all candidates.", "sql": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate"}, {"query": "Return the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates?", "sql": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate"}, {"query": "list all female (sex is F) candidate names in the alphabetical order.", "sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name"}, {"query": "What are the names of all female candidates in alphabetical order (sex is F)?", "sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name"}, {"query": "find the name of people whose height is lower than the average.", "sql": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)"}, {"query": "What are the names of people who are shorter than average?", "sql": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)"}, {"query": "List all info about all people.", "sql": "SELECT * FROM people"}, {"query": "What is all the information about all people?", "sql": "SELECT * FROM people"}, {"query": "Find the titles of all movies directed by steven spielberg.", "sql": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'"}, {"query": "What are the names of all movies directed by Steven Spielberg?", "sql": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'"}, {"query": "What is the name of the movie produced after 2000 and directed by James Cameron?", "sql": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000"}, {"query": "What are the titles of all movies that James Cameron directed after 2000?", "sql": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000"}, {"query": "How many movies were made before 2000?", "sql": "SELECT count(*) FROM Movie WHERE YEAR  <  2000"}, {"query": "How many movies were made before 2000?", "sql": "SELECT count(*) FROM Movie WHERE YEAR  <  2000"}, {"query": "Who is the director of movie Avatar?", "sql": "SELECT director FROM Movie WHERE title  = 'Avatar'"}, {"query": "Who directed Avatar?", "sql": "SELECT director FROM Movie WHERE title  = 'Avatar'"}, {"query": "How many reviewers listed?", "sql": "SELECT count(*) FROM Reviewer"}, {"query": "How many reviewers are there?", "sql": "SELECT count(*) FROM Reviewer"}, {"query": "What is the id of the reviewer whose name has substring \u201cMike\u201d?", "sql": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\""}, {"query": "What is the id of the reviewer whose name includes the word \"Mike\"?", "sql": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\""}, {"query": "What is the reviewer id of Daniel Lewis?", "sql": "SELECT rID FROM Reviewer WHERE name  =  \"Daniel Lewis\""}, {"query": "What is the id of the reviewer named Daniel Lewis?", "sql": "SELECT rID FROM Reviewer WHERE name  =  \"Daniel Lewis\""}, {"query": "What is the total number of ratings that has more than 3 stars?", "sql": "SELECT count(*) FROM Rating WHERE stars  >  3"}, {"query": "How many movie ratings have more than 3 stars?", "sql": "SELECT count(*) FROM Rating WHERE stars  >  3"}, {"query": "What is the lowest and highest rating star?", "sql": "SELECT max(stars) ,  min(stars) FROM Rating"}, {"query": "What is the maximum and mininum number of stars a rating can receive?", "sql": "SELECT max(stars) ,  min(stars) FROM Rating"}, {"query": "Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order of year.", "sql": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year"}, {"query": "In what years did a movie receive a 4 or 5 star rating, and list the years from oldest to most recently?", "sql": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year"}, {"query": "What are the names of directors who directed movies with 5 star rating? Also return the title of these movies.", "sql": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5"}, {"query": "What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?", "sql": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5"}, {"query": "What is the average rating star for each reviewer?", "sql": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name"}, {"query": "What is the average number of stars that each reviewer awards for a movie?", "sql": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name"}, {"query": "Find the titles of all movies that have no ratings.", "sql": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)"}, {"query": "What are the titles of all movies that have not been rated?", "sql": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)"}, {"query": "Find the names of all reviewers who have ratings with a NULL value for the date.", "sql": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\""}, {"query": "What are the different names of all reviewers whose ratings do not have a date field?", "sql": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\""}, {"query": "What is the average rating stars and title for the oldest movie?", "sql": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)"}, {"query": "For the oldest movie listed, what is its average rating and title?", "sql": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)"}, {"query": "What is the name of the most recent movie?", "sql": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)"}, {"query": "What is the title of the newest movie?", "sql": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)"}, {"query": "What is the maximum stars and year for the most recent movie?", "sql": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)"}, {"query": "What is highest rating for the most recent movie and when was it released?", "sql": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)"}, {"query": "What is the names of movies whose created year is after all movies directed by Steven Spielberg?", "sql": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \"Steven Spielberg\")"}, {"query": "What are the names of all movies that were created after the most recent Steven Spielberg film?", "sql": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \"Steven Spielberg\")"}, {"query": "What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?", "sql": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")"}, {"query": "What are the titles and directors of all movies that have a rating higher than the average James Cameron film rating?", "sql": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")"}, {"query": "Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars.", "sql": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars"}, {"query": "What is the reviewer name, film title, movie rating, and rating date  for every movie ordered by reviewer name, movie title, then finally rating?", "sql": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars"}, {"query": "Find the names of all reviewers who have contributed three or more ratings.", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3"}, {"query": "What are the names of all reviewers that have rated 3 or more movies?", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3"}, {"query": "Find the names of all reviewers who rated Gone with the Wind.", "sql": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'"}, {"query": "What are the names of all the different reviewers who rates Gone with the Wind?", "sql": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'"}, {"query": "Find the names of all directors whose movies are rated by Sarah Martinez.", "sql": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'"}, {"query": "What are the names of all directors whose movies have been reviewed by Sarah Martinez?", "sql": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'"}, {"query": "For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.", "sql": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name"}, {"query": "What are the different reviewer names, movie titles, and stars for every rating where the reviewer had the same name as the director?", "sql": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name"}, {"query": "Return all reviewer names and movie names together in a single list.", "sql": "SELECT name FROM Reviewer UNION SELECT title FROM Movie"}, {"query": "What are the names of all the reviewers and movie names?", "sql": "SELECT name FROM Reviewer UNION SELECT title FROM Movie"}, {"query": "Find the titles of all movies not reviewed by Chris Jackson.", "sql": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'"}, {"query": "What are the titles of all movies that were not reviewed by Chris Jackson?", "sql": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'"}, {"query": "For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title.", "sql": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title"}, {"query": "For all directors who have directed more than one movie, what movies have they directed and what are their names?", "sql": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title"}, {"query": "For directors who had more than one movie, return the titles and produced years of all movies directed by them.", "sql": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title"}, {"query": "For each director who directed more than one movie, what are the titles and dates of release for all those movies?", "sql": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title"}, {"query": "What are the names of the directors who made exactly one movie?", "sql": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1"}, {"query": "What are the names of all directors who made one movie?", "sql": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1"}, {"query": "What are the names of the directors who made exactly one movie excluding director NULL?", "sql": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1"}, {"query": "What are the names of all directors who have made one movie except for the director named NULL?", "sql": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1"}, {"query": "How many movie reviews does each director get?", "sql": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director"}, {"query": "For each director, how many reviews have they received?", "sql": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director"}, {"query": "Find the movies with the highest average rating. Return the movie titles and average rating.", "sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1"}, {"query": "What are the movie titles with the highest average rating and what are those ratings?", "sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1"}, {"query": "What are the movie titles and average rating of the movies with the lowest average rating?", "sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1"}, {"query": "What are the titles and average ratings for all movies that have the lowest average rating?", "sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1"}, {"query": "What are the names and years of the movies that has the top 3 highest rating star?", "sql": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3"}, {"query": "What are the names and years released for the movies with the top 3 highest ratings?", "sql": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3"}, {"query": "For each director, return the director's name together with the title of the movie they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.", "sql": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director"}, {"query": "For each director, what are the titles and ratings for all the movies they reviewed?", "sql": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director"}, {"query": "Find the title and star rating of the movie that got the least rating star for each reviewer.", "sql": "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID"}, {"query": "For each reviewer id, what is the title and rating for the movie with the smallest rating?", "sql": "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID"}, {"query": "Find the title and score of the movie with the lowest rating among all movies directed by each director.", "sql": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director"}, {"query": "For each director, what is the title and score of their most poorly rated movie?", "sql": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director"}, {"query": "What is the name of the movie that is rated by most of times?", "sql": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name of the movie that has been reviewed the most?", "sql": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the titles of all movies that have rating star is between 3 and 5?", "sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5"}, {"query": "What are the titles of all movies that have between 3 and 5 stars?", "sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5"}, {"query": "Find the names of reviewers who had given higher than 3 star ratings.", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3"}, {"query": "What are the names of the reviewers who have rated a movie more than 3 stars before?", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3"}, {"query": "Find the average rating star for each movie that are not reviewed by Brittany Harris.", "sql": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\") GROUP BY mID"}, {"query": "What is the average rating for each movie that has never been reviewed by Brittany Harris?", "sql": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\") GROUP BY mID"}, {"query": "What are the ids of the movies that are not reviewed by Brittany Harris.", "sql": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\""}, {"query": "What are the ids of all moviest hat have not been reviewed by Britanny Harris?", "sql": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\""}, {"query": "Find the average rating star for each movie that received at least 2 ratings.", "sql": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2"}, {"query": "For each movie that received more than 3 reviews, what is the average rating?", "sql": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2"}, {"query": "find the ids of reviewers who did not give 4 star.", "sql": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4"}, {"query": "What are the ids of all reviewers who did not give 4 stars?", "sql": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4"}, {"query": "Find the ids of reviewers who didn't only give 4 star.", "sql": "SELECT rID FROM Rating WHERE stars != 4"}, {"query": "What are the ids of all reviewers who have not given 4 stars at least once?", "sql": "SELECT rID FROM Rating WHERE stars != 4"}, {"query": "What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?", "sql": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000"}, {"query": "What are the names of all movies that were made after 2000 or reviewed by Brittany Harris?", "sql": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000"}, {"query": "What are names of the movies that are either made before 1980 or directed by James Cameron?", "sql": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980"}, {"query": "What are the names of all movies made before 1980 or had James Cameron as the director?", "sql": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980"}, {"query": "What are the names of reviewers who had rated 3 star and 4 star?", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4"}, {"query": "What are the names of all reviewers that have given 3 or 4 stars for reviews?", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4"}, {"query": "What are the names of movies that get 3 star and 4 star?", "sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4"}, {"query": "What are the names of all movies that received 3 or 4 stars?", "sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4"}, {"query": "How many counties are there?", "sql": "SELECT count(*) FROM county_public_safety"}, {"query": "Count the number of countries.", "sql": "SELECT count(*) FROM county_public_safety"}, {"query": "List the names of counties in descending order of population.", "sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC"}, {"query": "What are the names of the counties of public safety, ordered by population descending?", "sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC"}, {"query": "List the distinct police forces of counties whose location is not on east side.", "sql": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\""}, {"query": "What are the different police forces of counties that are not located in the East?", "sql": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\""}, {"query": "What are the minimum and maximum crime rate of counties?", "sql": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety"}, {"query": "Return the minimum and maximum crime rates across all counties.", "sql": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety"}, {"query": "Show the crime rates of counties in ascending order of number of police officers.", "sql": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC"}, {"query": "What are the crime rates of counties sorted by number of offices ascending?", "sql": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC"}, {"query": "What are the names of cities in ascending alphabetical order?", "sql": "SELECT Name FROM city ORDER BY Name ASC"}, {"query": "Return the names of cities, ordered alphabetically.", "sql": "SELECT Name FROM city ORDER BY Name ASC"}, {"query": "What are the percentage of hispanics in cities with the black percentage higher than 10?", "sql": "SELECT Hispanic FROM city WHERE Black  >  10"}, {"query": "Return the hispanic percentage for cities in which the black percentage is greater than 10.", "sql": "SELECT Hispanic FROM city WHERE Black  >  10"}, {"query": "List the name of the county with the largest population.", "sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1"}, {"query": "What is the name of the county with the greatest population?", "sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1"}, {"query": "List the names of the city with the top 5 white percentages.", "sql": "SELECT Name FROM city ORDER BY White DESC LIMIT 5"}, {"query": "What are the names of the five cities with the greatest proportion of white people?", "sql": "SELECT Name FROM city ORDER BY White DESC LIMIT 5"}, {"query": "Show names of cities and names of counties they are in.", "sql": "SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID"}, {"query": "What are the names of cities, as well as the names of the counties they correspond to?", "sql": "SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID"}, {"query": "Show white percentages of cities and the crime rates of counties they are in.", "sql": "SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID"}, {"query": "What are the white percentages of cities, and the corresponding crime rates of the counties they correspond to?", "sql": "SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID"}, {"query": "Show the name of cities in the county that has the largest number of police officers.", "sql": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)"}, {"query": "What are the names of cities that are in the county with the most police officers?", "sql": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)"}, {"query": "Show the number of cities in counties that have a population more than 20000.", "sql": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)"}, {"query": "How many cities are in counties that have populations of over 20000?", "sql": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)"}, {"query": "Show the crime rate of counties with a city having white percentage more than 90.", "sql": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90"}, {"query": "What are the crime rates of counties that contain cities that have white percentages of over 90?", "sql": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90"}, {"query": "Please show the police forces and the number of counties with each police force.", "sql": "SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force"}, {"query": "How many counties correspond to each police force?", "sql": "SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force"}, {"query": "What is the location shared by most counties?", "sql": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Which location has the most corresponding counties?", "sql": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "List the names of counties that do not have any cities.", "sql": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)"}, {"query": "What are the names of counties that do not contain any cities?", "sql": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)"}, {"query": "Show the police force shared by counties with location on the east and west.", "sql": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\""}, {"query": "Which police forces operate in both counties that are located in the East and in the West?", "sql": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\""}, {"query": "Show the names of cities in counties that have a crime rate less than 100.", "sql": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)"}, {"query": "What are the names of cities that are in counties that have a crime rate below 100?", "sql": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)"}, {"query": "Show the case burden of counties in descending order of population.", "sql": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC"}, {"query": "What are the case burdens of counties, ordered descending by population?", "sql": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC"}, {"query": "Find the names of all modern rooms with a base price below $160 and two beds.", "sql": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';"}, {"query": "What are the names of modern rooms that have a base price lower than $160 and two beds.", "sql": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';"}, {"query": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.", "sql": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;"}, {"query": "What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.", "sql": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;"}, {"query": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.", "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;"}, {"query": "Which room has the largest number of reservations?", "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;"}, {"query": "How many kids stay in the rooms reserved by ROY SWEAZY?", "sql": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";"}, {"query": "Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ.", "sql": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";"}, {"query": "How many times does ROY SWEAZY has reserved a room.", "sql": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";"}, {"query": "Find the number of times ROY SWEAZY has reserved a room.", "sql": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";"}, {"query": "Which room has the highest rate? List the room's full name, rate, check in and check out date.", "sql": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;"}, {"query": "Return the name, rate, check in and check out date for the room with the highest rate.", "sql": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;"}, {"query": "How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?", "sql": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\";"}, {"query": "Find the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23, 2010.", "sql": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\";"}, {"query": "How many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21, 2010?", "sql": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";"}, {"query": "Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010.", "sql": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";"}, {"query": "How many king beds are there?", "sql": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';"}, {"query": "Find the total number of king beds available.", "sql": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';"}, {"query": "List the names and decor of rooms that have a king bed. Sort the list by their price.", "sql": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;"}, {"query": "What are the names and decor of rooms with a king bed? Sort them by their price", "sql": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;"}, {"query": "Which room has cheapest base price? List the room's name and the base price.", "sql": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;"}, {"query": "What are the room name and base price of the room with the lowest base price?", "sql": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;"}, {"query": "What is the decor of room Recluse and defiance?", "sql": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";"}, {"query": "Return the decor of the room named \"Recluse and defiance\".", "sql": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";"}, {"query": "What is the average base price of different bed type? List bed type and average base price.", "sql": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;"}, {"query": "For each bed type, find the average base price of different bed type.", "sql": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;"}, {"query": "What is the total number of people who could stay in the modern rooms in this inn?", "sql": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';"}, {"query": "How many people in total can stay in the modern rooms of this inn?", "sql": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';"}, {"query": "What kind of decor has the least number of reservations?", "sql": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;"}, {"query": "What is the least popular kind of decor?", "sql": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;"}, {"query": "List how many times the number of people in the room reached the maximum occupancy of the room. The number of people include adults and kids.", "sql": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;"}, {"query": "How many times the number of adults and kids staying in a room reached the maximum capacity of the room?", "sql": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;"}, {"query": "Find the first and last names of people who payed more than the rooms' base prices.", "sql": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0"}, {"query": "What are the first and last names of people who payed more than the rooms' base prices?", "sql": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0"}, {"query": "How many rooms are there?", "sql": "SELECT count(*) FROM Rooms;"}, {"query": "What is the total number of rooms available in this inn?", "sql": "SELECT count(*) FROM Rooms;"}, {"query": "Find the number of rooms with a king bed.", "sql": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";"}, {"query": "How many rooms have a king bed?", "sql": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";"}, {"query": "Find the number of rooms for each bed type.", "sql": "SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;"}, {"query": "What are the number of rooms for each bed type?", "sql": "SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;"}, {"query": "Find the name of the room with the maximum occupancy.", "sql": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;"}, {"query": "What is the name of the room that can accommodate the most people?", "sql": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;"}, {"query": "Find the id and name of the most expensive base price room.", "sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;"}, {"query": "Which room has the highest base price?", "sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;"}, {"query": "List the type of bed and name of all traditional rooms.", "sql": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";"}, {"query": "What are the bed type and name of all the rooms with traditional decor?", "sql": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";"}, {"query": "Find the number of rooms with king bed for each decor type.", "sql": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;"}, {"query": "How many rooms have king beds? Report the number for each decor type.", "sql": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;"}, {"query": "Find the average and minimum price of the rooms in different decor.", "sql": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;"}, {"query": "What is the average minimum and price of the rooms for each different decor.", "sql": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;"}, {"query": "List the name of all rooms sorted by their prices.", "sql": "SELECT roomName FROM Rooms ORDER BY basePrice;"}, {"query": "Sort all the rooms according to the price. Just report the room names.", "sql": "SELECT roomName FROM Rooms ORDER BY basePrice;"}, {"query": "Find the number of rooms with price higher than 120 for different decor.", "sql": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;"}, {"query": "How many rooms cost more than 120, for each different decor?", "sql": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;"}, {"query": "For each bed type, find the average room price.", "sql": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;"}, {"query": "What is the average base price of rooms, for each bed type?", "sql": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;"}, {"query": "List the name of rooms with king or queen bed.", "sql": "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";"}, {"query": "What are the names of rooms that have either king or queen bed?", "sql": "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";"}, {"query": "How many different types of beds are there?", "sql": "SELECT count(DISTINCT bedType) FROM Rooms;"}, {"query": "Find the number of distinct bed types available in this inn.", "sql": "SELECT count(DISTINCT bedType) FROM Rooms;"}, {"query": "Find the name and id of the top 3 expensive rooms.", "sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;"}, {"query": "What are the name and id of the three highest priced rooms?", "sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;"}, {"query": "Find the name of rooms whose price is higher than the average price.", "sql": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );"}, {"query": "What are the name of rooms that cost more than the average.", "sql": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );"}, {"query": "Find the number of rooms that do not have any reservation.", "sql": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)"}, {"query": "How many rooms have not had any reservation yet?", "sql": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)"}, {"query": "Return the name and number of reservations made for each of the rooms.", "sql": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room"}, {"query": "For each room, find its name and the number of times reservations were made for it.", "sql": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room"}, {"query": "Find the names of rooms that have been reserved for more than 60 times.", "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60"}, {"query": "What are the names of rooms whose reservation frequency exceeds 60 times?", "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60"}, {"query": "Find the name of rooms whose base price is between 120 and 150.", "sql": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150"}, {"query": "Which rooms cost between 120 and 150? Give me the room names.", "sql": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150"}, {"query": "Find the name of rooms booked by some customers whose first name contains ROY.", "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'"}, {"query": "What are the name of rooms booked by customers whose first name has \"ROY\" in part?", "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'"}, {"query": "what are the details of the cmi masters that have the cross reference code 'Tax'?", "sql": "SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T2.source_system_code  =  'Tax'"}, {"query": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.", "sql": "SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1"}, {"query": "How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n", "sql": "SELECT T2.cmi_cross_ref_id ,  T2.master_customer_id ,  count(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id"}, {"query": "What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.", "sql": "SELECT T1.source_system_code ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id ORDER BY T2.council_tax_id"}, {"query": "Wat is the tax source system code and master customer id of the taxes related to each parking fine id?", "sql": "SELECT T1.source_system_code ,  T1.master_customer_id ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id"}, {"query": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?", "sql": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'"}, {"query": "What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?", "sql": "SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id WHERE T2.source_system_code  =  'Electoral' OR T2.source_system_code  =  'Tax'"}, {"query": "How many different source system code for the cmi cross references are there?", "sql": "SELECT count(DISTINCT source_system_code) FROM CMI_cross_references"}, {"query": "List all information about customer master index, and sort them by details in descending order.", "sql": "SELECT * FROM customer_master_index ORDER BY cmi_details DESC"}, {"query": "List the council tax ids and their related cmi cross references of all the parking fines.", "sql": "SELECT council_tax_id ,  cmi_cross_ref_id FROM parking_fines"}, {"query": "How many council taxes are collected for renting arrears ?", "sql": "SELECT count(*) FROM rent_arrears"}, {"query": "What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?", "sql": "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb ,  Becker and Wyman'"}, {"query": "Which cmi cross reference id is not related to any parking taxes?", "sql": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines"}, {"query": "Which distinct source system code includes the substring 'en'?", "sql": "SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'"}, {"query": "How many parties are there?", "sql": "SELECT count(*) FROM party"}, {"query": "Count the number of parties.", "sql": "SELECT count(*) FROM party"}, {"query": "List the themes of parties in ascending order of number of hosts.", "sql": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC"}, {"query": "What are the themes of parties ordered by the number of hosts in ascending manner?", "sql": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC"}, {"query": "What are the themes and locations of parties?", "sql": "SELECT Party_Theme ,  LOCATION FROM party"}, {"query": "Give me the theme and location of each party.", "sql": "SELECT Party_Theme ,  LOCATION FROM party"}, {"query": "Show the first year and last year of parties with theme \"Spring\" or \"Teqnology\".", "sql": "SELECT First_year ,  Last_year FROM party WHERE Party_Theme  =  \"Spring\" OR Party_Theme  =  \"Teqnology\""}, {"query": "What are the first year and last year of the parties whose theme is \"Spring\" or \"Teqnology\"?", "sql": "SELECT First_year ,  Last_year FROM party WHERE Party_Theme  =  \"Spring\" OR Party_Theme  =  \"Teqnology\""}, {"query": "What is the average number of hosts for parties?", "sql": "SELECT avg(Number_of_hosts) FROM party"}, {"query": "Compute the average number of hosts for parties.", "sql": "SELECT avg(Number_of_hosts) FROM party"}, {"query": "What is the location of the party with the most hosts?", "sql": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1"}, {"query": "Which party had the most hosts? Give me the party location.", "sql": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1"}, {"query": "Show different nationalities along with the number of hosts of each nationality.", "sql": "SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality"}, {"query": "How many hosts does each nationality have? List the nationality and the count.", "sql": "SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality"}, {"query": "Show the most common nationality of hosts.", "sql": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Which nationality has the most hosts?", "sql": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Show the nations that have both hosts older than 45 and hosts younger than 35.", "sql": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35"}, {"query": "Which nations have both hosts of age above 45 and hosts of age below 35?", "sql": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35"}, {"query": "Show the themes of parties and the names of the party hosts.", "sql": "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID"}, {"query": "For each party, return its theme and the name of its host.", "sql": "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID"}, {"query": "Show the locations of parties and the names of the party hosts in ascending order of the age of the host.", "sql": "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age"}, {"query": "For each party, find its location and the name of its host. Sort the result in ascending order of the age of the host.", "sql": "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age"}, {"query": "Show the locations of parties with hosts older than 50.", "sql": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50"}, {"query": "Which parties have hosts of age above 50? Give me the party locations.", "sql": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50"}, {"query": "Show the host names for parties with number of hosts greater than 20.", "sql": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20"}, {"query": "Which parties have more than 20 hosts? Give me the host names for these parties.", "sql": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20"}, {"query": "Show the name and the nationality of the oldest host.", "sql": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1"}, {"query": "What are the name and the nationality of the host of the highest age?", "sql": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1"}, {"query": "List the names of hosts who did not serve as a host of any party in our record.", "sql": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)"}, {"query": "What are the names of hosts who did not host any party in our record?", "sql": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)"}, {"query": "How many regions do we have?", "sql": "SELECT count(*) FROM region"}, {"query": "Count the number of regions.", "sql": "SELECT count(*) FROM region"}, {"query": "Show all region code and region name sorted by the codes.", "sql": "SELECT region_code ,  region_name FROM region ORDER BY region_code"}, {"query": "What are the codes and names for all regions, sorted by codes?", "sql": "SELECT region_code ,  region_name FROM region ORDER BY region_code"}, {"query": "List all region names in alphabetical order.", "sql": "SELECT region_name FROM region ORDER BY region_name"}, {"query": "What are the names of the regions in alphabetical order?", "sql": "SELECT region_name FROM region ORDER BY region_name"}, {"query": "Show names for all regions except for Denmark.", "sql": "SELECT region_name FROM region WHERE region_name != 'Denmark'"}, {"query": "Return the names of all regions other than Denmark.", "sql": "SELECT region_name FROM region WHERE region_name != 'Denmark'"}, {"query": "How many storms had death records?", "sql": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0"}, {"query": "Count the number of storms in which at least 1 person died.", "sql": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0"}, {"query": "List name, dates active, and number of deaths for all storms with at least 1 death.", "sql": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1"}, {"query": "What are the names, dates active, and number of deaths for storms that had 1 or more death?", "sql": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1"}, {"query": "Show the average and maximum damage for all storms with max speed higher than 1000.", "sql": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000"}, {"query": "What is the average and maximum damage in millions for storms that had a max speed over 1000?", "sql": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000"}, {"query": "What is the total number of deaths and damage for all storms with a max speed greater than the average?", "sql": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)"}, {"query": "Return the total number of deaths and total damange in millions for storms that had a max speed greater than the average.", "sql": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)"}, {"query": "List name and damage for all storms in a descending order of max speed.", "sql": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC"}, {"query": "What are the names and damage in millions for storms, ordered by their max speeds descending?", "sql": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC"}, {"query": "How many regions are affected?", "sql": "SELECT count(DISTINCT region_id) FROM affected_region"}, {"query": "Count the number of different affected regions.", "sql": "SELECT count(DISTINCT region_id) FROM affected_region"}, {"query": "Show the name for regions not affected.", "sql": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)"}, {"query": "What are the names of regions that were not affected?", "sql": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)"}, {"query": "Show the name for regions and the number of storms for each region.", "sql": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id"}, {"query": "How many storms occured in each region?", "sql": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id"}, {"query": "List the name for storms and the number of affected regions for each storm.", "sql": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id"}, {"query": "How many regions were affected by each storm?", "sql": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id"}, {"query": "What is the storm name and max speed which affected the greatest number of regions?", "sql": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the name and max speed of the storm that affected the most regions.", "sql": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show the name of storms which don't have affected region in record.", "sql": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)"}, {"query": "What are the names of storms that did not affect any regions?", "sql": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)"}, {"query": "Show storm name with at least two regions and 10 cities affected.", "sql": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10"}, {"query": "What are the names of storms that both affected two or more regions and affected a total of 10 or more cities?", "sql": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10"}, {"query": "Show all storm names except for those with at least two affected regions.", "sql": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2"}, {"query": "What are the names of storms that did not affect two or more regions?", "sql": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2"}, {"query": "What are the region names affected by the storm with a number of deaths of least 10?", "sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10"}, {"query": "Return the names of the regions affected by storms that had a death count of at least 10.", "sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10"}, {"query": "Show all storm names affecting region \"Denmark\".", "sql": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'"}, {"query": "What are the names of the storms that affected Denmark?", "sql": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'"}, {"query": "Show the region name with at least two storms.", "sql": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2"}, {"query": "What are the names of regions with two or more storms?", "sql": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2"}, {"query": "Find the names of the regions which were affected by the storm that killed the greatest number of people.", "sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1"}, {"query": "What are the names of regions that were affected by the storm in which the most people died?", "sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1"}, {"query": "Find the name of the storm that affected both Afghanistan and Albania regions.", "sql": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'"}, {"query": "What are the names of the storms that affected both the regions of Afghanistan and Albania?", "sql": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'"}, {"query": "How many counties are there in total?", "sql": "SELECT count(*) FROM county"}, {"query": "Count the total number of counties.", "sql": "SELECT count(*) FROM county"}, {"query": "Show the county name and population of all counties.", "sql": "SELECT County_name ,  Population FROM county"}, {"query": "What are the name and population of each county?", "sql": "SELECT County_name ,  Population FROM county"}, {"query": "Show the average population of all counties.", "sql": "SELECT avg(Population) FROM county"}, {"query": "On average how large is the population of the counties?", "sql": "SELECT avg(Population) FROM county"}, {"query": "Return the maximum and minimum population among all counties.", "sql": "SELECT max(Population) ,  min(Population) FROM county"}, {"query": "What are the maximum and minimum population of the counties?", "sql": "SELECT max(Population) ,  min(Population) FROM county"}, {"query": "Show all the distinct districts for elections.", "sql": "SELECT DISTINCT District FROM election"}, {"query": "What are the distinct districts for elections?", "sql": "SELECT DISTINCT District FROM election"}, {"query": "Show the zip code of the county with name \"Howard\".", "sql": "SELECT Zip_code FROM county WHERE County_name  =  \"Howard\""}, {"query": "What is the zip code the county named \"Howard\" is located in?", "sql": "SELECT Zip_code FROM county WHERE County_name  =  \"Howard\""}, {"query": "Show the delegate from district 1 in election.", "sql": "SELECT Delegate FROM election WHERE District  =  1"}, {"query": "Who is the delegate of district 1 in the elections?", "sql": "SELECT Delegate FROM election WHERE District  =  1"}, {"query": "Show the delegate and committee information of elections.", "sql": "SELECT Delegate ,  Committee FROM election"}, {"query": "What are the delegate and committee information for each election record?", "sql": "SELECT Delegate ,  Committee FROM election"}, {"query": "How many distinct governors are there?", "sql": "SELECT count(DISTINCT Governor) FROM party"}, {"query": "Count the number of distinct governors.", "sql": "SELECT count(DISTINCT Governor) FROM party"}, {"query": "Show the lieutenant governor and comptroller from the democratic party.", "sql": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\""}, {"query": "Who are the lieutenant governor and comptroller from the democratic party?", "sql": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\""}, {"query": "In which distinct years was the governor \"Eliot Spitzer\"?", "sql": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\""}, {"query": "Find the distinct years when the governor was named \"Eliot Spitzer\".", "sql": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\""}, {"query": "Show all the information about election.", "sql": "SELECT * FROM election"}, {"query": "Return all the information for each election record.", "sql": "SELECT * FROM election"}, {"query": "Show the delegates and the names of county they belong to.", "sql": "SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District"}, {"query": "What are the delegate and name of the county they belong to, for each county?", "sql": "SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District"}, {"query": "Which delegates are from counties with population smaller than 100000?", "sql": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000"}, {"query": "Find the delegates who are from counties with population below 100000.", "sql": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000"}, {"query": "How many distinct delegates are from counties with population larger than 50000?", "sql": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000"}, {"query": "Count the number of distinct delegates who are from counties with population above 50000.", "sql": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000"}, {"query": "What are the names of the county that the delegates on \"Appropriations\" committee belong to?", "sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  \"Appropriations\""}, {"query": "Which county do the delegates on \"Appropriations\" committee belong to? Give me the county names.", "sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  \"Appropriations\""}, {"query": "Show the delegates and the names of the party they belong to.", "sql": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID"}, {"query": "For each delegate, find the names of the party they are part of.", "sql": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID"}, {"query": "Who were the governors of the parties associated with delegates from district 1?", "sql": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1"}, {"query": "Find the parties associated with the delegates from district 1. Who served as governors of the parties?", "sql": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1"}, {"query": "Who were the comptrollers of the parties associated with the delegates from district 1 or district 2?", "sql": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2"}, {"query": "Find the parties associated with the delegates from district 1 or 2. Who served as comptrollers of the parties?", "sql": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2"}, {"query": "Return all the committees that have delegates from Democratic party.", "sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\""}, {"query": "Which committees have delegates from the Democratic party?", "sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\""}, {"query": "Show the name of each county along with the corresponding number of delegates from that county.", "sql": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id"}, {"query": "For each county, find the name of the county and the number of delegates from that county.", "sql": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id"}, {"query": "Show the name of each party and the corresponding number of delegates from that party.", "sql": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party"}, {"query": "For each party, return the name of the party and the number of delegates from that party.", "sql": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party"}, {"query": "Return the names of all counties sorted by population in ascending order.", "sql": "SELECT County_name FROM county ORDER BY Population ASC"}, {"query": "Sort the names of all counties in ascending order of population.", "sql": "SELECT County_name FROM county ORDER BY Population ASC"}, {"query": "Return the names of all counties sorted by county name in descending alphabetical order.", "sql": "SELECT County_name FROM county ORDER BY County_name DESC"}, {"query": "Sort the names of all counties in descending alphabetical order.", "sql": "SELECT County_name FROM county ORDER BY County_name DESC"}, {"query": "Show the name of the county with the biggest population.", "sql": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1"}, {"query": "Which county has the largest population? Give me the name of the county.", "sql": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1"}, {"query": "Show the 3 counties with the smallest population.", "sql": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3"}, {"query": "What are the 3 counties that have the smallest population? Give me the county names.", "sql": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3"}, {"query": "Show the names of counties that have at least two delegates.", "sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2"}, {"query": "Which counties have two or more delegates? Give me the county names.", "sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2"}, {"query": "Show the name of the party that has at least two records.", "sql": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2"}, {"query": "Which party has two or more records?", "sql": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2"}, {"query": "Show the name of the party that has the most delegates.", "sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Which party has the largest number of delegates?", "sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Show the people that have been governor the most times.", "sql": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Which people severed as governor most frequently?", "sql": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Show the people that have been comptroller the most times and the corresponding number of times.", "sql": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Which people severed as comptroller most frequently? Give me the name of the person and the frequency count.", "sql": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What are the names of parties that do not have delegates in election?", "sql": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)"}, {"query": "Which parties did not have any delegates in elections?", "sql": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)"}, {"query": "What are the names of parties that have both delegates on \"Appropriations\" committee and", "sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\""}, {"query": "Which parties have delegates in both the \"Appropriations\" committee and the \"Economic Matters\" committee?", "sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\""}, {"query": "Which committees have delegates from both democratic party and liberal party?", "sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\""}, {"query": "Find the committees that have delegates both from from the democratic party and the liberal party.", "sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\""}, {"query": "How many journalists are there?", "sql": "SELECT count(*) FROM journalist"}, {"query": "List the names of journalists in ascending order of years working.", "sql": "SELECT Name FROM journalist ORDER BY Years_working ASC"}, {"query": "What are the nationalities and ages of journalists?", "sql": "SELECT Nationality ,  Age FROM journalist"}, {"query": "Show the names of journalists from \"England\" or \"Wales\".", "sql": "SELECT Name FROM journalist WHERE Nationality  =  \"England\" OR Nationality  =  \"Wales\""}, {"query": "What is the average number of years spent working as a journalist?", "sql": "SELECT avg(Years_working) FROM journalist"}, {"query": "What is the nationality of the journalist with the largest number of years working?", "sql": "SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1"}, {"query": "Show the different nationalities and the number of journalists of each nationality.", "sql": "SELECT Nationality ,  COUNT(*) FROM journalist GROUP BY Nationality"}, {"query": "Show the most common nationality for journalists.", "sql": "SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.", "sql": "SELECT Nationality FROM journalist WHERE Years_working  >  10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working  <  3"}, {"query": "Show the dates, places, and names of events in descending order of the attendance.", "sql": "SELECT Date ,  Name ,  venue FROM event ORDER BY Event_Attendance DESC"}, {"query": "Show the names of journalists and the dates of the events they reported.", "sql": "SELECT T3.Name ,  T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID"}, {"query": "Show the names of journalists and the names of the events they reported in ascending order", "sql": "SELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID ORDER BY T2.Event_Attendance ASC"}, {"query": "Show the names of journalists and the number of events they reported.", "sql": "SELECT T3.Name ,  COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name"}, {"query": "Show the names of journalists that have reported more than one event.", "sql": "SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1"}, {"query": "List the names of journalists who have not reported any event.", "sql": "SELECT Name FROM journalist WHERE journalist_ID NOT IN (SELECT journalist_ID FROM news_report)"}, {"query": "what are the average and maximum attendances of all events?", "sql": "SELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event"}, {"query": "Find the average age and experience working length of journalists working on different role type.", "sql": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type"}, {"query": "List the event venues and names that have the top 2 most number of people attended.", "sql": "SELECT venue ,  name FROM event ORDER BY Event_Attendance DESC LIMIT 2"}, {"query": "Show me all the restaurants.", "sql": "SELECT ResName FROM Restaurant;"}, {"query": "What is the address of the restaurant Subway?", "sql": "SELECT Address FROM Restaurant WHERE ResName = \"Subway\";"}, {"query": "What is the rating of the restaurant Subway?", "sql": "SELECT Rating FROM Restaurant WHERE ResName = \"Subway\";"}, {"query": "List all restaurant types.", "sql": "SELECT ResTypeName FROM Restaurant_Type;"}, {"query": "What is the description of the restaurant type Sandwich?", "sql": "SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = \"Sandwich\";"}, {"query": "Which restaurants have highest rating? List the restaurant name and its rating.", "sql": "SELECT ResName , Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1;"}, {"query": "What is the age of student Linda Smith?", "sql": "SELECT Age FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";"}, {"query": "What is the gender of the student Linda Smith?", "sql": "SELECT Sex FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";"}, {"query": "List all students' first names and last names who majored in 600.", "sql": "SELECT Fname , Lname FROM Student WHERE Major  =  600;"}, {"query": "Which city does student Linda Smith live in?", "sql": "SELECT city_code FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";"}, {"query": "Advisor 1121 has how many students?", "sql": "SELECT count(*) FROM Student WHERE Advisor =  1121;"}, {"query": "Which Advisor has most of students? List advisor and the number of students.", "sql": "SELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1;"}, {"query": "Which major has least number of students? List the major and the number of students.", "sql": "SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;"}, {"query": "Which major has between 2 and 30 number of students? List major and the number of students.", "sql": "SELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30;"}, {"query": "Which student's age is older than 18 and is majoring in 600? List each student's first and last name.", "sql": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major = 600;"}, {"query": "List all female students age is older than 18 who is not majoring in 600. List students' first name and last name.", "sql": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major != 600 AND Sex = 'F';"}, {"query": "How many restaurant is the Sandwich type restaurant?", "sql": "SELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID =  Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'"}, {"query": "How long does student Linda Smith spend on the restaurant in total?", "sql": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";"}, {"query": "How many times has the student Linda Smith visited Subway?", "sql": "SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";"}, {"query": "When did Linda Smith visit Subway?", "sql": "SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";"}, {"query": "At which restaurant did the students spend the least amount of time? List restaurant and the time students spent on in total.", "sql": "SELECT Restaurant.ResName ,  sum(Visits_Restaurant.Spent) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY sum(Visits_Restaurant.Spent) ASC LIMIT 1;"}, {"query": "Which student visited restaurant most often? List student's first name and last name.", "sql": "SELECT Student.Fname , Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY count(*) DESC LIMIT 1;"}, {"query": "Find the ids of orders whose status is 'Success'.", "sql": "SELECT actual_order_id FROM actual_orders WHERE order_status_code  =  'Success'"}, {"query": "Find the name and price of the product that has been ordered the greatest number of times.", "sql": "SELECT t1.product_name ,   t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the number of customers in total.", "sql": "SELECT count(*) FROM customers"}, {"query": "How many different payment methods are there?", "sql": "SELECT count(DISTINCT payment_method) FROM customers"}, {"query": "Show the details of all trucks in the order of their license number.", "sql": "SELECT truck_details FROM trucks ORDER BY truck_licence_number"}, {"query": "Find the name of the most expensive product.", "sql": "SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1"}, {"query": "Find the names of customers who are not living in the state of California.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'"}, {"query": "List the names and emails of customers who payed by Visa card.", "sql": "SELECT customer_email ,  customer_name FROM customers WHERE payment_method  =  'Visa'"}, {"query": "Find the names and phone numbers of customers living in California state.", "sql": "SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'"}, {"query": "Find the states which do not have any employee in their record.", "sql": "SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)"}, {"query": "List the names, phone numbers, and emails of all customers sorted by their dates of becoming customers.", "sql": "SELECT customer_name ,  customer_phone ,  customer_email FROM Customers ORDER BY date_became_customer"}, {"query": "Find the name of the first 5 customers.", "sql": "SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5"}, {"query": "Find the payment method that is used most frequently.", "sql": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1"}, {"query": "List the names of all routes in alphabetic order.", "sql": "SELECT route_name FROM Delivery_Routes ORDER BY route_name"}, {"query": "Find the name of route that has the highest number of deliveries.", "sql": "SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "List the state names and the number of customers living in each state.", "sql": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county"}, {"query": "How many authors are there?", "sql": "SELECT count(*) FROM authors"}, {"query": "Count the number of authors.", "sql": "SELECT count(*) FROM authors"}, {"query": "How many institutions are there?", "sql": "SELECT count(*) FROM inst"}, {"query": "Count the number of institutions.", "sql": "SELECT count(*) FROM inst"}, {"query": "How many papers are published in total?", "sql": "SELECT count(*) FROM papers"}, {"query": "Count the number of total papers.", "sql": "SELECT count(*) FROM papers"}, {"query": "What are the titles of papers published by \"Jeremy Gibbons\"?", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\""}, {"query": "Find the titles of all the papers written by \"Jeremy Gibbons\"", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\""}, {"query": "Find all the papers published by \"Aaron Turon\".", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\""}, {"query": "Find the titles of all the papers written by \"Aaron Turon\".", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\""}, {"query": "How many papers have \"Atsushi Ohori\" published?", "sql": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\""}, {"query": "How many papers are \"Atsushi Ohori\" the author of?", "sql": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\""}, {"query": "What is the name of the institution that \"Matthias Blume\" belongs to?", "sql": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\""}, {"query": "Which institution is the author \"Matthias Blume\" belong to? Give me the name of the institution.", "sql": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\""}, {"query": "Which institution does \"Katsuhiro Ueno\" belong to?", "sql": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\""}, {"query": "What is the name of the institution the author \"Katsuhiro Ueno\" belongs to?", "sql": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\""}, {"query": "Who belong to the institution \"University of Oxford\"? Show the first names and last names.", "sql": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\""}, {"query": "Find the first names and last names of the authors whose institution affiliation is \"University of Oxford\".", "sql": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\""}, {"query": "Which authors belong to the institution \"Google\"? Show the first names and last names.", "sql": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\""}, {"query": "Find the first names and last names of the authors whose institution affiliation is \"Google\".", "sql": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\""}, {"query": "What are the last names of the author of the paper titled \"Binders Unbound\"?", "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\""}, {"query": "Who is the author of the paper titled \"Binders Unbound\"? Give me the last name.", "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\""}, {"query": "Find the first and last name of the author(s) who wrote the paper \"Nameless, Painless\".", "sql": "SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\""}, {"query": "What are the first and last name of the author who published the paper titled \"Nameless, Painless\"?", "sql": "SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\""}, {"query": "What are the papers published under the institution \"Indiana University\"?", "sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\""}, {"query": "List the titles of the papers whose authors are from the institution \"Indiana University\".", "sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\""}, {"query": "Find all the papers published by the institution \"Google\".", "sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\""}, {"query": "Which papers were written by authors from the institution \"Google\"?", "sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\""}, {"query": "How many papers are published by the institution \"Tokohu University\"?", "sql": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\""}, {"query": "Find the number of papers published by authors from the institution \"Tokohu University\".", "sql": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\""}, {"query": "Find the number of papers published by the institution \"University of Pennsylvania\".", "sql": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\""}, {"query": "How many papers are written by authors from the institution \"University of Pennsylvania\"?", "sql": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\""}, {"query": "Find the papers which have \"Olin Shivers\" as an author.", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\""}, {"query": "Which papers did the author \"Olin Shivers\" write? Give me the paper titles.", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\""}, {"query": "Which papers have \"Stephanie Weirich\" as an author?", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\""}, {"query": "Find the titles of the papers the author \"Stephanie Weirich\" wrote.", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\""}, {"query": "Which paper is published in an institution in \"USA\" and have \"Turon\" as its second author?", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\""}, {"query": "Find papers whose second author has last name \"Turon\" and is affiliated with an institution in the country \"USA\".", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\""}, {"query": "Find the titles of papers whose first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"?", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\""}, {"query": "Which papers' first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"? Give me the titles of the papers.", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\""}, {"query": "What is the last name of the author that has published the most papers?", "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which author has written the most papers? Find his or her last name.", "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1"}, {"query": "Retrieve the country that has published the most papers.", "sql": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the country that the most papers are affiliated with.", "sql": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the name of the organization that has published the largest number of papers.", "sql": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which institution has the most papers? Find the name of the institution.", "sql": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the titles of the papers that contain the word \"ML\".", "sql": "SELECT title FROM papers WHERE title LIKE \"%ML%\""}, {"query": "Which papers have the substring \"ML\" in their titles? Return the titles of the papers.", "sql": "SELECT title FROM papers WHERE title LIKE \"%ML%\""}, {"query": "Which paper's title contains the word \"Database\"?", "sql": "SELECT title FROM papers WHERE title LIKE \"%Database%\""}, {"query": "Which papers have the substring \"Database\" in their titles? Show the titles of the papers.", "sql": "SELECT title FROM papers WHERE title LIKE \"%Database%\""}, {"query": "Find the first names of all the authors who have written a paper with title containing the word \"Functional\".", "sql": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\""}, {"query": "Who has written a paper that has the word \"Functional\" in its title? Return the first names of the authors.", "sql": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\""}, {"query": "Find the last names of all the authors that have written a paper with title containing the word \"Monadic\".", "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\""}, {"query": "Which authors have written a paper with title containing the word \"Monadic\"? Return their last names.", "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\""}, {"query": "Retrieve the title of the paper that has the largest number of authors.", "sql": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)"}, {"query": "Which paper has the most authors? Give me the paper title.", "sql": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)"}, {"query": "What is the first name of the author with last name \"Ueno\"?", "sql": "SELECT fname FROM authors WHERE lname  =  \"Ueno\""}, {"query": "Which authors have last name \"Ueno\"? List their first names.", "sql": "SELECT fname FROM authors WHERE lname  =  \"Ueno\""}, {"query": "Find the last name of the author with first name \"Amal\".", "sql": "SELECT lname FROM authors WHERE fname  =  \"Amal\""}, {"query": "Which authors have first name \"Amal\"? List their last names.", "sql": "SELECT lname FROM authors WHERE fname  =  \"Amal\""}, {"query": "Find the first names of all the authors ordered in alphabetical order.", "sql": "SELECT fname FROM authors ORDER BY fname"}, {"query": "Sort the first names of all the authors in alphabetical order.", "sql": "SELECT fname FROM authors ORDER BY fname"}, {"query": "Retrieve all the last names of authors in alphabetical order.", "sql": "SELECT lname FROM authors ORDER BY lname"}, {"query": "Give me a list of all the last names of authors sorted in alphabetical order", "sql": "SELECT lname FROM authors ORDER BY lname"}, {"query": "Retrieve all the first and last names of authors in the alphabetical order of last names.", "sql": "SELECT fname ,  lname FROM authors ORDER BY lname"}, {"query": "Sort the list of all the first and last names of authors in alphabetical order of the last names.", "sql": "SELECT fname ,  lname FROM authors ORDER BY lname"}, {"query": "How many different last names do the actors and actresses have?", "sql": "SELECT count(DISTINCT last_name) FROM actor"}, {"query": "Count the number of different last names actors have.", "sql": "SELECT count(DISTINCT last_name) FROM actor"}, {"query": "What is the most popular first name of the actors?", "sql": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the most common first name among all actors.", "sql": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the most popular full name of the actors?", "sql": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the most common full name among all actors.", "sql": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which districts have at least two addresses?", "sql": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2"}, {"query": "Give the districts which have two or more addresses.", "sql": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2"}, {"query": "What is the phone number and postal code of the address 1031 Daugavpils Parkway?", "sql": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'"}, {"query": "Give the phone and postal code corresponding to the address '1031 Daugavpils Parkway'.", "sql": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'"}, {"query": "Which city has the most addresses? List the city name, number of addresses, and city id.", "sql": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the city name, id, and number of addresses corresponding to the city with the most addressed?", "sql": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "How many addresses are in the district of California?", "sql": "SELECT count(*) FROM address WHERE district  =  'California'"}, {"query": "Count the number of addressed in the California district.", "sql": "SELECT count(*) FROM address WHERE district  =  'California'"}, {"query": "Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.", "sql": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3"}, {"query": "What are the title and id of the film which has a rental rate of 0.99 and an inventory of below 3?", "sql": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3"}, {"query": "How many cities are in Australia?", "sql": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'"}, {"query": "Count the number of cities in Australia.", "sql": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'"}, {"query": "Which countries have at least 3 cities?", "sql": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3"}, {"query": "What are the countries that contain 3 or more cities?", "sql": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3"}, {"query": "Find all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa.", "sql": "SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'"}, {"query": "What are the payment dates for any payments that have an amount greater than 10 or were handled by a staff member with the first name Elsa?", "sql": "SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'"}, {"query": "How many customers have an active value of 1?", "sql": "SELECT count(*) FROM customer WHERE active = '1'"}, {"query": "Count the number of customers who are active.", "sql": "SELECT count(*) FROM customer WHERE active = '1'"}, {"query": "Which film has the highest rental rate? And what is the rate?", "sql": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1"}, {"query": "What are the title and rental rate of the film with the highest rental rate?", "sql": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1"}, {"query": "Which film has the most number of actors or actresses? List the film name, film id and description.", "sql": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the title, id, and description of the movie with the greatest number of actors?", "sql": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which film actor (actress) starred the most films? List his or her first name, last name and actor id.", "sql": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the full name and id of the actor or actress who starred in the greatest number of films.", "sql": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.", "sql": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30"}, {"query": "What are the full names of actors who had roles in more than 30 films?", "sql": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30"}, {"query": "Which store owns most items?", "sql": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the id of the store that has the most items in inventory?", "sql": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the total amount of all payments?", "sql": "SELECT sum(amount) FROM payment"}, {"query": "Return the sum of all payment amounts.", "sql": "SELECT sum(amount) FROM payment"}, {"query": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1"}, {"query": "What is the full name and id of the customer who has the lowest total amount of payment?", "sql": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1"}, {"query": "What is the genre name of the film HUNGER ROOF?", "sql": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'"}, {"query": "Return the name of the category to which the film 'HUNGER ROOF' belongs.", "sql": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'"}, {"query": "How many films are there in each category? List the genre name, genre id and the count.", "sql": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id"}, {"query": "What are the names and ids of the different categories, and how many films are in each?", "sql": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id"}, {"query": "Which film has the most copies in the inventory? List both title and id.", "sql": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the title and id of the film that has the greatest number of copies in inventory?", "sql": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the film title and inventory id of the item in the inventory which was rented most frequently?", "sql": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the title and inventory id of the film that is rented most often.", "sql": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "How many languages are in these films?", "sql": "SELECT count(DISTINCT language_id) FROM film"}, {"query": "Count the number of different languages in these films.", "sql": "SELECT count(DISTINCT language_id) FROM film"}, {"query": "What are all the movies rated as R? List the titles.", "sql": "SELECT title FROM film WHERE rating  =  'R'"}, {"query": "Return the titles of any movies with an R rating.", "sql": "SELECT title FROM film WHERE rating  =  'R'"}, {"query": "Where is store 1 located?", "sql": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1"}, {"query": "Return the address of store 1.", "sql": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1"}, {"query": "Which staff handled least number of payments? List the full name and the id.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1"}, {"query": "Give the full name and staff id of the staff who has handled the fewest payments.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1"}, {"query": "Which language does the film AIRPORT POLLOCK use? List the language name.", "sql": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'"}, {"query": "What is the name of the language that the film 'AIRPORT POLLOCK' is in?", "sql": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'"}, {"query": "How many stores are there?", "sql": "SELECT count(*) FROM store"}, {"query": "Count the number of stores.", "sql": "SELECT count(*) FROM store"}, {"query": "How many kinds of different ratings are listed?", "sql": "SELECT count(DISTINCT rating) FROM film"}, {"query": "Count the number of different film ratings.", "sql": "SELECT count(DISTINCT rating) FROM film"}, {"query": "Which movies have 'Deleted Scenes' as a substring in the special feature?", "sql": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'"}, {"query": "Return the titles of films that include 'Deleted Scenes' in their special feature section.", "sql": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'"}, {"query": "How many items in inventory does store 1 have?", "sql": "SELECT count(*) FROM inventory WHERE store_id  =  1"}, {"query": "Count the number of items store 1 has in stock.", "sql": "SELECT count(*) FROM inventory WHERE store_id  =  1"}, {"query": "When did the first payment happen?", "sql": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1"}, {"query": "What was the date of the earliest payment?", "sql": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1"}, {"query": "Where does the customer with the first name Linda live? And what is her email?", "sql": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'"}, {"query": "Return the address and email of the customer with the first name Linda.", "sql": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'"}, {"query": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.", "sql": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200"}, {"query": "What are the titles of films that are either longer than 100 minutes or rated PG other than those that cost more than 200 to replace?", "sql": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200"}, {"query": "What is the first name and the last name of the customer who made the earliest rental?", "sql": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1"}, {"query": "Return the full name of the customer who made the first rental.", "sql": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1"}, {"query": "What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns?", "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'"}, {"query": "Return the full name of the staff who provided a customer with the first name April and the last name Burns with a film rental.", "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'"}, {"query": "Which store has most the customers?", "sql": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the id of the store with the most customers.", "sql": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the largest payment amount?", "sql": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1"}, {"query": "Return the amount of the largest payment.", "sql": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1"}, {"query": "Where does the staff member with the first name Elsa live?", "sql": "SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'"}, {"query": "Give the address of the staff member who has the first name Elsa.", "sql": "SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'"}, {"query": "What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?", "sql": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )"}, {"query": "Return the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'.", "sql": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )"}, {"query": "How many bank branches are there?", "sql": "SELECT count(*) FROM bank"}, {"query": "Count the number of bank branches.", "sql": "SELECT count(*) FROM bank"}, {"query": "How many customers are there?", "sql": "SELECT sum(no_of_customers) FROM bank"}, {"query": "What is the total number of customers across banks?", "sql": "SELECT sum(no_of_customers) FROM bank"}, {"query": "Find the number of customers in the banks at New York City.", "sql": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'"}, {"query": "What is the total number of customers who use banks in New York City?", "sql": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'"}, {"query": "Find the average number of customers in all banks of Utah state.", "sql": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'"}, {"query": "What is the average number of customers across banks in the state of Utah?", "sql": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'"}, {"query": "Find the average number of customers cross all banks.", "sql": "SELECT avg(no_of_customers) FROM bank"}, {"query": "What is the average number of bank customers?", "sql": "SELECT avg(no_of_customers) FROM bank"}, {"query": "Find the city and state of the bank branch named morningside.", "sql": "SELECT city ,  state FROM bank WHERE bname  =  'morningside'"}, {"query": "What city and state is the bank with the name morningside in?", "sql": "SELECT city ,  state FROM bank WHERE bname  =  'morningside'"}, {"query": "Find the branch names of banks in the New York state.", "sql": "SELECT bname FROM bank WHERE state  =  'New York'"}, {"query": "What are the names of banks in the state of New York?", "sql": "SELECT bname FROM bank WHERE state  =  'New York'"}, {"query": "List the name of all customers sorted by their account balance in ascending order.", "sql": "SELECT cust_name FROM customer ORDER BY acc_bal"}, {"query": "What are the names of all customers, ordered by account balance?", "sql": "SELECT cust_name FROM customer ORDER BY acc_bal"}, {"query": "List the name of all different customers who have some loan sorted by their total loan amount.", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)"}, {"query": "What are the names of the different customers who have taken out a loan, ordered by the total amount that they have taken?", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)"}, {"query": "Find the state, account type, and credit score of the customer whose number of loan is 0.", "sql": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0"}, {"query": "What are the states, account types, and credit scores for customers who have 0 loans?", "sql": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0"}, {"query": "Find the number of different cities which banks are located at.", "sql": "SELECT count(DISTINCT city) FROM bank"}, {"query": "In how many different cities are banks located?", "sql": "SELECT count(DISTINCT city) FROM bank"}, {"query": "Find the number of different states which banks are located at.", "sql": "SELECT count(DISTINCT state) FROM bank"}, {"query": "In how many different states are banks located?", "sql": "SELECT count(DISTINCT state) FROM bank"}, {"query": "How many distinct types of accounts are there?", "sql": "SELECT count(DISTINCT acc_type) FROM customer"}, {"query": "Count the number of different account types.", "sql": "SELECT count(DISTINCT acc_type) FROM customer"}, {"query": "Find the name and account balance of the customer whose name includes the letter \u2018a\u2019.", "sql": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'"}, {"query": "What are the names and account balances of customers with the letter a in their names?", "sql": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'"}, {"query": "Find the total account balance of each customer from Utah or Texas.", "sql": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'"}, {"query": "What are the total account balances for each customer from Utah or Texas?", "sql": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'"}, {"query": "Find the name of customers who have both saving and checking account types.", "sql": "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'"}, {"query": "What are the names of customers who have both savings and checking accounts?", "sql": "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'"}, {"query": "Find the name of customers who do not have an saving account.", "sql": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'"}, {"query": "What are the names of customers who do not have saving accounts?", "sql": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'"}, {"query": "Find the name of customers who do not have a loan with a type of Mortgages.", "sql": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'"}, {"query": "What are the names of customers who have not taken a Mortage loan?", "sql": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'"}, {"query": "Find the name of customers who have loans of both Mortgages and Auto.", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'"}, {"query": "What are the names of customers who have taken both Mortgage and Auto loans?", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'"}, {"query": "Find the name of customers whose credit score is below the average credit scores of all customers.", "sql": "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)"}, {"query": "What are the names of customers with credit score less than the average credit score across customers?", "sql": "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)"}, {"query": "Find the branch name of the bank that has the most number of customers.", "sql": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1"}, {"query": "What is the name of the bank branch with the greatest number of customers?", "sql": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1"}, {"query": "Find the name of customer who has the lowest credit score.", "sql": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1"}, {"query": "What is the name of the customer with the worst credit score?", "sql": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1"}, {"query": "Find the name, account type, and account balance of the customer who has the highest credit score.", "sql": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1"}, {"query": "What is the name, account type, and account balance corresponding to the customer with the highest credit score?", "sql": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1"}, {"query": "Find the name of customer who has the highest amount of loans.", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1"}, {"query": "What is the name of the customer who has greatest total loan amount?", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1"}, {"query": "Find the state which has the most number of customers.", "sql": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1"}, {"query": "Which state has the greatest total number of bank customers?", "sql": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1"}, {"query": "For each account type, find the average account balance of customers with credit score lower than 50.", "sql": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type"}, {"query": "What is the average account balance of customers with credit score below 50 for the different account types?", "sql": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type"}, {"query": "For each state, find the total account balance of customers whose credit score is above 100.", "sql": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state"}, {"query": "What is the total account balance for customers with a credit score of above 100 for the different states?", "sql": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state"}, {"query": "Find the total amount of loans offered by each bank branch.", "sql": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname"}, {"query": "What are the names of the different bank branches, and what are their total loan amounts?", "sql": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname"}, {"query": "Find the name of customers who have more than one loan.", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1"}, {"query": "What are the names of customers who have taken out more than one loan?", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1"}, {"query": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.", "sql": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000"}, {"query": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?", "sql": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000"}, {"query": "Find the name of bank branch that provided the greatest total amount of loans.", "sql": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1"}, {"query": "What is the name of the bank branch that has lent the greatest amount?", "sql": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1"}, {"query": "Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.", "sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1"}, {"query": "What is the name of the bank branch that has lended the largest total amount in loans, specifically to customers with credit scores below 100?", "sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1"}, {"query": "Find the name of bank branches that provided some loans.", "sql": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id"}, {"query": "What are the names of the different banks that have provided loans?", "sql": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id"}, {"query": "Find the name and credit score of the customers who have some loans.", "sql": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id"}, {"query": "What are the different names and credit scores of customers who have taken a loan?", "sql": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id"}, {"query": "Find the the name of the customers who have a loan with amount more than 3000.", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000"}, {"query": "What are the names of customers who have a loan of more than 3000 in amount?", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000"}, {"query": "Find the city and name of bank branches that provide business loans.", "sql": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'"}, {"query": "What are the names and cities of bank branches that offer loans for business?", "sql": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'"}, {"query": "Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.", "sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100"}, {"query": "What are the names of banks that have loaned money to customers with credit scores below 100?", "sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100"}, {"query": "Find the total amount of loans provided by bank branches in the state of New York.", "sql": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'"}, {"query": "What is the total amount of money loaned by banks in New York state?", "sql": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'"}, {"query": "Find the average credit score of the customers who have some loan.", "sql": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)"}, {"query": "What is the average credit score for customers who have taken a loan?", "sql": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)"}, {"query": "Find the average credit score of the customers who do not have any loan.", "sql": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)"}, {"query": "What is the average credit score for customers who have never taken a loan?", "sql": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)"}, {"query": "How many assessment notes are there in total?", "sql": "SELECT count(*) FROM ASSESSMENT_NOTES"}, {"query": "What are the dates of the assessment notes?", "sql": "SELECT date_of_notes FROM Assessment_Notes"}, {"query": "How many addresses have zip code 197?", "sql": "SELECT count(*) FROM ADDRESSES WHERE zip_postcode  =  \"197\""}, {"query": "How many distinct incident type codes are there?", "sql": "SELECT count(DISTINCT incident_type_code) FROM Behavior_Incident"}, {"query": "Return all distinct detention type codes.", "sql": "SELECT DISTINCT detention_type_code FROM Detention"}, {"query": "What are the start and end dates for incidents with incident type code \"NOISE\"?", "sql": "SELECT date_incident_start ,  date_incident_end FROM Behavior_Incident WHERE incident_type_code  =  \"NOISE\""}, {"query": "Return all detention summaries.", "sql": "SELECT detention_summary FROM Detention"}, {"query": "Return the cell phone number and email address for all students.", "sql": "SELECT cell_mobile_number ,  email_address FROM STUDENTS"}, {"query": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?", "sql": "SELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\""}, {"query": "How many distinct students have been in detention?", "sql": "SELECT count(DISTINCT student_id) FROM Students_in_Detention"}, {"query": "What is the gender of the teacher with last name \"Medhurst\"?", "sql": "SELECT gender FROM TEACHERS WHERE last_name  =  \"Medhurst\""}, {"query": "What is the incident type description for the incident type with code \"VIOLENCE\"?", "sql": "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code  =  \"VIOLENCE\""}, {"query": "Find the maximum and minimum monthly rental for all student addresses.", "sql": "SELECT max(monthly_rental) ,  min(monthly_rental) FROM Student_Addresses"}, {"query": "Find the first names of teachers whose email address contains the word \"man\".", "sql": "SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'"}, {"query": "List all information about the assessment notes sorted by date in ascending order.", "sql": "SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC"}, {"query": "List all cities of addresses in alphabetical order.", "sql": "SELECT city FROM Addresses ORDER BY city"}, {"query": "Find the first names and last names of teachers in alphabetical order of last name.", "sql": "SELECT first_name ,  last_name FROM Teachers ORDER BY last_name"}, {"query": "Find all information about student addresses, and sort by monthly rental in descending order.", "sql": "SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC"}, {"query": "Find the id and first name of the student that has the most number of assessment notes?", "sql": "SELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the ids and first names of the 3 teachers that have the most number of assessment notes?", "sql": "SELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3"}, {"query": "Find the id and last name of the student that has the most behavior incidents?", "sql": "SELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"?", "sql": "SELECT T1.teacher_id ,  T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.detention_type_code  =  \"AFTER\" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the id and first name of the student whose addresses have the highest average monthly rental?", "sql": "SELECT T1.student_id ,  T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1"}, {"query": "Find the id and city of the student address with the highest average monthly rental.", "sql": "SELECT T2.address_id ,  T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1"}, {"query": "What are the code and description of the most frequent behavior incident type?", "sql": "SELECT T1.incident_type_code ,  T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code  =  T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the code and description of the least frequent detention type ?", "sql": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1"}, {"query": "Find the dates of assessment notes for students with first name \"Fanny\".", "sql": "SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.first_name  =  \"Fanny\""}, {"query": "Find the texts of assessment notes for teachers with last name \"Schuster\".", "sql": "SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schuster\""}, {"query": "Find the start and end dates of behavior incidents of students with last name \"Fahey\".", "sql": "SELECT T1.date_incident_start ,  date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.last_name  =  \"Fahey\""}, {"query": "Find the start and end dates of detentions of teachers with last name \"Schultz\".", "sql": "SELECT T1.datetime_detention_start ,  datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schultz\""}, {"query": "What are the id and zip code of the address with the highest monthly rental?", "sql": "SELECT T2.address_id ,  T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id ORDER BY monthly_rental DESC LIMIT 1"}, {"query": "What is the cell phone number of the student whose address has the lowest monthly rental?", "sql": "SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1"}, {"query": "What are the monthly rentals of student addresses in Texas state?", "sql": "SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Texas\""}, {"query": "What are the first names and last names of students with address in Wisconsin state?", "sql": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Wisconsin\""}, {"query": "What are the line 1 and average monthly rentals of all student addresses?", "sql": "SELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id"}, {"query": "What is the zip code of the address where the teacher with first name \"Lyla\" lives?", "sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  \"Lyla\""}, {"query": "What are the email addresses of teachers whose address has zip code \"918\"?", "sql": "SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T1.zip_postcode  =  \"918\""}, {"query": "How many students are not involved in any behavior incident?", "sql": "SELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )"}, {"query": "Find the last names of teachers who are not involved in any detention.", "sql": "SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id  =  T2.teacher_id"}, {"query": "What are the line 1 of addresses shared by some students and some teachers?", "sql": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id"}, {"query": "Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.", "sql": "SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2"}, {"query": "How many assets does each maintenance contract contain? List the number and the contract id.", "sql": "SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id"}, {"query": "How many assets does each third party company supply? List the count and the company id.", "sql": "SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id"}, {"query": "Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.", "sql": "SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2"}, {"query": "What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers?", "sql": "SELECT T1.staff_name ,  T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id  =  T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name ,  T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id  =  T4.contact_staff_id"}, {"query": "Which engineer has visited the most times? Show the engineer id, first name and last name.", "sql": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which parts have more than 2 faults? Show the part name and id.", "sql": "SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2"}, {"query": "List all every engineer's first name, last name, details and coresponding skill description.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id"}, {"query": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.", "sql": "SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id"}, {"query": "How many assets can each parts be used in? List the part name and the number.", "sql": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name"}, {"query": "What are all the fault descriptions and the fault status of all the faults recoreded in the logs?", "sql": "SELECT T1.fault_description ,  T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id"}, {"query": "How many engineer visits are required at most for a single fault log? List the number and the log entry id.", "sql": "SELECT count(*) ,  T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are all the distinct last names of all the engineers?", "sql": "SELECT DISTINCT last_name FROM Maintenance_Engineers"}, {"query": "How many fault status codes are recorded in the fault log parts table?", "sql": "SELECT DISTINCT fault_status FROM Fault_Log_Parts"}, {"query": "Which engineers have never visited to maintain the assets? List the engineer first name and last name.", "sql": "SELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)"}, {"query": "List the asset id, details, make and model for every asset.", "sql": "SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets"}, {"query": "When was the first asset acquired?", "sql": "SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1"}, {"query": "Which part fault requires the most number of skills to fix? List part id and name.", "sql": "SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which kind of part has the least number of faults? List the part name.", "sql": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1"}, {"query": "Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.", "sql": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1"}, {"query": "Which staff have contacted which engineers? List the staff name and the engineer first name and last name.", "sql": "SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id"}, {"query": "Which fault log included the most number of faulty parts? List the fault log id, description and record time.", "sql": "SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which skill is used in fixing the most number of faults? List the skill id and description.", "sql": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are all the distinct asset models?", "sql": "SELECT DISTINCT asset_model FROM Assets"}, {"query": "List the all the assets make, model, details by the disposed date ascendingly.", "sql": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC"}, {"query": "Which part has the least chargeable amount? List the part id and amount.", "sql": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1"}, {"query": "Which company started the earliest the maintenance contract? Show the company name.", "sql": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1"}, {"query": "What is the description of the type of the company who concluded its contracts most recently?", "sql": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id JOIN Ref_Company_Types AS T3 ON T1.company_type_code  =  T3.company_type_code ORDER BY T2.contract_end_date DESC LIMIT 1"}, {"query": "Which gender makes up the majority of the staff?", "sql": "SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1"}, {"query": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.", "sql": "SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name"}, {"query": "Which assets did not incur any fault log? List the asset model.", "sql": "SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)"}, {"query": "list the local authorities and services provided by all stations.", "sql": "SELECT local_authority ,  services FROM station"}, {"query": "show all train numbers and names ordered by their time from early to late.", "sql": "SELECT train_number ,  name FROM train ORDER BY TIME"}, {"query": "Give me the times and numbers of all trains that go to Chennai, ordered by time.", "sql": "SELECT TIME ,  train_number FROM train WHERE destination  =  'Chennai' ORDER BY TIME"}, {"query": "How many trains have 'Express' in their names?", "sql": "SELECT count(*) FROM train WHERE name LIKE \"%Express%\""}, {"query": "Find the number and time of the train that goes from Chennai to Guruvayur.", "sql": "SELECT train_number ,  TIME FROM train WHERE origin  =  'Chennai' AND destination  =  'Guruvayur'"}, {"query": "Find the number of trains starting from each origin.", "sql": "SELECT origin ,  count(*) FROM train GROUP BY origin"}, {"query": "Find the name of the train whose route runs through greatest number of stations.", "sql": "SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id  =  t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the number of trains for each station, as well as the station network name and services.", "sql": "SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id"}, {"query": "What is the average high temperature for each day of week?", "sql": "SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week"}, {"query": "Give me the maximum low temperature and average precipitation at the Amersham station.", "sql": "SELECT max(t1.low_temperature) ,  avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id WHERE t2.network_name  =  \"Amersham\""}, {"query": "Find names and times of trains that run through stations for the local authority Chiltern.", "sql": "SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  \"Chiltern\""}, {"query": "How many different services are provided by all stations?", "sql": "SELECT count(DISTINCT services) FROM station"}, {"query": "Find the id and local authority of the station with has the highest average high temperature.", "sql": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1"}, {"query": "Find the id and local authority of the station whose maximum precipitation is higher than 50.", "sql": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50"}, {"query": "show the lowest low temperature and highest wind speed in miles per hour.", "sql": "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather"}, {"query": "Find the origins from which more than 1 train starts.", "sql": "SELECT origin FROM train GROUP BY origin HAVING count(*)  >  1"}, {"query": "Find the number of professors in accounting department.", "sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\""}, {"query": "How many professors are in the accounting dept?", "sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\""}, {"query": "How many professors are teaching class with code ACCT-211?", "sql": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\""}, {"query": "How many professors teach a class with the code ACCT-211?", "sql": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\""}, {"query": "What is the first and last name of the professor in biology department?", "sql": "SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\""}, {"query": "What are the first and last name of all biology professors?", "sql": "SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\""}, {"query": "What are the first names and date of birth of professors teaching course ACCT-211?", "sql": "SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\""}, {"query": "What are the first names and birthdates of the professors in charge of ACCT-211?", "sql": "SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\""}, {"query": "How many classes are professor whose last name is Graztevski has?", "sql": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'"}, {"query": "How many classes does the professor whose last name is Graztevski teach?", "sql": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'"}, {"query": "What is the code of the school where the accounting department belongs to?", "sql": "SELECT school_code FROM department WHERE dept_name  =  \"Accounting\""}, {"query": "What is the school code of the accounting department?", "sql": "SELECT school_code FROM department WHERE dept_name  =  \"Accounting\""}, {"query": "How many credits does course CIS-220 have, and what its description?", "sql": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'"}, {"query": "What is the description for the CIS-220 and how many credits does it have?", "sql": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'"}, {"query": "what is the address of history department?", "sql": "SELECT dept_address FROM department WHERE dept_name  =  'History'"}, {"query": "Where is the history department?", "sql": "SELECT dept_address FROM department WHERE dept_name  =  'History'"}, {"query": "How many different locations does the school with code BUS has?", "sql": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'"}, {"query": "What are the different locations of the school with the code BUS?", "sql": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'"}, {"query": "How many different locations does each school have?", "sql": "SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code"}, {"query": "Count different addresses of each school.", "sql": "SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code"}, {"query": "Find the description and credit for the course QM-261?", "sql": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'"}, {"query": "What is the course description and number of credits for QM-261?", "sql": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'"}, {"query": "Find the number of departments in each school.", "sql": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code"}, {"query": "How many departments are in each school?", "sql": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code"}, {"query": "Find the number of different departments in each school whose number of different departments is less than 5.", "sql": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5"}, {"query": "How many different departments are there in each school that has less than 5 apartments?", "sql": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5"}, {"query": "How many sections does each course has?", "sql": "SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code"}, {"query": "How many sections does each course have?", "sql": "SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code"}, {"query": "What is the total credit does each department offer?", "sql": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code"}, {"query": "How many credits does the department offer?", "sql": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code"}, {"query": "Find the number of classes offered for all class rooms that held at least 2 classes.", "sql": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2"}, {"query": "For each classroom with at least 2 classes, how many classes are offered?", "sql": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2"}, {"query": "Find the number of classes in each department.", "sql": "SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code"}, {"query": "How many classes are held in each department?", "sql": "SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code"}, {"query": "Find the number of classes in each school.", "sql": "SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code"}, {"query": "How many classes exist for each school?", "sql": "SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code"}, {"query": "What is the number of professors for different school?", "sql": "SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code"}, {"query": "How many different professors are there for the different schools?", "sql": "SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code"}, {"query": "Find the count and code of the job has most employees.", "sql": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the count and code of the job with the most employee?", "sql": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which school has the smallest amount of professors?", "sql": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1"}, {"query": "Which school has the fewest professors?", "sql": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1"}, {"query": "Find the number of professors with a Ph.D. degree in each department.", "sql": "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code"}, {"query": "How many professors have a Ph.D. in each department?", "sql": "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code"}, {"query": "Find the number of students for each department.", "sql": "SELECT count(*) ,  dept_code FROM student GROUP BY dept_code"}, {"query": "How many students are in each department?", "sql": "SELECT count(*) ,  dept_code FROM student GROUP BY dept_code"}, {"query": "Find the total number of hours have done for all students in each department.", "sql": "SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code"}, {"query": "How many hours do the students spend studying in each department?", "sql": "SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code"}, {"query": "Find the max, average, and minimum gpa of all students in each department.", "sql": "SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code"}, {"query": "What is the highest, lowest, and average student GPA for every department?", "sql": "SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code"}, {"query": "What is the name and the average gpa of department whose students have the highest average gpa?", "sql": "SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1"}, {"query": "Which department has the highest average student GPA, and what is the average gpa?", "sql": "SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1"}, {"query": "how many schools exist in total?", "sql": "SELECT count(DISTINCT school_code) FROM department"}, {"query": "How many schools are there in the department?", "sql": "SELECT count(DISTINCT school_code) FROM department"}, {"query": "How many different classes are there?", "sql": "SELECT count(DISTINCT class_code) FROM CLASS"}, {"query": "How many unique classes are offered?", "sql": "SELECT count(DISTINCT class_code) FROM CLASS"}, {"query": "How many courses are offered?", "sql": "SELECT count(DISTINCT crs_code) FROM CLASS"}, {"query": "What are the number of different course codes?", "sql": "SELECT count(DISTINCT crs_code) FROM CLASS"}, {"query": "How many departments does the college has?", "sql": "SELECT count(DISTINCT dept_name) FROM department"}, {"query": "How many different departments are there?", "sql": "SELECT count(DISTINCT dept_name) FROM department"}, {"query": "How many courses are offered by the Computer Info. Systems department?", "sql": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\""}, {"query": "How many courses does the department of Computer Information Systmes offer?", "sql": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\""}, {"query": "How many sections does course ACCT-211 has?", "sql": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  'ACCT-211'"}, {"query": "What is the number of different class sections offered in the course ACCT-211?", "sql": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  'ACCT-211'"}, {"query": "Find the total credits of all classes offered by each department.", "sql": "SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code"}, {"query": "What are the total number of credits offered by each department?", "sql": "SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code"}, {"query": "Find the name of the department that offers the largest number of credits of all classes.", "sql": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1"}, {"query": "Which department offers the most credits all together?", "sql": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1"}, {"query": "How many students enrolled in class ACCT-211?", "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'"}, {"query": "What are the total number of students enrolled in ACCT-211?", "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'"}, {"query": "What is the first name of each student enrolled in class ACCT-211?", "sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'"}, {"query": "What are the first names of all students in course ACCT-211?", "sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'"}, {"query": "What is the first name of students enrolled in class ACCT-211 and got grade C?", "sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'"}, {"query": "What are the first names of all students who took ACCT-211 and received a C?", "sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'"}, {"query": "Find the total number of employees.", "sql": "SELECT count(*) FROM employee"}, {"query": "How many employees are there all together?", "sql": "SELECT count(*) FROM employee"}, {"query": "How many professors do have a Ph.D. degree?", "sql": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'"}, {"query": "What is the total number of professors with a Ph.D. ?", "sql": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'"}, {"query": "How many students are enrolled in the class taught by some professor from the accounting department?", "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'"}, {"query": "How many students are enrolled in some classes that are taught by an accounting professor?", "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'"}, {"query": "What is the name of the department that has the largest number of students enrolled?", "sql": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name of the department with the most students enrolled?", "sql": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "list names of all departments ordered by their names.", "sql": "SELECT dept_name FROM department ORDER BY dept_name"}, {"query": "What are the names of all departments in alphabetical order?", "sql": "SELECT dept_name FROM department ORDER BY dept_name"}, {"query": "List the codes of all courses that take place in room KLR209.", "sql": "SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'"}, {"query": "What are the codes of all the courses that are located in room KLR209?", "sql": "SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'"}, {"query": "List the first name of all employees with job code PROF ordered by their date of birth.", "sql": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob"}, {"query": "What are the first names of all employees that are professors ordered by date of birth?", "sql": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob"}, {"query": "Find the first names and offices of all professors sorted by alphabetical order of their first name.", "sql": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname"}, {"query": "What are the first names and office locations for all professors sorted alphabetically by first name?", "sql": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname"}, {"query": "What is the first and last name of the oldest employee?", "sql": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1"}, {"query": "What are the first and last names of the employee with the earliest date of birth?", "sql": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1"}, {"query": "What is the first, last name, gpa of the youngest one among students whose GPA is above 3?", "sql": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1"}, {"query": "What is the first and last name of the youngest student with a GPA above 3, and what is their GPA?", "sql": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1"}, {"query": "What is the first name of students who got grade C in any class?", "sql": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'"}, {"query": "What are the first names of all students who got a grade C in a class?", "sql": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'"}, {"query": "What is the name of department where has the smallest number of professors?", "sql": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1"}, {"query": "What is the name of the department with the fewest professors?", "sql": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1"}, {"query": "What is the name of department where has the largest number of professors with a Ph.D. degree?", "sql": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which department has the most professors with a Ph.D.?", "sql": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the first names of the professors who do not teach a class.", "sql": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num"}, {"query": "What are the first names of all professors not teaching any classes?", "sql": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num"}, {"query": "What is the first names of the professors from the history department who do not teach a class.", "sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num"}, {"query": "What are the first names of all history professors who do not teach?", "sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num"}, {"query": "What is the last name and office of the professor from the history department?", "sql": "SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'"}, {"query": "What are the last name and office of all history professors?", "sql": "SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'"}, {"query": "What is department name and office for the professor whose last name is Heffington?", "sql": "SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  'Heffington'"}, {"query": "What is the name of the department and office location for the professor with the last name of Heffington?", "sql": "SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  'Heffington'"}, {"query": "Find the last name and hire date of the professor who is in office DRE 102.", "sql": "SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'"}, {"query": "What is the last name of the professor whose office is located in DRE 102, and when were they hired?", "sql": "SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'"}, {"query": "What is the code of the course which the student whose last name is Smithson took?", "sql": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'"}, {"query": "What are the course codes for every class that the student with the last name Smithson took?", "sql": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'"}, {"query": "What are the description and credit of the course which the student whose last name is Smithson took?", "sql": "SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'"}, {"query": "How many credits is the course that the student with the last name Smithson took, and what is its description?", "sql": "SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'"}, {"query": "How many professors who has a either Ph.D. or MA degree?", "sql": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'"}, {"query": "How many professors attained either Ph.D. or Masters degrees?", "sql": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'"}, {"query": "How many professors who are from either Accounting or Biology department?", "sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'"}, {"query": "What is the number of professors who are in the Accounting or Biology departments?", "sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'"}, {"query": "Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261.", "sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'"}, {"query": "What is the first name of the professor who is teaching CIS-220 and QM-261?", "sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'"}, {"query": "Find the first name of student who is taking classes from accounting and Computer Info. Systems departments", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'"}, {"query": "What are the first names of all students taking accoutning and Computer Information Systems classes?", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'"}, {"query": "What is the average gpa of the students enrolled in the course with code ACCT-211?", "sql": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'"}, {"query": "What is the average GPA of students taking ACCT-211?", "sql": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'"}, {"query": "What is the first name, gpa and phone number of the top 5 students with highest gpa?", "sql": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5"}, {"query": "What is the first name, GPA, and phone number of the students with the top 5 GPAs?", "sql": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5"}, {"query": "What is the department name of the students with lowest gpa belongs to?", "sql": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1"}, {"query": "What is the name of the department with the student that has the lowest GPA?", "sql": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1"}, {"query": "Find the first name and gpa of the students whose gpa is lower than the average gpa of all students.", "sql": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)"}, {"query": "What is the first name and GPA of every student that has a GPA lower than average?", "sql": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)"}, {"query": "Find the name and address of the department that has the highest number of students.", "sql": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name and address of the department with the most students?", "sql": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the name, address, number of students in the departments that have the top 3 highest number of students.", "sql": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3"}, {"query": "What is the name, address, and number of students in the departments that have the 3 most students?", "sql": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3"}, {"query": "Find the first name and office of the professor who is in the history department and has a Ph.D. degree.", "sql": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'"}, {"query": "What are the first names and office of the professors who are in the history department and have a Ph.D?", "sql": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'"}, {"query": "Find the first names of all instructors who have taught some course and the course code.", "sql": "SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num"}, {"query": "What are the first names of all teachers who have taught a course and the corresponding course codes?", "sql": "SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num"}, {"query": "Find the first names of all instructors who have taught some course and the course description.", "sql": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code"}, {"query": "What are the first names of all teachers who have taught a course and the corresponding descriptions?", "sql": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code"}, {"query": "Find the first names and offices of all instructors who have taught some course and also find the course description.", "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num"}, {"query": "What are the first names, office locations of all lecturers who have taught some course?", "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num"}, {"query": "Find the first names and offices of all instructors who have taught some course and the course description and the department name.", "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code"}, {"query": "What are the first names, office locations, and departments of all instructors, and also what are the descriptions of the courses they teach?", "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code"}, {"query": "Find names of all students who took some course and the course description.", "sql": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code"}, {"query": "What are the names of all students who took a class and the corresponding course descriptions?", "sql": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code"}, {"query": "Find names of all students who took some course and got A or C.", "sql": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'"}, {"query": "What are the names of all students taking a course who received an A or C?", "sql": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'"}, {"query": "Find the first names of all professors in the Accounting department who is teaching some course and the class room.", "sql": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'"}, {"query": "What are the first names of all Accounting professors who teach and what are the classrooms of the courses they teach?", "sql": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'"}, {"query": "Find the first names and degree of all professors who are teaching some class in Computer Info. Systems department.", "sql": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'"}, {"query": "What are the different first names and highest degree attained for professors teaching in the Computer Information Systems department?", "sql": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'"}, {"query": "What is the last name of the student who got a grade A in the class with code 10018.", "sql": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018"}, {"query": "What is the last name of the student who received an A in the class with the code 10018?", "sql": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018"}, {"query": "Find the first name and office of history professor who did not get a Ph.D. degree.", "sql": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'"}, {"query": "What are the first names and offices of history professors who don't have Ph.D.s?", "sql": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'"}, {"query": "Find the first names of professors who are teaching more than one class.", "sql": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1"}, {"query": "What are the first names of all professors who teach more than one class?", "sql": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1"}, {"query": "Find the first names of students who took exactly one class.", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1"}, {"query": "What are the first names of student who only took one course?", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1"}, {"query": "Find the name of department that offers the class whose description has the word \"Statistics\".", "sql": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'"}, {"query": "What is the name of the department that offers a course that has a description including the word \"Statistics\"?", "sql": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'"}, {"query": "What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class?", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'"}, {"query": "What is the first name of the student whose last name starts with the letter S and is taking ACCT-211?", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'"}, {"query": "How many clubs are there?", "sql": "SELECT count(*) FROM club"}, {"query": "What is the total number of clubs?", "sql": "SELECT count(*) FROM club"}, {"query": "List the distinct region of clubs in ascending alphabetical order.", "sql": "SELECT DISTINCT Region FROM club ORDER BY Region ASC"}, {"query": "What are the different regions of clubs in ascending alphabetical order?", "sql": "SELECT DISTINCT Region FROM club ORDER BY Region ASC"}, {"query": "What is the average number of gold medals for clubs?", "sql": "SELECT avg(Gold) FROM club_rank"}, {"query": "What is the average number of gold medals for a club?", "sql": "SELECT avg(Gold) FROM club_rank"}, {"query": "What are the types and countries of competitions?", "sql": "SELECT Competition_type ,  Country FROM competition"}, {"query": "What are the types of every competition and in which countries are they located?", "sql": "SELECT Competition_type ,  Country FROM competition"}, {"query": "What are the distinct years in which the competitions type is not \"Tournament\"?", "sql": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\""}, {"query": "What are the different years for all competitions that are not of type equal to tournament?", "sql": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\""}, {"query": "What are the maximum and minimum number of silver medals for clubs.", "sql": "SELECT max(Silver) ,  min(Silver) FROM club_rank"}, {"query": "What are the maximum and minimum number of silver medals for all the clubs?", "sql": "SELECT max(Silver) ,  min(Silver) FROM club_rank"}, {"query": "How many clubs have total medals less than 10?", "sql": "SELECT count(*) FROM club_rank WHERE Total  <  10"}, {"query": "What is the total number of clubs that have less than 10 medals in total?", "sql": "SELECT count(*) FROM club_rank WHERE Total  <  10"}, {"query": "List all club names in ascending order of start year.", "sql": "SELECT name FROM club ORDER BY Start_year ASC"}, {"query": "What are the names of all the clubs starting with the oldest?", "sql": "SELECT name FROM club ORDER BY Start_year ASC"}, {"query": "List all club names in descending alphabetical order.", "sql": "SELECT name FROM club ORDER BY name DESC"}, {"query": "What are the names of all the clubs ordered in descending alphabetical order?", "sql": "SELECT name FROM club ORDER BY name DESC"}, {"query": "Please show the names and the players of clubs.", "sql": "SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID"}, {"query": "What are the names and players of all the clubs?", "sql": "SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID"}, {"query": "Show the names of clubs that have players with position \"Right Wing\".", "sql": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\""}, {"query": "What are the names of the clubs that have players in the position of \"Right Wing\"?", "sql": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\""}, {"query": "What is the average points of players from club with name \"AIB\".", "sql": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  \"AIB\""}, {"query": "What is the average number of points for players from the \"AIB\" club?", "sql": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  \"AIB\""}, {"query": "List the position of players and the average number of points of players of each position.", "sql": "SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION"}, {"query": "For each position, what is the average number of points for players in that position?", "sql": "SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION"}, {"query": "List the position of players with average number of points scored by players of that position bigger than 20.", "sql": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20"}, {"query": "What are the positions of players whose average number of points scored by that position is larger than 20?", "sql": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20"}, {"query": "List the types of competition and the number of competitions of each type.", "sql": "SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type"}, {"query": "What are the types of competition and number of competitions for that type?", "sql": "SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type"}, {"query": "List the most common type of competition.", "sql": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What is the most common competition type?", "sql": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "List the types of competition that have at most five competitions of that type.", "sql": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5"}, {"query": "What are the types of competition that have most 5 competitions for that type?", "sql": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5"}, {"query": "List the names of clubs that do not have any players.", "sql": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)"}, {"query": "What are the names of all clubs that do not have any players?", "sql": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)"}, {"query": "What are the positions with both players having more than 20 points and less than 10 points.", "sql": "SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10"}, {"query": "What are the positions of both players that have more than 20 20 points and less than 10 points?", "sql": "SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10"}, {"query": "Show total points of all players.", "sql": "SELECT sum(Points) FROM player"}, {"query": "What is the total number of points for all players?", "sql": "SELECT sum(Points) FROM player"}, {"query": "how many different positions are there?", "sql": "SELECT count(DISTINCT POSITION) FROM player"}, {"query": "How many different position for players are listed?", "sql": "SELECT count(DISTINCT POSITION) FROM player"}, {"query": "what are the name of players who get more than the average points.", "sql": "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)"}, {"query": "What are the names of all players that got more than the average number of points?", "sql": "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)"}, {"query": "find the number of players whose points are lower than 30 in each position.", "sql": "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION"}, {"query": "What is the number of players who have points less than 30 for each position?", "sql": "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION"}, {"query": "which country did participated in the most number of Tournament competitions?", "sql": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1"}, {"query": "what is the name of the country that participated in the most tournament competitions?", "sql": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1"}, {"query": "which countries did participated in both Friendly and Tournament type competitions.", "sql": "SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'"}, {"query": "What are the countries that participated in both friendly and tournament type competitions?", "sql": "SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'"}, {"query": "Find the countries that have never participated in any competition with Friendly type.", "sql": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'"}, {"query": "What are the countries that have never participated in any friendly-type competitions?", "sql": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'"}, {"query": "How many furniture components are there in total?", "sql": "SELECT sum(num_of_component) FROM furniture"}, {"query": "Return the name and id of the furniture with the highest market rate.", "sql": "SELECT name ,  furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1"}, {"query": "find the total market rate of the furnitures that have the top 2 market shares.", "sql": "SELECT sum(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2"}, {"query": "Find the component amounts and names of all furnitures that have more than 10 components.", "sql": "SELECT Num_of_Component ,  name FROM furniture WHERE Num_of_Component  >  10"}, {"query": "Find the name and component amount of the least popular furniture.", "sql": "SELECT name ,  Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1"}, {"query": "Find the names of furnitures whose prices are lower than the highest price.", "sql": "SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID WHERE t2.Price_in_Dollar  <  (SELECT max(Price_in_Dollar) FROM furniture_manufacte)"}, {"query": "Which manufacturer has the most number of shops? List its name and year of opening.", "sql": "SELECT open_year ,  name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1"}, {"query": "Find the average number of factories for the manufacturers that have more than 20 shops.", "sql": "SELECT avg(Num_of_Factories) FROM manufacturer WHERE num_of_shops  >  20"}, {"query": "List all manufacturer names and ids ordered by their opening year.", "sql": "SELECT name ,  manufacturer_id FROM manufacturer ORDER BY open_year"}, {"query": "Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops.", "sql": "SELECT name ,  open_year FROM manufacturer WHERE num_of_shops  >  10 OR Num_of_Factories  <  10"}, {"query": "what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.", "sql": "SELECT max(num_of_shops) ,  avg(Num_of_Factories) FROM manufacturer WHERE open_year  <  1990"}, {"query": "Find the id and number of shops for the company that produces the most expensive furniture.", "sql": "SELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1"}, {"query": "Find the number of funiture types produced by each manufacturer as well as the company names.", "sql": "SELECT count(*) ,  t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id"}, {"query": "Give me the names and prices of furnitures which some companies are manufacturing.", "sql": "SELECT t1.name ,  t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID"}, {"query": "Find the market shares and names of furnitures which no any company is producing in our records.", "sql": "SELECT Market_Rate ,  name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)"}, {"query": "Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components.", "sql": "SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10"}, {"query": "Display the first name and department name for each employee.", "sql": "SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id"}, {"query": "What are the first name and department name of all employees?", "sql": "SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id"}, {"query": "List the full name (first and last name), and salary for those employees who earn below 6000.", "sql": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000"}, {"query": "What are the full names and salaries for any employees earning less than 6000?", "sql": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000"}, {"query": "Display the first name, and department number for all employees whose last name is \"McEwen\".", "sql": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'"}, {"query": "What are the first names and department numbers for employees with last name McEwen?", "sql": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'"}, {"query": "Return all the information for all employees without any department number.", "sql": "SELECT * FROM employees WHERE department_id  =  \"null\""}, {"query": "What are all the employees without a department number?", "sql": "SELECT * FROM employees WHERE department_id  =  \"null\""}, {"query": "Display all the information about the department Marketing.", "sql": "SELECT * FROM  departments WHERE department_name  =  'Marketing'"}, {"query": "What is all the information about the Marketing department?", "sql": "SELECT * FROM  departments WHERE department_name  =  'Marketing'"}, {"query": "when is the hire date for those employees whose first name does not containing the letter M?", "sql": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'"}, {"query": "On what dates were employees without the letter M in their first names hired?", "sql": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'"}, {"query": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M.", "sql": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'"}, {"query": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?", "sql": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'"}, {"query": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number.", "sql": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id"}, {"query": "What are the full name, hire data, salary and department id for employees without the letter M in their first name, ordered by ascending department id?", "sql": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id"}, {"query": "what is the phone number of employees whose salary is in the range of 8000 and 12000?", "sql": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000"}, {"query": "Return the phone numbers of employees with salaries between 8000 and 12000.", "sql": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000"}, {"query": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.", "sql": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40"}, {"query": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.", "sql": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40"}, {"query": "What are the full name (first and last name) and salary for all employees who does not have any value for commission?", "sql": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\""}, {"query": "Return the full names and salaries of employees with null commissions.", "sql": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\""}, {"query": "Display the first and last name, and salary for those employees whose first name is ending with the letter m.", "sql": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'"}, {"query": "Return the full names and salaries for employees with first names that end with the letter m.", "sql": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'"}, {"query": "Find job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009.", "sql": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'"}, {"query": "What are the job ids and dates of hire for employees hired after November 5th, 2007 and before July 5th, 2009?", "sql": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'"}, {"query": "What are the first and last name for those employees who works either in department 70 or 90?", "sql": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90"}, {"query": "What are the full names of employees who with in department 70 or 90?", "sql": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90"}, {"query": "Find the salary and manager number for those employees who is working under a manager.", "sql": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\""}, {"query": "What are the salaries and manager ids for employees who have managers?", "sql": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\""}, {"query": "display all the details from Employees table for those employees who was hired before 2002-06-21.", "sql": "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'"}, {"query": "What is all the information about employees hired before June 21, 2002?", "sql": "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'"}, {"query": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.", "sql": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC"}, {"query": "What is all the information about employees with D or S in their first name, ordered by salary descending?", "sql": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC"}, {"query": "display those employees who joined after 7th September, 1987.", "sql": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'"}, {"query": "Which employees were hired after September 7th, 1987?", "sql": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'"}, {"query": "display the job title of jobs which minimum salary is greater than 9000.", "sql": "SELECT job_title FROM jobs WHERE min_salary  >  9000"}, {"query": "Which job titles correspond to jobs with salaries over 9000?", "sql": "SELECT job_title FROM jobs WHERE min_salary  >  9000"}, {"query": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.", "sql": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000"}, {"query": "What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000?", "sql": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000"}, {"query": "display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50.", "sql": "SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50"}, {"query": "What are the emails of employees with null commission, salary between 7000 and 12000, and who work in department 50?", "sql": "SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50"}, {"query": "display the employee ID for each employee and the date on which he ended his previous job.", "sql": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id"}, {"query": "What are the employee ids for each employee and final dates of employment at their last job?", "sql": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id"}, {"query": "display those departments where more than ten employees work who got a commission percentage.", "sql": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10"}, {"query": "What are the department ids for which more than 10 employees had a commission?", "sql": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10"}, {"query": "Find the ids of the departments where any manager is managing 4 or more employees.", "sql": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4"}, {"query": "What are department ids for departments with managers managing more than 3 employees?", "sql": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4"}, {"query": "display the average salary of employees for each department who gets a commission percentage.", "sql": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id"}, {"query": "What is the average salary of employees who have a commission percentage that is not null?", "sql": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id"}, {"query": "display the country ID and number of cities for each country.", "sql": "SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id"}, {"query": "Give the country id and corresponding count of cities in each country.", "sql": "SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id"}, {"query": "display job ID for those jobs that were done by two or more for more than 300 days.", "sql": "SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2"}, {"query": "What are the job ids for jobs done more than once for a period of more than 300 days?", "sql": "SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2"}, {"query": "display the ID for those employees who did two or more jobs in the past.", "sql": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2"}, {"query": "What are the employee ids for employees who have held two or more jobs?", "sql": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2"}, {"query": "Find employee with ID and name of the country presently where (s)he is working.", "sql": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id"}, {"query": "What are all the employee ids and the names of the countries in which they work?", "sql": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id"}, {"query": "display the department name and number of employees in each of the department.", "sql": "SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name"}, {"query": "Give the name of each department and the number of employees in each.", "sql": "SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name"}, {"query": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?", "sql": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000"}, {"query": "What is all the job history info done by employees earning a salary greater than or equal to 12000?", "sql": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000"}, {"query": "display job title and average salary of employees.", "sql": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title"}, {"query": "What is the average salary for each job title?", "sql": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title"}, {"query": "What is the full name ( first name and last name ) for those employees who gets more salary than the employee whose id is 163?", "sql": "SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )"}, {"query": "Provide the full names of employees earning more than the employee with id 163.", "sql": "SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )"}, {"query": "return the smallest salary for every departments.", "sql": "SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id"}, {"query": "What is the minimum salary in each department?", "sql": "SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id"}, {"query": "Find the first name and last name and department id for those employees who earn such amount of salary which is the smallest salary of any of the departments.", "sql": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)"}, {"query": "What are the full names and department ids for the lowest paid employees across all departments.", "sql": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)"}, {"query": "Find the employee id for all employees who earn more than the average salary.", "sql": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)"}, {"query": "What are the employee ids for employees who make more than the average?", "sql": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)"}, {"query": "display the employee id and salary of all employees who report to Payam (first name).", "sql": "SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )"}, {"query": "What are the employee ids of employees who report to Payam, and what are their salaries?", "sql": "SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )"}, {"query": "find the name of all departments that do actually have one or more employees assigned to them.", "sql": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id"}, {"query": "What are the names of departments that have at least one employee.", "sql": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id"}, {"query": "get the details of employees who manage a department.", "sql": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id"}, {"query": "What is all the information regarding employees who are managers?", "sql": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id"}, {"query": "display all the information about the department Marketing.", "sql": "SELECT * FROM  departments WHERE department_name  =  'Marketing'"}, {"query": "What is all the information about the Marketing department?", "sql": "SELECT * FROM  departments WHERE department_name  =  'Marketing'"}, {"query": "display the ID for those employees who did two or more jobs in the past.", "sql": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2"}, {"query": "What are the employee ids for those who had two or more jobs.", "sql": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2"}, {"query": "What are the unique ids of those departments where any manager is managing 4 or more employees.", "sql": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4"}, {"query": "Give the distinct department ids of departments in which a manager is in charge of 4 or more employees?", "sql": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4"}, {"query": "Find the job ID for those jobs which average salary is above 8000.", "sql": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000"}, {"query": "What are the job ids corresponding to jobs with average salary above 8000?", "sql": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000"}, {"query": "display the employee ID and job name for all those jobs in department 80.", "sql": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80"}, {"query": "what are the employee ids and job titles for employees in department 80?", "sql": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80"}, {"query": "What is the first name and job id for all employees in the Finance department?", "sql": "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'"}, {"query": "Give the first name and job id for all employees in the Finance department.", "sql": "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'"}, {"query": "display all the information of the employees whose salary if within the range of smallest salary and 2500.", "sql": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500"}, {"query": "What is all the information regarding employees with salaries above the minimum and under 2500?", "sql": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500"}, {"query": "Find the ids of the employees who does not work in those departments where some employees works whose manager id within the range 100 and 200.", "sql": "SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, {"query": "What are the ids for employees who do not work in departments with managers that have ids between 100 and 200?", "sql": "SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"}, {"query": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara.", "sql": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")"}, {"query": "What are the full names and hire dates for employees in the same department as someone with the first name Clara?", "sql": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")"}, {"query": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara excluding Clara.", "sql": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\""}, {"query": "What are the full names and hire dates for employees in the same department as someone with the first name Clara, not including Clara?", "sql": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\""}, {"query": "display the employee number and name( first name and last name ) for all employees who work in a department with any employee whose name contains a \u2019T\u2019.", "sql": "SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )"}, {"query": "What are the ids and full names for employees who work in a department that has someone with a first name that contains the letter T?", "sql": "SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )"}, {"query": "display the employee number, name( first name and last name ), and salary for all employees who earn more than the average salary and who work in a department with any employee with a 'J' in their first name.", "sql": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')"}, {"query": "What are the ids, full names, and salaries for employees making more than average and who work in a department with employees who have the letter J in their first name?", "sql": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')"}, {"query": "display the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN.", "sql": "SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )"}, {"query": "What are the employee ids and job ids for employees who make less than the lowest earning employee with title MK_MAN?", "sql": "SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )"}, {"query": "display the employee number, name( first name and last name ) and job title for all employees whose salary is more than any salary of those employees whose job title is PU_MAN.", "sql": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )"}, {"query": "What are the employee ids, full names, and job ids for employees who make more than the highest earning employee with title PU_MAN?", "sql": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )"}, {"query": "display the department id and the total salary for those departments which contains at least two employees.", "sql": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2"}, {"query": "What are total salaries and department id for each department that has more than 2 employees?", "sql": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2"}, {"query": "display all the information of those employees who did not have any job in the past.", "sql": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"}, {"query": "What is all the information about employees who have never had a job in the past?", "sql": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"}, {"query": "display the department ID, full name (first and last name), salary for those employees who is highest salary in every department.", "sql": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id"}, {"query": "What are the department ids, full names, and salaries for employees who make the most in their departments?", "sql": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id"}, {"query": "display the first and last name, department, city, and state province for each employee.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id"}, {"query": "What are the full names, departments, cities, and state provinces for each employee?", "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id"}, {"query": "display those employees who contain a letter z to their first name and also display their last name, city.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'"}, {"query": "What are the full names and cities of employees who have the letter Z in their first names?", "sql": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'"}, {"query": "display the department name, city, and state province for each department.", "sql": "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id"}, {"query": "What are the department names, cities, and state provinces for each department?", "sql": "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id"}, {"query": "display the full name (first and last name ) of employee with ID and name of the country presently where (s)he is working.", "sql": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id"}, {"query": "What the full names, ids of each employee and the name of the country they are in?", "sql": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id"}, {"query": "display the department name and number of employees in each of the department.", "sql": "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name"}, {"query": "What are the department names and how many employees work in each of them?", "sql": "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name"}, {"query": "display the full name (first and last name), and salary of those employees who working in any department located in London.", "sql": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'"}, {"query": "What are full names and salaries of employees working in the city of London?", "sql": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'"}, {"query": "What is the name of the song that was released in the most recent year?", "sql": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1"}, {"query": "What is the name of the song that was released most recently?", "sql": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1"}, {"query": "What is the id of the longest song?", "sql": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1"}, {"query": "Find the id of the song that lasts the longest.", "sql": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1"}, {"query": "Find the names of all English songs.", "sql": "SELECT song_name FROM song WHERE languages  =  \"english\""}, {"query": "What are the names of all songs in English?", "sql": "SELECT song_name FROM song WHERE languages  =  \"english\""}, {"query": "What are the id of songs whose format is mp3.", "sql": "SELECT f_id FROM files WHERE formats  =  \"mp3\""}, {"query": "What are the id of all the files in mp3 format?", "sql": "SELECT f_id FROM files WHERE formats  =  \"mp3\""}, {"query": "List the name and country of origin for all singers who have produced songs with rating above 9.", "sql": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9"}, {"query": "What are the different names and countries of origins for all artists whose song ratings are above 9?", "sql": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9"}, {"query": "List the file size and format for all songs that have resolution lower than 800.", "sql": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800"}, {"query": "What are the file sizes and formats for all songs with a resolution lower than 800?", "sql": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800"}, {"query": "What is the name of the artist who produced the shortest song?", "sql": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1"}, {"query": "What are the names of the artists who sang the shortest song?", "sql": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1"}, {"query": "What are the names and countries of origin for the artists who produced the top three highly rated songs.", "sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3"}, {"query": "What are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from?", "sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3"}, {"query": "How many songs have 4 minute duration?", "sql": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\""}, {"query": "What is the count of the songs that last approximately 4 minutes?", "sql": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\""}, {"query": "How many artists are from Bangladesh?", "sql": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\""}, {"query": "How many Bangladeshi artists are listed?", "sql": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\""}, {"query": "What is the average rating of songs produced by female artists?", "sql": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\""}, {"query": "How many songs, on average, are sung by a female artist?", "sql": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\""}, {"query": "What is the most popular file format?", "sql": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1"}, {"query": "Find the file format that is used by the most files.", "sql": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1"}, {"query": "Find the names of the artists who are from UK and have produced English songs.", "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\""}, {"query": "What are the names of the artists that are from the UK and sang songs in English?", "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\""}, {"query": "Find the id of songs that are available in mp4 format and have resolution lower than 1000.", "sql": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000"}, {"query": "What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000?", "sql": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000"}, {"query": "What is the country of origin of the artist who is female and produced a song in Bangla?", "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\""}, {"query": "What countries are the female artists who sung in the language Bangla from?", "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\""}, {"query": "What is the average duration of songs that have mp3 format and resolution below 800?", "sql": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800"}, {"query": "What is the average song duration for the songs that are in mp3 format and whose resolution below 800?", "sql": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800"}, {"query": "What is the number of artists for each gender?", "sql": "SELECT count(*) ,  gender FROM artist GROUP BY gender"}, {"query": "How many artists are male and how many are female?", "sql": "SELECT count(*) ,  gender FROM artist GROUP BY gender"}, {"query": "What is the average rating of songs for each language?", "sql": "SELECT avg(rating) ,  languages FROM song GROUP BY languages"}, {"query": "What is the average song rating for each language?", "sql": "SELECT avg(rating) ,  languages FROM song GROUP BY languages"}, {"query": "Return the gender and name of artist who produced the song with the lowest resolution.", "sql": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1"}, {"query": "What is the gender and name of the artist who sang the song with the smallest resolution?", "sql": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1"}, {"query": "For each file format, return the number of artists who released songs in that format.", "sql": "SELECT count(*) ,  formats FROM files GROUP BY formats"}, {"query": "How many songs were released for each format?", "sql": "SELECT count(*) ,  formats FROM files GROUP BY formats"}, {"query": "Find the distinct names of all songs that have a higher resolution than some songs in English.", "sql": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")"}, {"query": "What are the different names for all songs that have a higher resolution than English songs?", "sql": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")"}, {"query": "What are the names of all songs that have a lower rating than some song of blues genre?", "sql": "SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")"}, {"query": "What are the names of the songs that have a lower rating than at least one blues song?", "sql": "SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")"}, {"query": "What is the name and country of origin of the artist who released a song that has \"love\" in its title?", "sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\""}, {"query": "What are the names of the artists who released a song that has the word love in its title, and where are the artists from?", "sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\""}, {"query": "List the name and gender for all artists who released songs in March.", "sql": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\""}, {"query": "What are the names and genders of all artists who released songs in the month of March?", "sql": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\""}, {"query": "List the names of all genres in alphabetical oder, together with its ratings.", "sql": "SELECT g_name ,  rating FROM genre ORDER BY g_name"}, {"query": "What are the names of all genres in alphabetical order, combined with its ratings?", "sql": "SELECT g_name ,  rating FROM genre ORDER BY g_name"}, {"query": "Give me a list of the names of all songs ordered by their resolution.", "sql": "SELECT song_name FROM song ORDER BY resolution"}, {"query": "What are the names of all songs that are ordered by their resolution numbers?", "sql": "SELECT song_name FROM song ORDER BY resolution"}, {"query": "What are the ids of songs that are available in either mp4 format or have resolution above 720?", "sql": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720"}, {"query": "What are the ids of all songs that are available on mp4 or have a higher resolution than 720?", "sql": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720"}, {"query": "List the names of all songs that have 4 minute duration or are in English.", "sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\""}, {"query": "What are the names of all songs that are approximately 4 minutes long or are in English?", "sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\""}, {"query": "What is the language used most often in the songs?", "sql": "SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the languages that are used most often in songs?", "sql": "SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the language that was used most often in songs with resolution above 500?", "sql": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name of the artist, for each language, that has the most songs with a higher resolution than 500?", "sql": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the names of artists who are Male and are from UK?", "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\""}, {"query": "What are the names of all male British artists?", "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\""}, {"query": "Find the names of songs whose genre is modern or language is English.", "sql": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\""}, {"query": "What are the names of the songs that are modern or sung in English?", "sql": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\""}, {"query": "Return the names of songs for which format is mp3 and resolution is below 1000.", "sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000"}, {"query": "What are the names of all songs that are in mp3 format and have a resolution lower than 1000?", "sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000"}, {"query": "Return the names of singers who are from UK and released an English song.", "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\""}, {"query": "What are the names of all singers that are from the UK and released a song in English?", "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\""}, {"query": "What are the average rating and resolution of songs that are in Bangla?", "sql": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\""}, {"query": "What is the average rating and resolution of all bangla songs?", "sql": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\""}, {"query": "What are the maximum and minimum resolution of songs whose duration is 3 minutes?", "sql": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\""}, {"query": "What is the maximum and minimum resolution of all songs that are approximately 3 minutes long?", "sql": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\""}, {"query": "What are the maximum duration and resolution of songs grouped and ordered by languages?", "sql": "SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages"}, {"query": "What are the maximum duration and resolution of all songs, for each language, ordered alphabetically by language?", "sql": "SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages"}, {"query": "What are the shortest duration and lowest rating of songs grouped by genre and ordered by genre?", "sql": "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is"}, {"query": "What is the shortest and most poorly rated song for each genre, ordered alphabetically by genre?", "sql": "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is"}, {"query": "Find the names and number of works of all artists who have at least one English songs.", "sql": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1"}, {"query": "What are the names and number of works for all artists who have sung at least one song in English?", "sql": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1"}, {"query": "Find the name and country of origin for all artists who have release at least one song of resolution above 900.", "sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1"}, {"query": "What is the name and country of origin for each artist who has released a song with a resolution higher than 900?", "sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1"}, {"query": "Find the names and number of works of the three artists who have produced the most songs.", "sql": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3"}, {"query": "What are the names of the three artists who have produced the most songs, and how many works did they produce?", "sql": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3"}, {"query": "Find the country of origin for the artist who made the least number of songs?", "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1"}, {"query": "What country is the artist who made the fewest songs from?", "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1"}, {"query": "What are the names of the songs whose rating is below the rating of all songs in English?", "sql": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')"}, {"query": "What are the song names for every song whose rating is less than the minimum rating for English songs?", "sql": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')"}, {"query": "What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?", "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)"}, {"query": "What is the id of every song that has a resolution higher than that of a song with a rating below 8?", "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)"}, {"query": "What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre?", "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")"}, {"query": "What are the ids of all songs that have higher resolution of the average resolution in the modern genre?", "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")"}, {"query": "Find the top 3 artists who have the largest number of songs works whose language is Bangla.", "sql": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3"}, {"query": "What are the top 3 artists with the largest number of songs in the language Bangla?", "sql": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3"}, {"query": "List the id, genre and artist name of English songs ordered by rating.", "sql": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating"}, {"query": "What is the id, genre, and name of the artist for every English song ordered by ascending rating?", "sql": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating"}, {"query": "List the duration, file size and format of songs whose genre is pop, ordered by title?", "sql": "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"pop\" ORDER BY T2.song_name"}, {"query": "What is the duration, file size, and song format for every pop song, ordered by title alphabetically?", "sql": "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"pop\" ORDER BY T2.song_name"}, {"query": "Find the names of the artists who have produced English songs but have never received rating higher than 8.", "sql": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8"}, {"query": "What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8?", "sql": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8"}, {"query": "Find the names of the artists who are from Bangladesh and have never received rating higher than 7.", "sql": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7"}, {"query": "What are the names of the different artists from Bangladesh who never received a rating higher than a 7?", "sql": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7"}, {"query": "what is the full name and id of the college with the largest number of baseball players?", "sql": "SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;"}, {"query": "Find the full name and id of the college that has the most baseball players.", "sql": "SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;"}, {"query": "What is average salary of the players in the team named 'Boston Red Stockings' ?", "sql": "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'"}, {"query": "Compute the average salary of the players in the team called 'Boston Red Stockings'.", "sql": "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'"}, {"query": "What are first and last names of players participating in all star game in 1998?", "sql": "SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998"}, {"query": "List the first and last name for players who participated in all star game in 1998.", "sql": "SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998"}, {"query": "What are the first name, last name and id of the player with the most all star game experiences? Also list the count.", "sql": "SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;"}, {"query": "Which player has the most all star game experiences? Give me the first name, last name and id of the player, as well as the number of times the player participated in all star game.", "sql": "SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;"}, {"query": "How many players enter hall of fame each year?", "sql": "SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid;"}, {"query": "Count the number of players who enter hall of fame for each year.", "sql": "SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid;"}, {"query": "What is the average number of attendance at home games for each year?", "sql": "SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;"}, {"query": "For each year, return the year and the average number of attendance at home games.", "sql": "SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;"}, {"query": "In 2014, what are the id and rank of the team that has the largest average number of attendance?", "sql": "SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;"}, {"query": "Find the id and rank of the team that has the highest average attendance rate in 2014.", "sql": "SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;"}, {"query": "What are the manager's first name, last name and id who won the most manager award?", "sql": "SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;"}, {"query": "Which manager won the most manager award? Give me the manager's first name, last name and id.", "sql": "SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;"}, {"query": "How many parks are there in the state of NY?", "sql": "SELECT count(*) FROM park WHERE state  =  'NY';"}, {"query": "Show me the number of parks the state of NY has.", "sql": "SELECT count(*) FROM park WHERE state  =  'NY';"}, {"query": "Which 3 players won the most player awards? List their full name and id.", "sql": "SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;"}, {"query": "Find the first name, last name and id for the top three players won the most player awards.", "sql": "SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;"}, {"query": "List three countries which are the origins of the least players.", "sql": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;"}, {"query": "What are the three countries that the least players are from?", "sql": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;"}, {"query": "Find all the players' first name and last name who have empty death record.", "sql": "SELECT name_first ,  name_last FROM player WHERE death_year = '';"}, {"query": "What are the first name and last name of the players whose death record is empty?", "sql": "SELECT name_first ,  name_last FROM player WHERE death_year = '';"}, {"query": "How many players born in USA are right-handed batters? That is, have the batter value 'R'.", "sql": "SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R';"}, {"query": "Count the number of players who were born in USA and have bats information 'R'.", "sql": "SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R';"}, {"query": "What is the average height of the players from the college named 'Yale University'?", "sql": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';"}, {"query": "Find the average height of the players who belong to the college called 'Yale University'.", "sql": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';"}, {"query": "What is the highest salary among each team? List the team name, id and maximum salary.", "sql": "SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;"}, {"query": "For each team, return the team name, id and the maximum salary among the team.", "sql": "SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;"}, {"query": "What are the name and id of the team offering the lowest average salary?", "sql": "SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1;"}, {"query": "Which team offers the lowest average salary? Give me the name and id of the team.", "sql": "SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1;"}, {"query": "Find the players' first name and last name who won award both in 1960 and in 1961.", "sql": "SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961"}, {"query": "Which players won awards in both 1960 and 1961? Return their first names and last names.", "sql": "SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961"}, {"query": "List players' first name and last name who have weight greater than 220 or height shorter than 75.", "sql": "SELECT name_first ,  name_last FROM player WHERE weight  >  220 OR height  <  75"}, {"query": "What are the first name and last name of the players who have weight above 220 or height below 75?", "sql": "SELECT name_first ,  name_last FROM player WHERE weight  >  220 OR height  <  75"}, {"query": "List the maximum scores of the team Boston Red Stockings when the team won in postseason?", "sql": "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';"}, {"query": "What are the maximum scores the team Boston Red Stockings got when the team won in postseason?", "sql": "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';"}, {"query": "How many times did Boston Red Stockings lose in 2009 postseason?", "sql": "SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009;"}, {"query": "Count the number of times the team \"Boston Red Stockings\" lost in 2009 postseason.", "sql": "SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009;"}, {"query": "What are the name and id of the team with the most victories in 2008 postseason?", "sql": "SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;"}, {"query": "Find the name and id of the team that won the most times in 2008 postseason.", "sql": "SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;"}, {"query": "What is the number of wins the team Boston Red Stockings got in the postseasons each year in history?", "sql": "SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year"}, {"query": "For each year, return the year and the number of times the team Boston Red Stockings won in the postseasons.", "sql": "SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year"}, {"query": "What is the total number of postseason games that team Boston Red Stockings participated in?", "sql": "SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' );"}, {"query": "How many times in total did the team Boston Red Stockings participate in postseason games?", "sql": "SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' );"}, {"query": "How many games in 1885 postseason resulted in ties (that is, the value of \"ties\" is '1')?", "sql": "SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;"}, {"query": "Find the number of tied games (the value of \"ties\" is '1') in 1885 postseason.", "sql": "SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;"}, {"query": "What is the total salary paid by team Boston Red Stockings in 2010?", "sql": "SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010"}, {"query": "What is the total salary expenses of team Boston Red Stockings in 2010?", "sql": "SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010"}, {"query": "How many players were in the team Boston Red Stockings in 2000?", "sql": "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000"}, {"query": "How many players did Boston Red Stockings have in 2000?", "sql": "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000"}, {"query": "List the 3 highest salaries of the players in 2001?", "sql": "SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;"}, {"query": "How much salary did the top 3 well-paid players get in 2001?", "sql": "SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;"}, {"query": "What were all the salary values of players in 2010 and 2001?", "sql": "SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001"}, {"query": "List all the salary values players received in 2010 and 2001.", "sql": "SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001"}, {"query": "In which year did the least people enter hall of fame?", "sql": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;"}, {"query": "Find the year in which the least people enter hall of fame.", "sql": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;"}, {"query": "How many parks are there in Atlanta city?", "sql": "SELECT count(*) FROM park WHERE city = 'Atlanta';"}, {"query": "How many parks does Atlanta city have?", "sql": "SELECT count(*) FROM park WHERE city = 'Atlanta';"}, {"query": "How many games were played in park \"Columbia Park\" in 1907?", "sql": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';"}, {"query": "Count the number of games taken place in park \"Columbia Park\" in 1907.", "sql": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';"}, {"query": "How many games were played in city Atlanta in 2000?", "sql": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';"}, {"query": "Find the number of games taken place in city Atlanta in 2000.", "sql": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';"}, {"query": "What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?", "sql": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;"}, {"query": "How many games in total did team Boston Red Stockings attend from 2000 to 2010?", "sql": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;"}, {"query": "How much did the the player with first name Len and last name Barker earn between 1985 to 1990 in total?", "sql": "SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;"}, {"query": "Compute the total salary that the player with first name Len and last name Barker received between 1985 to 1990.", "sql": "SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;"}, {"query": "List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007.", "sql": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'"}, {"query": "What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007?", "sql": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'"}, {"query": "How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?", "sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;"}, {"query": "Count the total number of games the team Boston Red Stockings attended from 1990 to 2000.", "sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;"}, {"query": "Which team had the least number of attendances in home games in 1980?", "sql": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;"}, {"query": "Find the team that attended the least number of home games in 1980.", "sql": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;"}, {"query": "List the names of states that have more than 2 parks.", "sql": "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;"}, {"query": "Which states have more than 2 parks?", "sql": "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;"}, {"query": "How many team franchises are active, with active value 'Y'?", "sql": "SELECT count(*) FROM team_franchise WHERE active = 'Y';"}, {"query": "Find the number of team franchises that are active (have 'Y' as \"active\" information).", "sql": "SELECT count(*) FROM team_franchise WHERE active = 'Y';"}, {"query": "Which cities have 2 to 4 parks?", "sql": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;"}, {"query": "Find all the cities that have 2 to 4 parks.", "sql": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;"}, {"query": "Which park had most attendances in 2008?", "sql": "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;"}, {"query": "Which park did the most people attend in 2008?", "sql": "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;"}, {"query": "How many camera lenses have a focal length longer than 15 mm?", "sql": "SELECT count(*) FROM camera_lens WHERE focal_length_mm  >  15"}, {"query": "Find the brand and name for each camera lens, and sort in descending order of maximum aperture.", "sql": "SELECT brand ,  name FROM camera_lens ORDER BY max_aperture DESC"}, {"query": "List the id, color scheme, and name for all the photos.", "sql": "SELECT id ,  color ,  name FROM photos"}, {"query": "What are the maximum and average height of the mountains?", "sql": "SELECT max(height) ,  avg(height) FROM mountain"}, {"query": "What are the average prominence of the mountains in country 'Morocco'?", "sql": "SELECT avg(prominence) FROM mountain WHERE country  =  'Morocco'"}, {"query": "What are the name, height and prominence of mountains which do not belong to the range 'Aberdare Range'?", "sql": "SELECT name ,  height ,  prominence FROM mountain WHERE range != 'Aberdare Range'"}, {"query": "What are the id and name of the photos for mountains?", "sql": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.height  >  4000"}, {"query": "What are the id and name of the mountains that have at least 2 photos?", "sql": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  2"}, {"query": "What are the names of the cameras that have taken picture of the most mountains?", "sql": "SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the names of photos taken with the lens brand 'Sigma' or 'Olympus'?", "sql": "SELECT T1.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id  =  T1.id WHERE T1.brand  =  'Sigma' OR T1.brand  =  'Olympus'"}, {"query": "How many different kinds of lens brands are there?", "sql": "SELECT count(DISTINCT brand) FROM camera_lens"}, {"query": "How many camera lenses are not used in taking any photos?", "sql": "SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )"}, {"query": "How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?", "sql": "SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'"}, {"query": "List the brands of lenses that took both a picture of mountains with range 'Toubkal Atlas' and a picture of mountains with range 'Lasta Massif'", "sql": "SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Lasta Massif'"}, {"query": "Show the name and prominence of the mountains whose picture is not taken by a lens of brand 'Sigma'.", "sql": "SELECT name ,  prominence FROM mountain EXCEPT SELECT T1.name ,  T1.prominence FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T3.brand  =  'Sigma'"}, {"query": "List the camera lens names containing substring \"Digital\".", "sql": "SELECT name FROM camera_lens WHERE name LIKE \"%Digital%\""}, {"query": "What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos.", "sql": "SELECT T1.name ,  count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id  =  T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)"}, {"query": "Find the names of channels that are not owned by CCTV.", "sql": "SELECT name FROM channel WHERE OWNER != 'CCTV'"}, {"query": "Which channels are not owned by CCTV? Give me the channel names.", "sql": "SELECT name FROM channel WHERE OWNER != 'CCTV'"}, {"query": "List all channel names ordered by their rating in percent from big to small.", "sql": "SELECT name FROM channel ORDER BY rating_in_percent DESC"}, {"query": "Give me a list of all the channel names sorted by the channel rating in descending order.", "sql": "SELECT name FROM channel ORDER BY rating_in_percent DESC"}, {"query": "What is the owner of the channel that has the highest rating ratio?", "sql": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1"}, {"query": "Show me the owner of the channel with the highest rating.", "sql": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1"}, {"query": "how many programs are there?", "sql": "SELECT count(*) FROM program"}, {"query": "Count the number of programs.", "sql": "SELECT count(*) FROM program"}, {"query": "list all the names of programs, ordering by launch time.", "sql": "SELECT name FROM program ORDER BY launch"}, {"query": "What is the list of program names, sorted by the order of launch date?", "sql": "SELECT name FROM program ORDER BY launch"}, {"query": "List the name, origin and owner of each program.", "sql": "SELECT name ,  origin ,  OWNER FROM program"}, {"query": "What are the name, origin and owner of each program?", "sql": "SELECT name ,  origin ,  OWNER FROM program"}, {"query": "find the name of the program that was launched most recently.", "sql": "SELECT name FROM program ORDER BY launch DESC LIMIT 1"}, {"query": "Which program was launched most recently? Return the program name.", "sql": "SELECT name FROM program ORDER BY launch DESC LIMIT 1"}, {"query": "find the total percentage share of all channels owned by CCTV.", "sql": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER  =  'CCTV'"}, {"query": "What is the total share (in percent) of all the channels owned by CCTV?", "sql": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER  =  'CCTV'"}, {"query": "Find the names of the channels that are broadcast in the morning.", "sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'"}, {"query": "Which channels are broadcast in the morning? Give me the channel names.", "sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'"}, {"query": "what are the names of the channels that broadcast in both morning and night?", "sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'"}, {"query": "Which channels broadcast both in the morning and at night? Give me the channel names.", "sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'"}, {"query": "how many programs are broadcast in each time section of the day?", "sql": "SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day"}, {"query": "Count the number of programs broadcast for each time section of a day.", "sql": "SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day"}, {"query": "find the number of different programs that are broadcast during night time.", "sql": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'"}, {"query": "How many distinct programs are broadcast at \"Night\" time?", "sql": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'"}, {"query": "Find the names of programs that are never broadcasted in the morning.", "sql": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\""}, {"query": "Which programs are never broadcasted in the morning? Give me the names of the programs.", "sql": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\""}, {"query": "find the program owners that have some programs in both morning and night time.", "sql": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\""}, {"query": "Who are the owners of the programs that broadcast both in the morning and at night?", "sql": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\""}, {"query": "List all program origins in the alphabetical order.", "sql": "SELECT origin FROM program ORDER BY origin"}, {"query": "What is the list of program origins ordered alphabetically?", "sql": "SELECT origin FROM program ORDER BY origin"}, {"query": "what is the number of different channel owners?", "sql": "SELECT count(DISTINCT OWNER) FROM channel"}, {"query": "Count the number of distinct channel owners.", "sql": "SELECT count(DISTINCT OWNER) FROM channel"}, {"query": "find the names of programs whose origin is not in Beijing.", "sql": "SELECT name FROM program WHERE origin != 'Beijing'"}, {"query": "Which programs' origins are not \"Beijing\"? Give me the program names.", "sql": "SELECT name FROM program WHERE origin != 'Beijing'"}, {"query": "What are the names of the channels owned by CCTV or HBS?", "sql": "SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'"}, {"query": "List the names of all the channels owned by either CCTV or HBS", "sql": "SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'"}, {"query": "Find the total rating ratio for each channel owner.", "sql": "SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER"}, {"query": "What is the total rating of channel for each channel owner?", "sql": "SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER"}, {"query": "Find the name of the program that is broadcast most frequently.", "sql": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which program is broadcast most frequently? Give me the program name.", "sql": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "How many courses are there in total?", "sql": "SELECT count(*) FROM COURSES"}, {"query": "Find the total number of courses offered.", "sql": "SELECT count(*) FROM COURSES"}, {"query": "What are the descriptions of the courses with name \"database\"?", "sql": "SELECT course_description FROM COURSES WHERE course_name  =  \"database\""}, {"query": "Return the description for the courses named \"database\".", "sql": "SELECT course_description FROM COURSES WHERE course_name  =  \"database\""}, {"query": "What are the addresses of the course authors or tutors with personal name \"Cathrine\"", "sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\""}, {"query": "Return the addresses of the course authors or tutors whose personal name is \"Cathrine\".", "sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\""}, {"query": "List the addresses of all the course authors or tutors.", "sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors"}, {"query": "What is the address of each course author or tutor?", "sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors"}, {"query": "List all the login names and family names of course author and tutors.", "sql": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors"}, {"query": "What are the login names and family names of course author and tutors?", "sql": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors"}, {"query": "List all the dates of enrollment and completion of students.", "sql": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment"}, {"query": "What are all the dates of enrollment and completion in record?", "sql": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment"}, {"query": "How many distinct students are enrolled in courses?", "sql": "SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment"}, {"query": "Find the number of distinct students enrolled in courses.", "sql": "SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment"}, {"query": "How many distinct courses are enrolled in by students?", "sql": "SELECT count(course_id) FROM Student_Course_Enrolment"}, {"query": "Find the number of distinct courses that have enrolled students.", "sql": "SELECT count(course_id) FROM Student_Course_Enrolment"}, {"query": "Find the dates of the tests taken with result \"Pass\".", "sql": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  \"Pass\""}, {"query": "Which tests have \"Pass\" results? Return the dates when the tests were taken.", "sql": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  \"Pass\""}, {"query": "How many tests have result \"Fail\"?", "sql": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\""}, {"query": "Count the number of tests with \"Fail\" result.", "sql": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\""}, {"query": "What are the login names of the students with family name \"Ward\"?", "sql": "SELECT login_name FROM Students WHERE family_name  =  \"Ward\""}, {"query": "Return the login names of the students whose family name is \"Ward\".", "sql": "SELECT login_name FROM Students WHERE family_name  =  \"Ward\""}, {"query": "What are the dates of the latest logon of the students with family name \"Jaskolski\" or \"Langosh\"?", "sql": "SELECT date_of_latest_logon FROM Students WHERE family_name  =  \"Jaskolski\" OR family_name  =  \"Langosh\""}, {"query": "Find the latest logon date of the students whose family name is \"Jaskolski\" or \"Langosh\".", "sql": "SELECT date_of_latest_logon FROM Students WHERE family_name  =  \"Jaskolski\" OR family_name  =  \"Langosh\""}, {"query": "How many students have personal names that contain the word \"son\"?", "sql": "SELECT COUNT(*) FROM Students WHERE personal_name LIKE \"%son%\""}, {"query": "Find the number of students who have the word \"son\" in their personal names.", "sql": "SELECT COUNT(*) FROM Students WHERE personal_name LIKE \"%son%\""}, {"query": "List all the subject names.", "sql": "SELECT subject_name FROM SUBJECTS"}, {"query": "What are the names of all the subjects.", "sql": "SELECT subject_name FROM SUBJECTS"}, {"query": "List all the information about course authors and tutors in alphabetical order of the personal name.", "sql": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name"}, {"query": "Sort the information about course authors and tutors in alphabetical order of the personal name.", "sql": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name"}, {"query": "List the personal names and family names of all the students in alphabetical order of family name.", "sql": "SELECT personal_name ,  family_name FROM Students ORDER BY family_name"}, {"query": "What are the personal names and family names of the students? Sort the result in alphabetical order of the family name.", "sql": "SELECT personal_name ,  family_name FROM Students ORDER BY family_name"}, {"query": "List each test result and its count in descending order of count.", "sql": "SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC"}, {"query": "For each distinct test result, find the number of students who got the result.", "sql": "SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC"}, {"query": "Find the login name of the course author that teaches the course with name \"advanced database\".", "sql": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"advanced database\""}, {"query": "Which course author teaches the \"advanced database\" course? Give me his or her login name.", "sql": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"advanced database\""}, {"query": "Find the addresses of the course authors who teach the course with name \"operating system\" or \"data structure\".", "sql": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"operating system\" OR T2.course_name  =  \"data structure\""}, {"query": "What are the addresses of the course authors who teach either \"operating system\" or \"data structure\" course.", "sql": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"operating system\" OR T2.course_name  =  \"data structure\""}, {"query": "Find the personal name, family name, and author ID of the course author that teaches the most courses.", "sql": "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What are the personal name, family name, and author ID of the course author who teaches the most courses?", "sql": "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Find the addresses and author IDs of the course authors that teach at least two courses.", "sql": "SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2"}, {"query": "Which course authors teach two or more courses? Give me their addresses and author IDs.", "sql": "SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2"}, {"query": "Find the names of courses taught by the tutor who has personal name \"Julio\".", "sql": "SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T1.personal_name  =  \"Julio\""}, {"query": "What are the names of the courses taught by the tutor whose personal name is \"Julio\"?", "sql": "SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T1.personal_name  =  \"Julio\""}, {"query": "Find the names and descriptions of courses that belong to the subject named \"Computer Science\".", "sql": "SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\""}, {"query": "What are the names and descriptions of the all courses under the \"Computer Science\" subject?", "sql": "SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\""}, {"query": "Find the subject ID, subject name, and the corresponding number of available courses for each subject.", "sql": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id"}, {"query": "What are the subject ID, subject name, and the number of available courses for each subject?", "sql": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id"}, {"query": "Find the subject ID, name of subject and the corresponding number of courses for each subject, and sort by the course count in ascending order.", "sql": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC"}, {"query": "List the subject ID, name of subject and the number of courses available for each subject in ascending order of the course counts.", "sql": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC"}, {"query": "What is the date of enrollment of the course named \"Spanish\"?", "sql": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\""}, {"query": "Find the the date of enrollment of the \"Spanish\" course.", "sql": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\""}, {"query": "What is the name of the course that has the most student enrollment?", "sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Which course is enrolled in by the most students? Give me the course name.", "sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What are the names of the courses that have exactly 1 student enrollment?", "sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1"}, {"query": "Find the names of the courses that have just one student enrollment.", "sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1"}, {"query": "What are the descriptions and names of the courses that have student enrollment bigger than 2?", "sql": "SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2"}, {"query": "Return the descriptions and names of the courses that have more than two students enrolled in.", "sql": "SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2"}, {"query": "What is the name of each course and the corresponding number of student enrollment?", "sql": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name"}, {"query": "List the name and the number of enrolled student for each course.", "sql": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name"}, {"query": "What are the enrollment dates of all the tests that have result \"Pass\"?", "sql": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\""}, {"query": "Find the enrollment date for all the tests that have \"Pass\" result.", "sql": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\""}, {"query": "What are the completion dates of all the tests that have result \"Fail\"?", "sql": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\""}, {"query": "Return the completion date for all the tests that have \"Fail\" result.", "sql": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\""}, {"query": "List the dates of enrollment and completion of the student with personal name \"Karson\".", "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\""}, {"query": "On what dates did the student whose personal name is \"Karson\" enroll in and complete the courses?", "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\""}, {"query": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".", "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\""}, {"query": "On what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses?", "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\""}, {"query": "Find the student ID and login name of the student with the most course enrollments", "sql": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What are the student ID and login name of the student who are enrolled in the most courses?", "sql": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Find the student ID and personal name of the student with at least two enrollments.", "sql": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2"}, {"query": "Which student are enrolled in at least two courses? Give me the student ID and personal name.", "sql": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2"}, {"query": "Find the student ID and middle name for all the students with at most two enrollments.", "sql": "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2"}, {"query": "What are the student IDs and middle names of the students enrolled in at most two courses?", "sql": "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2"}, {"query": "Find the personal names of students not enrolled in any course.", "sql": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id"}, {"query": "Which students not enrolled in any course? Find their personal names.", "sql": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id"}, {"query": "How many students did not have any course enrollment?", "sql": "SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)"}, {"query": "Count the number of students who did not enroll in any course.", "sql": "SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)"}, {"query": "Find the common login name of course authors and students.", "sql": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students"}, {"query": "What are the login names used both by some course authors and some students?", "sql": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students"}, {"query": "Find the common personal name of course authors and students.", "sql": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students"}, {"query": "What are the personal names used both by some course authors and some students?", "sql": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students"}, {"query": "Which claims caused more than 2 settlements or have the maximum claim value? List the date the claim was made and the claim id.", "sql": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )"}, {"query": "Find the claims that led to more than two settlements or have the maximum claim value. For each of them, return the date the claim was made and the id of the claim.", "sql": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )"}, {"query": "Which customer had at least 2 policies but did not file any claims? List the customer details and id.", "sql": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id"}, {"query": "Give me the the customer details and id for the customers who had two or more policies but did not file any claims.", "sql": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id"}, {"query": "List the method, date and amount of all the payments, in ascending order of date.", "sql": "SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC"}, {"query": "What are the method, date and amount of each payment? Sort the list in ascending order of date.", "sql": "SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC"}, {"query": "Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount.", "sql": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1"}, {"query": "Find the settlement amount of the claim with the largest claim amount. Show both the settlement amount and claim amount.", "sql": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1"}, {"query": "Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount.", "sql": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1"}, {"query": "Find the claimed amount in the claim with the least amount settled. Show both the settlement amount and claim amount.", "sql": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1"}, {"query": "Among all the claims, which claims have a claimed amount larger than the average? List the date the claim was made and the date it was settled.", "sql": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )"}, {"query": "Give me the claim date, settlement date for all the claims whose claimed amount is larger than the average.", "sql": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )"}, {"query": "Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date.", "sql": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )"}, {"query": "Return the claim start date for the claims whose claimed amount is no more than the average", "sql": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )"}, {"query": "How many settlements does each claim correspond to? List the claim id and the number of settlements.", "sql": "SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id"}, {"query": "Find the number of settlements each claim corresponds to. Show the number together with the claim id.", "sql": "SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id"}, {"query": "Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number.", "sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the claim id and claim date of the claim that incurred the most settlement count. Also tell me the count.", "sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "How many settlements were made on the claim with the most recent claim settlement date? List the number and the claim id.", "sql": "SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1"}, {"query": "Find the claim id and the number of settlements made for the claim with the most recent settlement date.", "sql": "SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1"}, {"query": "Of all the claims, what was the earliest date when any claim was made?", "sql": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1"}, {"query": "Tell me the the date when the first claim was made.", "sql": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1"}, {"query": "What is the total amount of settlement made for all the settlements?", "sql": "SELECT sum(Amount_Settled) FROM Settlements"}, {"query": "Compute the total amount of settlement across all the settlements.", "sql": "SELECT sum(Amount_Settled) FROM Settlements"}, {"query": "Who are the customers that had more than 1 policy? List the customer details and id.", "sql": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1"}, {"query": "Find the the customer details and id for the customers who had more than one policy.", "sql": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1"}, {"query": "What are the claim dates and settlement dates of all the settlements?", "sql": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements"}, {"query": "Tell me the the claim date and settlement date for each settlement case.", "sql": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements"}, {"query": "What is the most popular payment method?", "sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which payment method is used the most often?", "sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1"}, {"query": "With which kind of payment method were the least number of payments processed?", "sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1"}, {"query": "What is the payment method that were used the least often?", "sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1"}, {"query": "What is the total amount of payment?", "sql": "SELECT sum(Amount_Payment) FROM Payments"}, {"query": "Compute the total amount of payment processed.", "sql": "SELECT sum(Amount_Payment) FROM Payments"}, {"query": "What are all the distinct details of the customers?", "sql": "SELECT DISTINCT customer_details FROM Customers"}, {"query": "Return the distinct customer details.", "sql": "SELECT DISTINCT customer_details FROM Customers"}, {"query": "Which kind of policy type was chosen by the most customers?", "sql": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the policy type the most customers choose.", "sql": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1"}, {"query": "How many settlements are there in total?", "sql": "SELECT count(*) FROM Settlements"}, {"query": "Count the total number of settlements made.", "sql": "SELECT count(*) FROM Settlements"}, {"query": "Which Payments were processed with Visa? List the payment Id, the date and the amount.", "sql": "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'"}, {"query": "Give me the payment Id, the date and the amount for all the payments processed with Visa.", "sql": "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'"}, {"query": "List the details of the customers who do not have any policies.", "sql": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id"}, {"query": "Which customers do not have any policies? Find the details of these customers.", "sql": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id"}, {"query": "List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement.", "sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1"}, {"query": "Which claims had exactly one settlement? For each, tell me the the date the claim was made, the date it was settled and the amount settled.", "sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1"}, {"query": "Find the total claimed amount of all the claims.", "sql": "SELECT sum(Amount_Claimed) FROM Claims"}, {"query": "What is total amount claimed summed across all the claims?", "sql": "SELECT sum(Amount_Claimed) FROM Claims"}, {"query": "Which department has the largest number of employees?", "sql": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;"}, {"query": "Find the department with the most employees.", "sql": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;"}, {"query": "What is the employee id of the head whose department has the least number of employees?", "sql": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;"}, {"query": "Tell me the employee id of the head of the department with the least employees.", "sql": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;"}, {"query": "what is the name and position of the head whose department has least number of employees?", "sql": "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;"}, {"query": "Find the name and position of the head of the department with the least employees.", "sql": "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;"}, {"query": "What are names of patients who made an appointment?", "sql": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn"}, {"query": "List the names of patients who have made appointments.", "sql": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn"}, {"query": "what are name and phone number of patients who had more than one appointment?", "sql": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1"}, {"query": "Which patients made more than one appointment? Tell me the name and phone number of these patients.", "sql": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1"}, {"query": "Find the id of the appointment with the most recent start date?", "sql": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1"}, {"query": "What is the id of the appointment that started most recently?", "sql": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1"}, {"query": "List the name of physicians who took some appointment.", "sql": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID"}, {"query": "What are the names of all the physicians who took appointments.", "sql": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID"}, {"query": "List the name of physicians who never took any appointment.", "sql": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID"}, {"query": "Which physicians have never taken any appointment? Find their names.", "sql": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID"}, {"query": "Find the names of all physicians and their primary affiliated departments' names.", "sql": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1"}, {"query": "What are the name and primarily affiliated department name of each physician?", "sql": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1"}, {"query": "What is the name of the patient who made the most recent appointment?", "sql": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1"}, {"query": "Find the name of the patient who made the appointment with the most recent start date.", "sql": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1"}, {"query": "How many patients stay in room 112?", "sql": "SELECT count(patient) FROM stay WHERE room  =  112"}, {"query": "Count the number of patients who stayed in room 112.", "sql": "SELECT count(patient) FROM stay WHERE room  =  112"}, {"query": "How many patients' prescriptions are made by physician John Dorian?", "sql": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\""}, {"query": "Find the number of patients' prescriptions physician John Dorian made.", "sql": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\""}, {"query": "Find the name of medication used on the patient who stays in room 111?", "sql": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111"}, {"query": "What is the name of the medication used for the patient staying in room 111?", "sql": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111"}, {"query": "Find the patient who most recently stayed in room 111.", "sql": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1"}, {"query": "What is the id of the patient who stayed in room 111 most recently?", "sql": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1"}, {"query": "What is the name of the nurse has the most appointments?", "sql": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the name of the nurse who has the largest number of appointments.", "sql": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1"}, {"query": "How many patients do each physician take care of? List their names and number of patients they take care of.", "sql": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid"}, {"query": "Return the name of each physician and the number of patients he or she treats.", "sql": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid"}, {"query": "Find the name of physicians who are in charge of more than one patient.", "sql": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1"}, {"query": "Which physicians are in charge of more than one patient? Give me their names.", "sql": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1"}, {"query": "Find the number of rooms located on each block floor.", "sql": "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor"}, {"query": "How many rooms does each block floor have?", "sql": "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor"}, {"query": "Find the number of rooms for different block code?", "sql": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode"}, {"query": "How many rooms are located for each block code?", "sql": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode"}, {"query": "What are the unique block codes that have available rooms?", "sql": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0"}, {"query": "Tell me the distinct block codes where some rooms are available.", "sql": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0"}, {"query": "How many different types of rooms are there?", "sql": "SELECT count(DISTINCT roomtype) FROM room"}, {"query": "Find the number of distinct room types available.", "sql": "SELECT count(DISTINCT roomtype) FROM room"}, {"query": "What is the names of the physicians who prescribe medication Thesisin?", "sql": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\""}, {"query": "List the names of all the physicians who prescribe Thesisin as medication.", "sql": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\""}, {"query": "Find the name and position of physicians who prescribe some medication whose brand is X?", "sql": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\""}, {"query": "Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians.", "sql": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\""}, {"query": "Find the number of medications prescribed for each brand.", "sql": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand"}, {"query": "How many medications are prescribed for each brand?", "sql": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand"}, {"query": "Find the name of physicians whose position title contains the word 'senior'.", "sql": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'"}, {"query": "What are the names of the physicians who have 'senior' in their titles.", "sql": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'"}, {"query": "Find the patient who has the most recent undergoing treatment?", "sql": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1"}, {"query": "Which patient is undergoing the most recent treatment?", "sql": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1"}, {"query": "Find the names of all patients who have an undergoing treatment and are staying in room 111.", "sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111"}, {"query": "What are the names of patients who are staying in room 111 and have an undergoing treatment?", "sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111"}, {"query": "List the names of all distinct nurses ordered by alphabetical order?", "sql": "SELECT DISTINCT name FROM nurse ORDER BY name"}, {"query": "What is the alphabetically ordered list of all the distinct names of nurses?", "sql": "SELECT DISTINCT name FROM nurse ORDER BY name"}, {"query": "Find the names of nurses who are nursing an undergoing treatment.", "sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID"}, {"query": "Which nurses are in charge of patients undergoing treatments?", "sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID"}, {"query": "List the names of all distinct medications, ordered in an alphabetical order.", "sql": "SELECT DISTINCT name FROM medication ORDER BY name"}, {"query": "What is the alphabetically ordered list of all distinct medications?", "sql": "SELECT DISTINCT name FROM medication ORDER BY name"}, {"query": "What are the names of the physician who prescribed the highest dose?", "sql": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1"}, {"query": "Find the physician who prescribed the highest dose. What is his or her name?", "sql": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1"}, {"query": "List the physicians' employee ids together with their primary affiliation departments' ids.", "sql": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1"}, {"query": "What are each physician's employee id and department id primarily affiliated.", "sql": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1"}, {"query": "List the names of departments where some physicians are primarily affiliated with.", "sql": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1"}, {"query": "What are the names of departments that have primarily affiliated physicians.", "sql": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1"}, {"query": "What nurses are on call with block floor 1 and block code 1? Tell me their names.", "sql": "SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1"}, {"query": "Find the ids of the nurses who are on call in block floor 1 and block code 1.", "sql": "SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1"}, {"query": "What are the highest cost, lowest cost and average cost of procedures?", "sql": "SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures"}, {"query": "Tell me the highest, lowest, and average cost of procedures.", "sql": "SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures"}, {"query": "List the name and cost of all procedures sorted by the cost from the highest to the lowest.", "sql": "SELECT name ,  cost FROM procedures ORDER BY cost DESC"}, {"query": "Sort the list of names and costs of all procedures in the descending order of cost.", "sql": "SELECT name ,  cost FROM procedures ORDER BY cost DESC"}, {"query": "Find the three most expensive procedures.", "sql": "SELECT name FROM procedures ORDER BY cost LIMIT 3"}, {"query": "What are the three most costly procedures?", "sql": "SELECT name FROM procedures ORDER BY cost LIMIT 3"}, {"query": "Find the physicians who are trained in a procedure that costs more than 5000.", "sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000"}, {"query": "Which physicians are trained in procedures that are more expensive than 5000?", "sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000"}, {"query": "Find the physician who was trained in the most expensive procedure?", "sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1"}, {"query": "Which physician was trained in the procedure that costs the most.", "sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1"}, {"query": "What is the average cost of procedures that physician John Wen was trained in?", "sql": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\""}, {"query": "Compute the mean price of procedures physician John Wen was trained in.", "sql": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\""}, {"query": "Find the names of procedures which physician John Wen was trained in.", "sql": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\""}, {"query": "What are the names of procedures physician John Wen was trained in?", "sql": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\""}, {"query": "Find all procedures which cost more than 1000 or which physician John Wen was trained in.", "sql": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\""}, {"query": "What are the procedures that cost more than 1000 or are specialized in by physician John Wen?", "sql": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\""}, {"query": "Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?", "sql": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\""}, {"query": "Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?", "sql": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\""}, {"query": "Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in.", "sql": "SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\""}, {"query": "What procedures cost less than 5000 and have John Wen as a trained physician?", "sql": "SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\""}, {"query": "Find the name of physicians who are affiliated with both Surgery and Psychiatry departments.", "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'"}, {"query": "Which physicians are affiliated with both Surgery and Psychiatry departments? Tell me their names.", "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'"}, {"query": "Find the name of physicians who are affiliated with Surgery or Psychiatry department.", "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'"}, {"query": "Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names.", "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'"}, {"query": "Find the names of patients who are not using the medication of Procrastin-X.", "sql": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'"}, {"query": "What are the names of patients who are not taking the medication of Procrastin-X.", "sql": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'"}, {"query": "Find the number of patients who are not using the medication of Procrastin-X.", "sql": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )"}, {"query": "How many patients are not using Procrastin-X as medication?", "sql": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )"}, {"query": "How many appointments are there?", "sql": "SELECT count(*) FROM appointment"}, {"query": "Count how many appointments have been made in total.", "sql": "SELECT count(*) FROM appointment"}, {"query": "Find the names of nurses who are on call.", "sql": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse"}, {"query": "What are the distinct names of nurses on call?", "sql": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse"}, {"query": "How many ships are there?", "sql": "SELECT count(*) FROM ship"}, {"query": "What is the number of ships?", "sql": "SELECT count(*) FROM ship"}, {"query": "List the name of ships in ascending order of tonnage.", "sql": "SELECT Name FROM ship ORDER BY Tonnage ASC"}, {"query": "what are the names of the ships ordered by ascending tonnage?", "sql": "SELECT Name FROM ship ORDER BY Tonnage ASC"}, {"query": "What are the type and nationality of ships?", "sql": "SELECT TYPE ,  Nationality FROM ship"}, {"query": "What are the types and nationalities of every ship?", "sql": "SELECT TYPE ,  Nationality FROM ship"}, {"query": "List the name of ships whose nationality is not \"United States\".", "sql": "SELECT Name FROM ship WHERE Nationality != \"United States\""}, {"query": "What are the names of the ships that are not from the United States?", "sql": "SELECT Name FROM ship WHERE Nationality != \"United States\""}, {"query": "Show the name of ships whose nationality is either United States or United Kingdom.", "sql": "SELECT Name FROM ship WHERE Nationality  =  \"United States\" OR Nationality  =  \"United Kingdom\""}, {"query": "What are the names of the ships  that are from either the US or the UK?", "sql": "SELECT Name FROM ship WHERE Nationality  =  \"United States\" OR Nationality  =  \"United Kingdom\""}, {"query": "What is the name of the ship with the largest tonnage?", "sql": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1"}, {"query": "What is the ship with the largest amount of tonnage called?", "sql": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1"}, {"query": "Show different types of ships and the number of ships of each type.", "sql": "SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE"}, {"query": "For each type, how many ships are there?", "sql": "SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE"}, {"query": "Please show the most common type of ships.", "sql": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What is the most common type of ships?", "sql": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "List the nations that have more than two ships.", "sql": "SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*)  >  2"}, {"query": "What are the nations that have more than two ships?", "sql": "SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*)  >  2"}, {"query": "Show different types of ships and the average tonnage of ships of each type.", "sql": "SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE"}, {"query": "For each type, what is the average tonnage?", "sql": "SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE"}, {"query": "Show codes and fates of missions, and names of ships involved.", "sql": "SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID"}, {"query": "What are the mission codes, fates, and names of the ships involved?", "sql": "SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID"}, {"query": "Show names of ships involved in a mission launched after 1928.", "sql": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928"}, {"query": "What are the names of ships that were involved in a mission launched after 1928?", "sql": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928"}, {"query": "Show the distinct fate of missions that involve ships with nationality \"United States\"", "sql": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  \"United States\""}, {"query": "What are the different fates of the mission that involved ships from the United States?", "sql": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  \"United States\""}, {"query": "List the name of ships that are not involved in any mission", "sql": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)"}, {"query": "What are the names of the ships that are not involved in any missions?", "sql": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)"}, {"query": "Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000.", "sql": "SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000"}, {"query": "What are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000?", "sql": "SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000"}, {"query": "Find the number of students in total.", "sql": "SELECT count(*) FROM list"}, {"query": "How many students are there?", "sql": "SELECT count(*) FROM list"}, {"query": "Find the last names of students studying in room 111.", "sql": "SELECT lastname FROM list WHERE classroom  =  111"}, {"query": "What are the last names of students in room 111?", "sql": "SELECT lastname FROM list WHERE classroom  =  111"}, {"query": "Find the first names of students studying in room 108.", "sql": "SELECT firstname FROM list WHERE classroom  =  108"}, {"query": "What are the first names of students in room 108?", "sql": "SELECT firstname FROM list WHERE classroom  =  108"}, {"query": "What are the first names of students studying in room 107?", "sql": "SELECT DISTINCT firstname FROM list WHERE classroom  =  107"}, {"query": "List the first names of all the students in room 107.", "sql": "SELECT DISTINCT firstname FROM list WHERE classroom  =  107"}, {"query": "For each classroom report the grade that is taught in it. Report just the classroom number and the grade number.", "sql": "SELECT DISTINCT classroom ,  grade FROM list"}, {"query": "What are the grade number and classroom number of each class in the list?", "sql": "SELECT DISTINCT classroom ,  grade FROM list"}, {"query": "Which grade is studying in classroom 103?", "sql": "SELECT DISTINCT grade FROM list WHERE classroom  =  103"}, {"query": "Find the grade taught in classroom 103.", "sql": "SELECT DISTINCT grade FROM list WHERE classroom  =  103"}, {"query": "Find the grade studying in room 105.", "sql": "SELECT DISTINCT grade FROM list WHERE classroom  =  105"}, {"query": "Which grade is studying in room 105?", "sql": "SELECT DISTINCT grade FROM list WHERE classroom  =  105"}, {"query": "Which classrooms are used by grade 4?", "sql": "SELECT DISTINCT classroom FROM list WHERE grade  =  4"}, {"query": "Find the classrooms in which grade 4 is studying.", "sql": "SELECT DISTINCT classroom FROM list WHERE grade  =  4"}, {"query": "Which classrooms are used by grade 5?", "sql": "SELECT DISTINCT classroom FROM list WHERE grade  =  5"}, {"query": "Show me the classrooms grade 5 is using.", "sql": "SELECT DISTINCT classroom FROM list WHERE grade  =  5"}, {"query": "Find the last names of the teachers that teach fifth grade.", "sql": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5"}, {"query": "what are the last names of the teachers who teach grade 5?", "sql": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5"}, {"query": "Find the first names of the teachers that teach first grade.", "sql": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1"}, {"query": "What are the first names of the teachers who teach grade 1?", "sql": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1"}, {"query": "Find the first names of all the teachers that teach in classroom 110.", "sql": "SELECT firstname FROM teachers WHERE classroom  =  110"}, {"query": "Which teachers teach in classroom 110? Give me their first names.", "sql": "SELECT firstname FROM teachers WHERE classroom  =  110"}, {"query": "Find the last names of teachers teaching in classroom 109.", "sql": "SELECT lastname FROM teachers WHERE classroom  =  109"}, {"query": "Which teachers teach in classroom 109? Give me their last names.", "sql": "SELECT lastname FROM teachers WHERE classroom  =  109"}, {"query": "Report the first name and last name of all the teachers.", "sql": "SELECT DISTINCT firstname ,  lastname FROM teachers"}, {"query": "What are the first name and last name of all the teachers?", "sql": "SELECT DISTINCT firstname ,  lastname FROM teachers"}, {"query": "Report the first name and last name of all the students.", "sql": "SELECT DISTINCT firstname ,  lastname FROM list"}, {"query": "Show each student's first name and last name.", "sql": "SELECT DISTINCT firstname ,  lastname FROM list"}, {"query": "Find all students taught by OTHA MOYER. Output the first and last names of the students.", "sql": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\""}, {"query": "Which students study under the teacher named OTHA MOYER? Give me the first and last names of the students.", "sql": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\""}, {"query": "Find all students taught by MARROTTE KIRK. Output first and last names of students.", "sql": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"MARROTTE\" AND T2.lastname  =  \"KIRK\""}, {"query": "Which are the first and last names of the students taught by MARROTTE KIRK?", "sql": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"MARROTTE\" AND T2.lastname  =  \"KIRK\""}, {"query": "Find the first and last name of all the teachers that teach EVELINA BROMLEY.", "sql": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\""}, {"query": "Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers.", "sql": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\""}, {"query": "Find the last names of all the teachers that teach GELL TAMI.", "sql": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\""}, {"query": "What are the last names of the teachers who teach the student called GELL TAMI?", "sql": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\""}, {"query": "How many students does LORIA ONDERSMA teaches?", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\""}, {"query": "Count the number of students the teacher LORIA ONDERSMA teaches.", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\""}, {"query": "How many students does KAWA GORDON teaches?", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\""}, {"query": "Find the number of students taught by the teacher KAWA GORDON.", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\""}, {"query": "Find the number of students taught by TARRING LEIA.", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\""}, {"query": "How many students are taught by teacher TARRING LEIA?", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\""}, {"query": "How many teachers does the student named CHRISSY NABOZNY have?", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\""}, {"query": "Find the number of teachers who teach the student called CHRISSY NABOZNY.", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\""}, {"query": "How many teachers does the student named MADLOCK RAY have?", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\""}, {"query": "Find the number of teachers who teach the student called MADLOCK RAY.", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\""}, {"query": "Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names.", "sql": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\""}, {"query": "What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER?", "sql": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\""}, {"query": "Find the last names of the students in third grade that are not taught by COVIN JEROME.", "sql": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\""}, {"query": "Which students in third grade are not taught by teacher COVIN JEROME? Give me the last names of the students.", "sql": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\""}, {"query": "For each grade, report the grade, the number of classrooms in which it is taught and the total number of students in the grade.", "sql": "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade"}, {"query": "For each grade, return the grade number, the number of classrooms used for the grade, and the total number of students enrolled in the grade.", "sql": "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade"}, {"query": "For each classroom, report the classroom number and the number of grades using it.", "sql": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom"}, {"query": "For each classroom, show the classroom number and count the number of distinct grades that use the room.", "sql": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom"}, {"query": "Which classroom has the most students?", "sql": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the classroom that the most students use.", "sql": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1"}, {"query": "Report the number of students in each classroom.", "sql": "SELECT classroom ,  count(*) FROM list GROUP BY classroom"}, {"query": "For each classroom, show the classroom number and find how many students are using it.", "sql": "SELECT classroom ,  count(*) FROM list GROUP BY classroom"}, {"query": "For each grade 0 classroom, report the total number of students.", "sql": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom"}, {"query": "For each grade 0 classroom, return the classroom number and the count of students.", "sql": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom"}, {"query": "Report the total number of students for each fourth-grade classroom.", "sql": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom"}, {"query": "For each fourth-grade classroom, show the classroom number and the total number of students using it.", "sql": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom"}, {"query": "Find the name of the teacher who teaches the largest number of students.", "sql": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which teacher teaches the most students? Give me the first name and last name of the teacher.", "sql": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the number of students in one classroom.", "sql": "SELECT count(*) ,  classroom FROM list GROUP BY classroom"}, {"query": "How many students does one classroom have?", "sql": "SELECT count(*) ,  classroom FROM list GROUP BY classroom"}, {"query": "How many companies are headquartered in the US?", "sql": "SELECT count(*) FROM company WHERE Headquarters  =  'USA'"}, {"query": "List the names of companies by ascending number of sales.", "sql": "SELECT Name FROM company ORDER BY Sales_in_Billion ASC"}, {"query": "What are the headquarters and industries of all companies?", "sql": "SELECT Headquarters ,  Industry FROM company"}, {"query": "Show the names of companies in the banking or retailing industry?", "sql": "SELECT Name FROM company WHERE Industry  =  \"Banking\" OR Industry  =  \"Retailing\""}, {"query": "What is the maximum and minimum market value of companies?", "sql": "SELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company"}, {"query": "What is the headquarter of the company with the largest sales?", "sql": "SELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT 1"}, {"query": "Show the different headquarters and number of companies at each headquarter.", "sql": "SELECT Headquarters ,  COUNT(*) FROM company GROUP BY Headquarters"}, {"query": "Show the most common headquarter for companies.", "sql": "SELECT Headquarters FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Show the headquarters that have at least two companies.", "sql": "SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(*)  >=  2"}, {"query": "Show the headquarters that have both companies in banking industry and companies in oil and gas industry.", "sql": "SELECT Headquarters FROM company WHERE Industry  =  \"Banking\" INTERSECT SELECT Headquarters FROM company WHERE Industry  =  \"Oil and gas\""}, {"query": "Show the names of companies and of employees.", "sql": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID"}, {"query": "Show names of companies and that of employees in descending order of number of years working for that employee.", "sql": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID ORDER BY T1.Year_working"}, {"query": "Show the names of employees that work for companies with sales bigger than 200.", "sql": "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200"}, {"query": "Show the names of companies and the number of employees they have", "sql": "SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name"}, {"query": "List the names of people that are not employed by any company", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)"}, {"query": "list the names of the companies with more than 200 sales in the descending order of sales and profits.", "sql": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC"}, {"query": "How many film are there?", "sql": "SELECT count(*) FROM film"}, {"query": "Count the number of films.", "sql": "SELECT count(*) FROM film"}, {"query": "List the distinct director of all films.", "sql": "SELECT DISTINCT Director FROM film"}, {"query": "What are the different film Directors?", "sql": "SELECT DISTINCT Director FROM film"}, {"query": "What is the average ticket sales gross in dollars of films?", "sql": "SELECT avg(Gross_in_dollar) FROM film"}, {"query": "Return the average gross sales in dollars across all films.", "sql": "SELECT avg(Gross_in_dollar) FROM film"}, {"query": "What are the low and high estimates of film markets?", "sql": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation"}, {"query": "Return the low and high estimates for all film markets.", "sql": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation"}, {"query": "What are the types of film market estimations in year 1995?", "sql": "SELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995"}, {"query": "Return the types of film market estimations in 1995.", "sql": "SELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995"}, {"query": "What are the maximum and minimum number of cities in all markets.", "sql": "SELECT max(Number_cities) ,  min(Number_cities) FROM market"}, {"query": "Return the maximum and minimum number of cities across all markets.", "sql": "SELECT max(Number_cities) ,  min(Number_cities) FROM market"}, {"query": "How many markets have number of cities smaller than 300?", "sql": "SELECT count(*) FROM market WHERE Number_cities  <  300"}, {"query": "Count the number of markets that have a number of cities lower than 300.", "sql": "SELECT count(*) FROM market WHERE Number_cities  <  300"}, {"query": "List all countries of markets in ascending alphabetical order.", "sql": "SELECT Country FROM market ORDER BY Country ASC"}, {"query": "What are the countries for each market, ordered alphabetically?", "sql": "SELECT Country FROM market ORDER BY Country ASC"}, {"query": "List all countries of markets in descending order of number of cities.", "sql": "SELECT Country FROM market ORDER BY Number_cities DESC"}, {"query": "What are the countries for each market ordered by decreasing number of cities?", "sql": "SELECT Country FROM market ORDER BY Number_cities DESC"}, {"query": "Please show the titles of films and the types of market estimations.", "sql": "SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID"}, {"query": "What are the titles of films and corresponding types of market estimations?", "sql": "SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID"}, {"query": "Show the distinct director of films with market estimation in the year of 1995.", "sql": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995"}, {"query": "Who are the different directors of films which had market estimation in 1995?", "sql": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995"}, {"query": "What is the average number of cities of markets with low film market estimate bigger than 10000?", "sql": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000"}, {"query": "Give the average number of cities within markets that had a low market estimation larger than 10000?", "sql": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000"}, {"query": "Please list the countries and years of film market estimations.", "sql": "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID"}, {"query": "What are the countries of markets and their corresponding years of market estimation?", "sql": "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID"}, {"query": "Please list the years of film market estimations when the market is in country \"Japan\" in descending order.", "sql": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  \"Japan\" ORDER BY T1.Year DESC"}, {"query": "What are the years of film market estimation for the market of Japan, ordered by year descending?", "sql": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  \"Japan\" ORDER BY T1.Year DESC"}, {"query": "List the studios of each film and the number of films produced by that studio.", "sql": "SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio"}, {"query": "How films are produced by each studio?", "sql": "SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio"}, {"query": "List the name of film studio that have the most number of films.", "sql": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What is the name of teh studio that created the most films?", "sql": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "List the names of studios that have at least two films.", "sql": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2"}, {"query": "What are the names of studios that have made two or more films?", "sql": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2"}, {"query": "List the title of films that do not have any market estimation.", "sql": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)"}, {"query": "What are the titles of films that do not have a film market estimation?", "sql": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)"}, {"query": "Show the studios that have produced films with director \"Nicholas Meyer\" and \"Walter Hill\".", "sql": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\""}, {"query": "What are the names of studios that have produced films with both Nicholas Meyer and Walter Hill?", "sql": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\""}, {"query": "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".", "sql": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\""}, {"query": "What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"?", "sql": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\""}, {"query": "Show the studios that have not produced films with director \"Walter Hill\".", "sql": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\""}, {"query": "Which studios have never worked with the director Walter Hill?", "sql": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\""}, {"query": "List the studios which average gross is above 4500000.", "sql": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000"}, {"query": "Which studios have an average gross of over 4500000?", "sql": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000"}, {"query": "What is the title of the film that has the highest high market estimation.", "sql": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1"}, {"query": "Return the title of the film with the highest high estimate?", "sql": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1"}, {"query": "What are the titles and directors of the films were never presented in China?", "sql": "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')"}, {"query": "Return the titles and directors of films that were never in the market of China.", "sql": "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')"}, {"query": "How many calendar items do we have?", "sql": "SELECT count(*) FROM Ref_calendar"}, {"query": "Count the number of all the calendar items.", "sql": "SELECT count(*) FROM Ref_calendar"}, {"query": "Show all calendar dates and day Numbers.", "sql": "SELECT calendar_date ,  day_Number FROM Ref_calendar"}, {"query": "What are all the calendar dates and day Numbers?", "sql": "SELECT calendar_date ,  day_Number FROM Ref_calendar"}, {"query": "Show the number of document types.", "sql": "SELECT count(*) FROM Ref_document_types"}, {"query": "How many document types are there?", "sql": "SELECT count(*) FROM Ref_document_types"}, {"query": "List all document type codes and document type names.", "sql": "SELECT document_type_code ,  document_type_name FROM Ref_document_types"}, {"query": "What are all the document type codes and document type names?", "sql": "SELECT document_type_code ,  document_type_name FROM Ref_document_types"}, {"query": "What is the name and description for document type code RV?", "sql": "SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\""}, {"query": "Give me the name and description of the document type code RV.", "sql": "SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\""}, {"query": "What is the document type code for document type \"Paper\"?", "sql": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\""}, {"query": "Find the code of the document type \"Paper\".", "sql": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\""}, {"query": "Show the number of documents with document type code CV or BK.", "sql": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\""}, {"query": "How many documents have document type code CV or BK?", "sql": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\""}, {"query": "What is the date when the document \"Marry CV\" was stored?", "sql": "SELECT date_stored FROM All_documents WHERE Document_name  =  \"Marry CV\""}, {"query": "When was the document named \"Marry CV\" stored? Give me the date.", "sql": "SELECT date_stored FROM All_documents WHERE Document_name  =  \"Marry CV\""}, {"query": "What is the day Number and date of all the documents?", "sql": "SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date"}, {"query": "Return the day Number and stored date for all the documents.", "sql": "SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date"}, {"query": "What is the document type name for the document with name \"How to read a book\"?", "sql": "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  \"How to read a book\""}, {"query": "Find the document type name of the document named \"How to read a book\".", "sql": "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  \"How to read a book\""}, {"query": "Show the number of locations.", "sql": "SELECT count(*) FROM Ref_locations"}, {"query": "How many locations are listed in the database?", "sql": "SELECT count(*) FROM Ref_locations"}, {"query": "List all location codes and location names.", "sql": "SELECT location_code ,  location_name FROM Ref_locations"}, {"query": "What are all the location codes and location names?", "sql": "SELECT location_code ,  location_name FROM Ref_locations"}, {"query": "What are the name and description for location code x?", "sql": "SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\""}, {"query": "Give me the name and description of the location with code x.", "sql": "SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\""}, {"query": "What is the location code for the country \"Canada\"?", "sql": "SELECT location_code FROM Ref_locations WHERE location_name  =  \"Canada\""}, {"query": "Show the location code of the country \"Canada\".", "sql": "SELECT location_code FROM Ref_locations WHERE location_name  =  \"Canada\""}, {"query": "How many roles are there?", "sql": "SELECT count(*) FROM ROLES"}, {"query": "Count the total number of roles listed.", "sql": "SELECT count(*) FROM ROLES"}, {"query": "List all role codes, role names, and role descriptions.", "sql": "SELECT role_code ,  role_name ,  role_description FROM ROLES"}, {"query": "What are all the role codes, role names, and role descriptions?", "sql": "SELECT role_code ,  role_name ,  role_description FROM ROLES"}, {"query": "What are the name and description for role code \"MG\"?", "sql": "SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  \"MG\""}, {"query": "Find the name and description of the role with code \"MG\".", "sql": "SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  \"MG\""}, {"query": "Show the description for role name \"Proof Reader\".", "sql": "SELECT role_description FROM ROLES WHERE role_name  =  \"Proof Reader\""}, {"query": "What is the description of the role named \"Proof Reader\"?", "sql": "SELECT role_description FROM ROLES WHERE role_name  =  \"Proof Reader\""}, {"query": "How many employees do we have?", "sql": "SELECT count(*) FROM Employees"}, {"query": "Find the number of employees we have.", "sql": "SELECT count(*) FROM Employees"}, {"query": "Show the name, role code, and date of birth for the employee with name 'Armani'.", "sql": "SELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  'Armani'"}, {"query": "What are the name, role code, and date of birth of the employee named 'Armani'?", "sql": "SELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  'Armani'"}, {"query": "What is the id for the employee called Ebba?", "sql": "SELECT employee_ID FROM Employees WHERE employee_name  =  \"Ebba\""}, {"query": "Show the id of the employee named Ebba.", "sql": "SELECT employee_ID FROM Employees WHERE employee_name  =  \"Ebba\""}, {"query": "Show the names of all the employees with role \"HR\".", "sql": "SELECT employee_name FROM Employees WHERE role_code  =  \"HR\""}, {"query": "Which employees have the role with code \"HR\"? Find their names.", "sql": "SELECT employee_name FROM Employees WHERE role_code  =  \"HR\""}, {"query": "Show all role codes and the number of employees in each role.", "sql": "SELECT role_code ,  count(*) FROM Employees GROUP BY role_code"}, {"query": "What is the code of each role and the number of employees in each role?", "sql": "SELECT role_code ,  count(*) FROM Employees GROUP BY role_code"}, {"query": "What is the role code with the largest number of employees?", "sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the code of the role that have the most employees.", "sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show all role codes with at least 3 employees.", "sql": "SELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  3"}, {"query": "What are the roles with three or more employees? Give me the role codes.", "sql": "SELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  3"}, {"query": "Show the role code with the least employees.", "sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1"}, {"query": "What is the role with the smallest number of employees? Find the role codes.", "sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1"}, {"query": "What is the role name and role description for employee called Ebba?", "sql": "SELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  \"Ebba\""}, {"query": "Show the name and description of the role played by the employee named Ebba.", "sql": "SELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  \"Ebba\""}, {"query": "Show the names of employees with role name Editor.", "sql": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Editor\""}, {"query": "Find the names of all the employees whose the role name is \"Editor\".", "sql": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Editor\""}, {"query": "Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\".", "sql": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\""}, {"query": "What are the employee ids of the employees whose role name is \"Human Resource\" or \"Manager\"?", "sql": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\""}, {"query": "What are the different location codes for documents?", "sql": "SELECT DISTINCT location_code FROM Document_locations"}, {"query": "Give me all the distinct location codes for documents.", "sql": "SELECT DISTINCT location_code FROM Document_locations"}, {"query": "Show the location name for document \"Robin CV\".", "sql": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\""}, {"query": "What is the location name of the document \"Robin CV\"?", "sql": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\""}, {"query": "Show the location code, the starting date and ending data in that location for all the documents.", "sql": "SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations"}, {"query": "What are each document's location code, and starting date and ending data in that location?", "sql": "SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations"}, {"query": "What is \"the date in location from\" and \"the date in location to\" for the document with name \"Robin CV\"?", "sql": "SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\""}, {"query": "Find the starting date and ending data in location for the document named \"Robin CV\".", "sql": "SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\""}, {"query": "Show the location codes and the number of documents in each location.", "sql": "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code"}, {"query": "What is the code of each location and the number of documents in that location?", "sql": "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code"}, {"query": "What is the location code with the most documents?", "sql": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the code of the location with the largest number of documents.", "sql": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show the location codes with at least 3 documents.", "sql": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3"}, {"query": "What are the codes of the locations with at least three documents?", "sql": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3"}, {"query": "Show the location name and code with the least documents.", "sql": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1"}, {"query": "What are the name and code of the location with the smallest number of documents?", "sql": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1"}, {"query": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?", "sql": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;"}, {"query": "List the names of the employees who authorized the destruction of documents and the employees who destroyed the corresponding documents.", "sql": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;"}, {"query": "Show the id of each employee and the number of document destruction authorised by that employee.", "sql": "SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID"}, {"query": "What are the id of each employee and the number of document destruction authorised by that employee?", "sql": "SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID"}, {"query": "Show the employee ids and the number of documents destroyed by each employee.", "sql": "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID"}, {"query": "What are the id of each employee and the number of document destroyed by that employee?", "sql": "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID"}, {"query": "Show the ids of the employees who don't authorize destruction for any document.", "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed"}, {"query": "Which employees do not authorize destruction for any document? Give me their employee ids.", "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed"}, {"query": "Show the ids of all employees who have authorized destruction.", "sql": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed"}, {"query": "What are the ids of all the employees who authorize document destruction?", "sql": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed"}, {"query": "Show the ids of all employees who have destroyed a document.", "sql": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed"}, {"query": "What are the ids of all the employees who have destroyed documents?", "sql": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed"}, {"query": "Show the ids of all employees who don't destroy any document.", "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed"}, {"query": "Which employees do not destroy any document? Find their employee ids.", "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed"}, {"query": "Show the ids of all employees who have either destroyed a document or made an authorization to do this.", "sql": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed"}, {"query": "Which employees have either destroyed a document or made an authorization to do so? Return their employee ids.", "sql": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed"}, {"query": "How many clubs are there?", "sql": "SELECT count(*) FROM club"}, {"query": "Count the total number of clubs.", "sql": "SELECT count(*) FROM club"}, {"query": "What are the names of all clubs?", "sql": "SELECT clubname FROM club"}, {"query": "Give me the name of each club.", "sql": "SELECT clubname FROM club"}, {"query": "How many students are there?", "sql": "SELECT count(*) FROM student"}, {"query": "Count the total number of students.", "sql": "SELECT count(*) FROM student"}, {"query": "What are the first names of all the students?", "sql": "SELECT DISTINCT fname FROM student"}, {"query": "Find each student's first name.", "sql": "SELECT DISTINCT fname FROM student"}, {"query": "Find the last names of the members of the club \"Bootup Baltimore\".", "sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\""}, {"query": "Who are the members of the club named \"Bootup Baltimore\"? Give me their last names.", "sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\""}, {"query": "Who are the members of the club named \"Hopkins Student Enterprises\"? Show the last name.", "sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\""}, {"query": "Return the last name for the members of the club named \"Hopkins Student Enterprises\".", "sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\""}, {"query": "How many members does the club \"Tennis Club\" has?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\""}, {"query": "Count the members of the club \"Tennis Club\".", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\""}, {"query": "Find the number of members of club \"Pen and Paper Gaming\".", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\""}, {"query": "How many people have membership in the club \"Pen and Paper Gaming\"?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\""}, {"query": "How many clubs does \"Linda Smith\" belong to?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\""}, {"query": "How many clubs does \"Linda Smith\" have membership for?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\""}, {"query": "Find the number of clubs where \"Tracy Kim\" is a member.", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\""}, {"query": "For how many clubs is \"Tracy Kim\" a member?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\""}, {"query": "Find all the female members of club \"Bootup Baltimore\". Show the first name and last name.", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\""}, {"query": "Give me the first name and last name for all the female members of the club \"Bootup Baltimore\".", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\""}, {"query": "Find all the male members of club \"Hopkins Student Enterprises\". Show the first name and last name.", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\""}, {"query": "What are the first name and last name of each male member in club \"Hopkins Student Enterprises\"?", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\""}, {"query": "Find all members of \"Bootup Baltimore\" whose major is \"600\". Show the first name and last name.", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\""}, {"query": "Which members of \"Bootup Baltimore\" major in \"600\"? Give me their first names and last names.", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\""}, {"query": "Which club has the most members majoring in \"600\"?", "sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the club which has the largest number of members majoring in \"600\".", "sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the name of the club that has the most female students.", "sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which club has the most female students as their members? Give me the name of the club.", "sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the description of the club named \"Tennis Club\"?", "sql": "SELECT clubdesc FROM club WHERE clubname  =  \"Tennis Club\""}, {"query": "Find the description of the club called \"Tennis Club\".", "sql": "SELECT clubdesc FROM club WHERE clubname  =  \"Tennis Club\""}, {"query": "Find the description of the club \"Pen and Paper Gaming\".", "sql": "SELECT clubdesc FROM club WHERE clubname  =  \"Pen and Paper Gaming\""}, {"query": "What is the description of the club \"Pen and Paper Gaming\"?", "sql": "SELECT clubdesc FROM club WHERE clubname  =  \"Pen and Paper Gaming\""}, {"query": "What is the location of the club named \"Tennis Club\"?", "sql": "SELECT clublocation FROM club WHERE clubname  =  \"Tennis Club\""}, {"query": "Where us the club named \"Tennis Club\" located?", "sql": "SELECT clublocation FROM club WHERE clubname  =  \"Tennis Club\""}, {"query": "Find the location of the club \"Pen and Paper Gaming\".", "sql": "SELECT clublocation FROM club WHERE clubname  =  \"Pen and Paper Gaming\""}, {"query": "Where is the club \"Pen and Paper Gaming\" located?", "sql": "SELECT clublocation FROM club WHERE clubname  =  \"Pen and Paper Gaming\""}, {"query": "Where is the club \"Hopkins Student Enterprises\" located?", "sql": "SELECT clublocation FROM club WHERE clubname  =  \"Hopkins Student Enterprises\""}, {"query": "Tell me the location of the club \"Hopkins Student Enterprises\".", "sql": "SELECT clublocation FROM club WHERE clubname  =  \"Hopkins Student Enterprises\""}, {"query": "Find the name of all the clubs at \"AKW\".", "sql": "SELECT clubname FROM club WHERE clublocation  =  \"AKW\""}, {"query": "Which clubs are located at \"AKW\"? Return the club names.", "sql": "SELECT clubname FROM club WHERE clublocation  =  \"AKW\""}, {"query": "How many clubs are located at \"HHH\"?", "sql": "SELECT count(*) FROM club WHERE clublocation  =  \"HHH\""}, {"query": "Count the number of clubs located at \"HHH\".", "sql": "SELECT count(*) FROM club WHERE clublocation  =  \"HHH\""}, {"query": "What are the first and last name of the president of the club \"Bootup Baltimore\"?", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\""}, {"query": "Who is the president of the club \"Bootup Baltimore\"? Give me the first and last name.", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\""}, {"query": "Who is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name.", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\""}, {"query": "Find the first name and last name for the \"CTO\" of the club \"Hopkins Student Enterprises\"?", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\""}, {"query": "How many different roles are there in the club \"Bootup Baltimore\"?", "sql": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  \"Bootup Baltimore\""}, {"query": "Count the number of different positions in the club \"Bootup Baltimore\".", "sql": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  \"Bootup Baltimore\""}, {"query": "How many members of \"Bootup Baltimore\" are older than 18?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18"}, {"query": "Count the number of members in club \"Bootup Baltimore\" whose age is above 18.", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18"}, {"query": "How many members of club \"Bootup Baltimore\" are younger than 18?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18"}, {"query": "Count the number of members in club \"Bootup Baltimore\" whose age is below 18.", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18"}, {"query": "Find the names of all the clubs that have at least a member from the city with city code \"BAL\".", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\""}, {"query": "Which clubs have one or more members from the city with code \"BAL\"? Give me the names of the clubs.", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\""}, {"query": "Find the names of the clubs that have at least a member from the city with city code \"HOU\".", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\""}, {"query": "Which clubs have one or more members from the city with code \"HOU\"? Give me the names of the clubs.", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\""}, {"query": "How many clubs does the student named \"Eric Tai\" belong to?", "sql": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\""}, {"query": "Count the number of clubs for which the student named \"Eric Tai\" is a member.", "sql": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\""}, {"query": "List the clubs having \"Davis Steven\" as a member.", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\""}, {"query": "What are the names of the clubs that have \"Davis Steven\" as a member?", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\""}, {"query": "List the clubs that have at least a member with advisor \"1121\".", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121"}, {"query": "Which clubs have one or more members whose advisor is \"1121\"?", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121"}, {"query": "What is the average age of the members of the club \"Bootup Baltimore\"?", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\""}, {"query": "Find the average age of the members in the club \"Bootup Baltimore\".", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\""}, {"query": "Find the average age of members of the club \"Hopkins Student Enterprises\".", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\""}, {"query": "On average, how old are the members in the club \"Hopkins Student Enterprises\"?", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\""}, {"query": "Retrieve the average age of members of the club \"Tennis Club\".", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\""}, {"query": "Compute the average age of the members in the club \"Tennis Club\".", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\""}, {"query": "What are the distinct grant amount for the grants where the documents were sent before '1986-08-26 20:49:27' and grant were ended after '1989-03-16 18:27:16'?", "sql": "SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.sent_date  <  '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date  >  '1989-03-16 18:27:16'"}, {"query": "What are the different grant amounts for documents sent before '1986-08-26 20:49:27' and after the grant ended on '1989-03-16 18:27:16'?", "sql": "SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.sent_date  <  '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date  >  '1989-03-16 18:27:16'"}, {"query": "List the project details of the project both producing patent and paper as outcomes.", "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Patent'"}, {"query": "What are the details of the project that is producing both patents and papers as outcomes?", "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Patent'"}, {"query": "What is the total grant amount of the organisations described as research?", "sql": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'"}, {"query": "What is the total amount of grant money for research?", "sql": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'"}, {"query": "List from which date and to which date these staff work: project staff of the project which hires the most staffs", "sql": "SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'"}, {"query": "From what date and to what date do the staff work on a project that has the most staff and has staff in a leader role?", "sql": "SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'"}, {"query": "Find the organisation ids and details of the organisations which are involved in", "sql": "SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000"}, {"query": "What are the ids and details for all organizations that have grants of more than 6000 dollars?", "sql": "SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000"}, {"query": "What is the organisation type and id of the organisation which has the most number of research staff?", "sql": "SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the type and id of the organization that has the most research staff?", "sql": "SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which organisation type hires most research staff?", "sql": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the type of the organization with the most research staff?", "sql": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described", "sql": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'"}, {"query": "What are the send dates for all documents that have a grant amount of more than 5000 and are involved in research?", "sql": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'"}, {"query": "What are the response received dates for the documents described as 'Regular' or granted with more than 100?", "sql": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100"}, {"query": "What is the response received date for the document described as Regular that was granted more than 100 dollars?", "sql": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100"}, {"query": "List the project details of the projects which did not hire any staff for a researcher role.", "sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )"}, {"query": "What are the details for all projects that did not hire any staff in a research role?", "sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )"}, {"query": "What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes?", "sql": "SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2"}, {"query": "What are the task details, task ids, and project ids for the progrects that are detailed as 'omnis' or have at least 3 outcomes?", "sql": "SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2"}, {"query": "When do all the researcher role staff start to work, and when do they stop working?", "sql": "SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'"}, {"query": "When did researchers start and stop working?", "sql": "SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'"}, {"query": "How many kinds of roles are there for the staff?", "sql": "SELECT count(DISTINCT role_code) FROM Project_Staff"}, {"query": "How many different roles are there on the project staff?", "sql": "SELECT count(DISTINCT role_code) FROM Project_Staff"}, {"query": "What is the total amount of grants given by each organisations? Also list the organisation id.", "sql": "SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id"}, {"query": "What is the total amount of grant money given to each organization and what is its id?", "sql": "SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id"}, {"query": "List the project details of the projects with the research outcome described with the substring 'Published'.", "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE '%Published%'"}, {"query": "What are the details for the project whose research has been published?", "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE '%Published%'"}, {"query": "How many staff does each project has? List the project id and the number in an ascending order.", "sql": "SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC"}, {"query": "For each project id, how many staff does it have? List them in increasing order.", "sql": "SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC"}, {"query": "What is the complete description of the researcher role.", "sql": "SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'"}, {"query": "What is the complete description of the job of a researcher?", "sql": "SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'"}, {"query": "When did the first staff for the projects started working?", "sql": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1"}, {"query": "When did the first staff member start working?", "sql": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1"}, {"query": "Which project made the most number of outcomes? List the project details and the project id.", "sql": "SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the details and id of the project with the most outcomes?", "sql": "SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which projects have no outcome? List the project details.", "sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )"}, {"query": "What are the details of the project with no outcomes?", "sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )"}, {"query": "Which organisation hired the most number of research staff? List the organisation id, type and detail.", "sql": "SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the ids, types, and details of the organization with the most research staff?", "sql": "SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show the role description and the id of the project staff involved in most number of project outcomes?", "sql": "SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "For each staff id, what is the description of the role that is involved with the most number of projects?", "sql": "SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which document type is described with the prefix 'Initial'?", "sql": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'"}, {"query": "What is the type of the document whose description starts with the word 'Initial'?", "sql": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'"}, {"query": "For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date.", "sql": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'"}, {"query": "For grants that have descriptions of Regular and Initial Applications, what are their start dates?", "sql": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'"}, {"query": "How many documents can one grant have at most? List the grant id and number.", "sql": "SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "For each grant id, how many documents does it have, and which one has the most?", "sql": "SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the organisation type description of the organisation detailed as 'quo'.", "sql": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo'"}, {"query": "What is the type description of the organization whose detail is listed as 'quo'?", "sql": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo'"}, {"query": "What are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order.", "sql": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details"}, {"query": "What are the details of all organizations that are described as Sponsors and sort the results in ascending order?", "sql": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details"}, {"query": "How many Patent outcomes are generated from all the projects?", "sql": "SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'"}, {"query": "How many patents outcomes were listed for all the projects?", "sql": "SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'"}, {"query": "How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?", "sql": "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'"}, {"query": "How many project members were leaders or started working before '1989-04-24 23:51:54'?", "sql": "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'"}, {"query": "What is the last date of the staff leaving the projects?", "sql": "SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1"}, {"query": "What is the last date that a staff member left a project?", "sql": "SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1"}, {"query": "What are the result description of the project whose detail is 'sint'?", "sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'"}, {"query": "What is the description for the results whose project detail is 'sint'?", "sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'"}, {"query": "List the organisation id with the maximum outcome count, and the count.", "sql": "SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the id of the organization with the maximum number of outcomes and how many outcomes are there?", "sql": "SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "List the project details of the projects launched by the organisation", "sql": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )"}, {"query": "What are the details for the projects which were launched by the organization with the most projects?", "sql": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )"}, {"query": "List the research staff details, and order in ascending order.", "sql": "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC"}, {"query": "What details are there on the research staff? List the result in ascending alphabetical order.", "sql": "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC"}, {"query": "How many tasks are there in total?", "sql": "SELECT count(*) FROM Tasks"}, {"query": "How many tasks are there?", "sql": "SELECT count(*) FROM Tasks"}, {"query": "How many tasks does each project have? List the task count and the project detail.", "sql": "SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id"}, {"query": "For each project id, how many tasks are there?", "sql": "SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id"}, {"query": "What are the staff roles of the staff who", "sql": "SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'"}, {"query": "What roles did staff members play between '2003-04-19 15:06:20' and '2016-03-15 00:33:18'?", "sql": "SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'"}, {"query": "What are the descriptions of all the project outcomes?", "sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code"}, {"query": "List the description of the outcomes for all projects.", "sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code"}, {"query": "Which role is most common for the staff?", "sql": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the most common role for the staff?", "sql": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "How many friends does Dan have?", "sql": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'"}, {"query": "How many friends does Dan have?", "sql": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'"}, {"query": "How many females does this network has?", "sql": "SELECT count(*) FROM Person WHERE gender  =  'female'"}, {"query": "How many females are in the network?", "sql": "SELECT count(*) FROM Person WHERE gender  =  'female'"}, {"query": "What is the average age for all person?", "sql": "SELECT avg(age) FROM Person"}, {"query": "What is the average age for all people in the table?", "sql": "SELECT avg(age) FROM Person"}, {"query": "How many different cities are they from?", "sql": "SELECT count(DISTINCT city) FROM Person"}, {"query": "How many different cities do people originate from?", "sql": "SELECT count(DISTINCT city) FROM Person"}, {"query": "How many type of jobs do they have?", "sql": "SELECT count(DISTINCT job) FROM Person"}, {"query": "How many different jobs are listed?", "sql": "SELECT count(DISTINCT job) FROM Person"}, {"query": "Who is the oldest person?", "sql": "SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)"}, {"query": "What is the name of the person who is the oldest?", "sql": "SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)"}, {"query": "Who is the oldest person whose job is student?", "sql": "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )"}, {"query": "What is the name of the oldest student?", "sql": "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )"}, {"query": "Who is the youngest male?", "sql": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )"}, {"query": "What is the name of the youngest male?", "sql": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )"}, {"query": "How old is the doctor named Zach?", "sql": "SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'"}, {"query": "What is the age of the doctor named Zach?", "sql": "SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'"}, {"query": "Who is the person whose age is below 30?", "sql": "SELECT name FROM Person WHERE age  <  30"}, {"query": "What is the name of the person whose age is below 30?", "sql": "SELECT name FROM Person WHERE age  <  30"}, {"query": "How many people whose age is greater 30 and job is engineer?", "sql": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'"}, {"query": "HOw many engineers are older than 30?", "sql": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'"}, {"query": "What is the average age for each gender?", "sql": "SELECT avg(age) ,  gender FROM Person GROUP BY gender"}, {"query": "How old is each gender, on average?", "sql": "SELECT avg(age) ,  gender FROM Person GROUP BY gender"}, {"query": "What is average age for different job title?", "sql": "SELECT avg(age) ,  job FROM Person GROUP BY job"}, {"query": "How old is the average person for each job?", "sql": "SELECT avg(age) ,  job FROM Person GROUP BY job"}, {"query": "What is average age of male for different job title?", "sql": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job"}, {"query": "What is the average age for a male in each job?", "sql": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job"}, {"query": "What is minimum age for different job title?", "sql": "SELECT min(age) ,  job FROM Person GROUP BY job"}, {"query": "How old is the youngest person for each job?", "sql": "SELECT min(age) ,  job FROM Person GROUP BY job"}, {"query": "Find the number of people who is under 40 for each gender.", "sql": "SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender"}, {"query": "How many people are under 40 for each gender?", "sql": "SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender"}, {"query": "Find the name of people whose age is greater than any engineer sorted by their age.", "sql": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age"}, {"query": "What is the name of all the people who are older than at least one engineer? Order them by age.", "sql": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age"}, {"query": "Find the number of people whose age is greater than all engineers.", "sql": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')"}, {"query": "How many people are older than every engineer?", "sql": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')"}, {"query": "list the name, job title of all people ordered by their names.", "sql": "SELECT name ,  job FROM Person ORDER BY name"}, {"query": "What are the names and job titles of every person ordered alphabetically by name?", "sql": "SELECT name ,  job FROM Person ORDER BY name"}, {"query": "Find the names of all person sorted in the descending order using age.", "sql": "SELECT name FROM Person ORDER BY age DESC"}, {"query": "What are the names of everybody sorted by age in descending order?", "sql": "SELECT name FROM Person ORDER BY age DESC"}, {"query": "Find the name and age of all males in order of their age.", "sql": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age"}, {"query": "What is the name and age of every male? Order the results by age.", "sql": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age"}, {"query": "Find the name and age of the person who is a friend of both Dan and Alice.", "sql": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'"}, {"query": "What are the names and ages of every person who is a friend of both Dan and Alice?", "sql": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'"}, {"query": "Find the name and age of the person who is a friend of Dan or Alice.", "sql": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'"}, {"query": "What are the different names and ages of every friend of either Dan or alice?", "sql": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'"}, {"query": "Find the name of the person who has friends with age above 40 and under age 30?", "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)"}, {"query": "What are the names of every person who has a friend over 40 and under 30?", "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)"}, {"query": "Find the name of the person who has friends with age above 40 but not under age 30?", "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)"}, {"query": "What are the names of the people who are older 40 but no friends under age 30?", "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)"}, {"query": "Find the name of the person who has no student friends.", "sql": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'"}, {"query": "What are the names of the people who have no friends who are students?", "sql": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'"}, {"query": "Find the person who has exactly one friend.", "sql": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1"}, {"query": "What are the names of everybody who has exactly one friend?", "sql": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1"}, {"query": "Who are the friends of Bob?", "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'"}, {"query": "Who are Bob's friends?", "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'"}, {"query": "Find the name of persons who are friends with Bob.", "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'"}, {"query": "What are the names of all of Bob's friends?", "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'"}, {"query": "Find the names of females who are friends with Zach", "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'"}, {"query": "What are the names of all females who are friends with Zach?", "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'"}, {"query": "Find the female friends of Alice.", "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'"}, {"query": "What are all the friends of Alice who are female?", "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'"}, {"query": "Find the male friend of Alice whose job is a doctor?", "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'"}, {"query": "Who are the friends of Alice that are doctors?", "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'"}, {"query": "Who has a friend that is from new york city?", "sql": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'"}, {"query": "What are the names of all friends who are from New York?", "sql": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'"}, {"query": "Who has friends that are younger than the average age?", "sql": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)"}, {"query": "What are the different names of friends who are younger than the average age for a friend?", "sql": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)"}, {"query": "Who has friends that are older than the average age? Print their friends and their ages as well", "sql": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)"}, {"query": "Whare the names, friends, and ages of all people who are older than the average age of a person?", "sql": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)"}, {"query": "Who is the friend of Zach with longest year relationship?", "sql": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')"}, {"query": "Which friend of Zach has the longest-lasting friendship?", "sql": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')"}, {"query": "What is the age of the friend of Zach with longest year relationship?", "sql": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')"}, {"query": "What are the ages of all of Zach's friends who are in the longest relationship?", "sql": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')"}, {"query": "Find the name of persons who are friends with Alice for the shortest years.", "sql": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')"}, {"query": "What are the names of all people who are friends with Alice for the shortest amount of time?", "sql": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')"}, {"query": "Find the name, age, and job title of persons who are friends with Alice for the longest years.", "sql": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')"}, {"query": "What are the names, ages, and jobs of all people who are friends with Alice for the longest amount of time?", "sql": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')"}, {"query": "Who is the person that has no friend?", "sql": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend"}, {"query": "What are the names of all people who do not have friends?", "sql": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend"}, {"query": "Which person whose friends have the oldest average age?", "sql": "SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1"}, {"query": "What is the name of the person who has the oldest average age for their friends, and what is that average age?", "sql": "SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1"}, {"query": "What is the total number of people who has no friend living in the city of Austin.", "sql": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')"}, {"query": "What is the total number of people who have no friends living in Austin?", "sql": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')"}, {"query": "Find Alice's friends of friends.", "sql": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'"}, {"query": "What are the names of all of Alice's friends of friends?", "sql": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'"}, {"query": "How many members are there?", "sql": "SELECT count(*) FROM member"}, {"query": "List the names of members in ascending alphabetical order.", "sql": "SELECT Name FROM member ORDER BY Name ASC"}, {"query": "What are the names and countries of members?", "sql": "SELECT Name ,  Country FROM member"}, {"query": "Show the names of members whose country is \"United States\" or \"Canada\".", "sql": "SELECT Name FROM member WHERE Country  =  \"United States\" OR Country  =  \"Canada\""}, {"query": "Show the different countries and the number of members from each.", "sql": "SELECT Country ,  COUNT(*) FROM member GROUP BY Country"}, {"query": "Show the most common country across members.", "sql": "SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Which countries have more than two members?", "sql": "SELECT Country FROM member GROUP BY Country HAVING COUNT(*)  >  2"}, {"query": "Show the leader names and locations of colleges.", "sql": "SELECT Leader_Name ,  College_Location FROM college"}, {"query": "Show the names of members and names of colleges they go to.", "sql": "SELECT T2.Name ,  T1.Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID"}, {"query": "Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names.", "sql": "SELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC"}, {"query": "Show the distinct leader names of colleges associated with members from country \"Canada\".", "sql": "SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID WHERE T2.Country  =  \"Canada\""}, {"query": "Show the names of members and the decoration themes they have.", "sql": "SELECT T1.Name ,  T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID"}, {"query": "Show the names of members that have a rank in round higher than 3.", "sql": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID WHERE T2.Rank_in_Round  >  3"}, {"query": "Show the names of members in ascending order of their rank in rounds.", "sql": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC"}, {"query": "List the names of members who did not participate in any round.", "sql": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round)"}, {"query": "Find the name and access counts of all documents, in alphabetic order of the document name.", "sql": "SELECT document_name ,  access_count FROM documents ORDER BY document_name"}, {"query": "What are the names of all the documents, as well as the access counts of each, ordered alphabetically?", "sql": "SELECT document_name ,  access_count FROM documents ORDER BY document_name"}, {"query": "Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?", "sql": "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1"}, {"query": "What is the name of the document which has been accessed the most times, as well as the number of times it has been accessed?", "sql": "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1"}, {"query": "Find the types of documents with more than 4 documents.", "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4"}, {"query": "What are the codes of types of documents of which there are for or more?", "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4"}, {"query": "Find the total access count of all documents in the most popular document type.", "sql": "SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the total access count of documents that are of the most common document type?", "sql": "SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the average access count of documents?", "sql": "SELECT avg(access_count) FROM documents"}, {"query": "Find the average access count across all documents?", "sql": "SELECT avg(access_count) FROM documents"}, {"query": "What is the structure of the document with the least number of accesses?", "sql": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the structure description of the document that has been accessed the fewest number of times.", "sql": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the type of the document named \"David CV\"?", "sql": "SELECT document_type_code FROM documents WHERE document_name  =  \"David CV\""}, {"query": "Return the type code of the document named \"David CV\".", "sql": "SELECT document_type_code FROM documents WHERE document_name  =  \"David CV\""}, {"query": "Find the list of documents that are both in the most three popular type and have the most three popular structure.", "sql": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3"}, {"query": "What are the names of documents that have both one of the three most common types and one of three most common structures?", "sql": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3"}, {"query": "What document types do have more than 10000 total access number.", "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000"}, {"query": "Return the codes of the document types that do not have a total access count of over 10000.", "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000"}, {"query": "What are all the section titles of the document named \"David CV\"?", "sql": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  \"David CV\""}, {"query": "Give the section titles of the document with the name \"David CV\".", "sql": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  \"David CV\""}, {"query": "Find all the name of documents without any sections.", "sql": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)"}, {"query": "What are the names of documents that do not have any sections?", "sql": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)"}, {"query": "List all the username and passwords of users with the most popular role.", "sql": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the usernames and passwords of users that have the most common role?", "sql": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the average access counts of documents with functional area \"Acknowledgement\".", "sql": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\""}, {"query": "What are the average access counts of documents that have the functional area description \"Acknowledgement\"?", "sql": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\""}, {"query": "Find names of the document without any images.", "sql": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id"}, {"query": "What are the names of documents that do not have any images?", "sql": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id"}, {"query": "What is the name of the document with the most number of sections?", "sql": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the name of the document that has the most sections.", "sql": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "List all the document names which contains \"CV\".", "sql": "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\""}, {"query": "What are the names of documents that contain the substring \"CV\"?", "sql": "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\""}, {"query": "How many users are logged in?", "sql": "SELECT count(*) FROM users WHERE user_login  =  1"}, {"query": "Count the number of users that are logged in.", "sql": "SELECT count(*) FROM users WHERE user_login  =  1"}, {"query": "Find the description of the most popular role among the users that have logged in.", "sql": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)"}, {"query": "What is the description of the most popular role among users that have logged in?", "sql": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)"}, {"query": "Find the average access count of documents with the least popular structure.", "sql": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1"}, {"query": "What is the average access count of documents that have the least common structure?", "sql": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1"}, {"query": "List all the image name and URLs in the order of their names.", "sql": "SELECT image_name ,  image_url FROM images ORDER BY image_name"}, {"query": "What are the names and urls of images, sorted alphabetically?", "sql": "SELECT image_name ,  image_url FROM images ORDER BY image_name"}, {"query": "Find the number of users in each role.", "sql": "SELECT count(*) ,  role_code FROM users GROUP BY role_code"}, {"query": "What are the different role codes for users, and how many users have each?", "sql": "SELECT count(*) ,  role_code FROM users GROUP BY role_code"}, {"query": "What document types have more than 2 corresponding documents?", "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2"}, {"query": "Give the codes of document types that have more than 2 corresponding documents.", "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2"}, {"query": "How many companies are there?", "sql": "SELECT count(*) FROM Companies"}, {"query": "Count the number of companies.", "sql": "SELECT count(*) FROM Companies"}, {"query": "List the names of companies in descending order of market value.", "sql": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC"}, {"query": "Sort the company names in descending order of the company's market value.", "sql": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC"}, {"query": "What are the names of companies whose headquarters are not \"USA\"?", "sql": "SELECT name FROM Companies WHERE Headquarters != 'USA'"}, {"query": "Find the names of the companies whose headquarters are not located in \"USA\".", "sql": "SELECT name FROM Companies WHERE Headquarters != 'USA'"}, {"query": "What are the name and assets of each company, sorted in ascending order of company name?", "sql": "SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC"}, {"query": "List the name and assets of each company in ascending order of company name.", "sql": "SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC"}, {"query": "What are the average profits of companies?", "sql": "SELECT avg(Profits_billion) FROM Companies"}, {"query": "Compute the average profits companies make.", "sql": "SELECT avg(Profits_billion) FROM Companies"}, {"query": "What are the maximum and minimum sales of the companies whose industries are not \"Banking\".", "sql": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\""}, {"query": "Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry.", "sql": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\""}, {"query": "How many different industries are the companies in?", "sql": "SELECT count(DISTINCT Industry) FROM Companies"}, {"query": "Count the number of distinct company industries.", "sql": "SELECT count(DISTINCT Industry) FROM Companies"}, {"query": "List the names of buildings in descending order of building height.", "sql": "SELECT name FROM buildings ORDER BY Height DESC"}, {"query": "What are the names of buildings sorted in descending order of building height?", "sql": "SELECT name FROM buildings ORDER BY Height DESC"}, {"query": "Find the stories of the building with the largest height.", "sql": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1"}, {"query": "What is the stories of highest building?", "sql": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1"}, {"query": "List the name of a building along with the name of a company whose office is in the building.", "sql": "SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id"}, {"query": "For each company, return the company name and the name of the building its office is located in.", "sql": "SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id"}, {"query": "Show the names of the buildings that have more than one company offices.", "sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1"}, {"query": "Which buildings have more than one company offices? Give me the building names.", "sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1"}, {"query": "Show the name of the building that has the most company offices.", "sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Which building has the largest number of company offices? Give me the building name.", "sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Please show the names of the buildings whose status is \"on-hold\", in ascending order of stories.", "sql": "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC"}, {"query": "Find the names of the buildings in \"on-hold\" status, and sort them in ascending order of building stories.", "sql": "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC"}, {"query": "Please show each industry and the corresponding number of companies in that industry.", "sql": "SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry"}, {"query": "Whah are the name of each industry and the number of companies in that industry?", "sql": "SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry"}, {"query": "Please show the industries of companies in descending order of the number of companies.", "sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC"}, {"query": "Sort all the industries in descending order of the count of companies in each industry", "sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC"}, {"query": "List the industry shared by the most companies.", "sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Which industry has the most companies?", "sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "List the names of buildings that have no company office.", "sql": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)"}, {"query": "Which buildings do not have any company office? Give me the building names.", "sql": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)"}, {"query": "Show the industries shared by companies whose headquarters are \"USA\" and companies whose headquarters are \"China\".", "sql": "SELECT Industry FROM Companies WHERE Headquarters  =  \"USA\" INTERSECT SELECT Industry FROM Companies WHERE Headquarters  =  \"China\""}, {"query": "Which industries have both companies with headquarter in \"USA\" and companies with headquarter in \"China\"?", "sql": "SELECT Industry FROM Companies WHERE Headquarters  =  \"USA\" INTERSECT SELECT Industry FROM Companies WHERE Headquarters  =  \"China\""}, {"query": "Find the number of companies whose industry is \"Banking\" or \"Conglomerate\",", "sql": "SELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\""}, {"query": "How many companies are in either \"Banking\" industry or \"Conglomerate\" industry?", "sql": "SELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\""}, {"query": "Show the headquarters shared by more than two companies.", "sql": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2"}, {"query": "Which headquarter locations are used by more than 2 companies?", "sql": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2"}, {"query": "How many products are there?", "sql": "SELECT count(*) FROM Products"}, {"query": "List the name of products in ascending order of price.", "sql": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC"}, {"query": "What are the names and type codes of products?", "sql": "SELECT Product_Name ,  Product_Type_Code FROM Products"}, {"query": "Show the prices of the products named \"Dining\" or \"Trading Policy\".", "sql": "SELECT Product_Price FROM Products WHERE Product_Name  =  \"Dining\" OR Product_Name  =  \"Trading Policy\""}, {"query": "What is the average price for products?", "sql": "SELECT avg(Product_Price) FROM Products"}, {"query": "What is the name of the product with the highest price?", "sql": "SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1"}, {"query": "Show different type codes of products and the number of products with each type code.", "sql": "SELECT Product_Type_Code ,  COUNT(*) FROM Products GROUP BY Product_Type_Code"}, {"query": "Show the most common type code across products.", "sql": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Show the product type codes that have at least two products.", "sql": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*)  >=  2"}, {"query": "Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000.", "sql": "SELECT Product_Type_Code FROM Products WHERE Product_Price  >  4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price  <  3000"}, {"query": "Show the names of products and the number of events they are in.", "sql": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name"}, {"query": "Show the names of products and the number of events they are in, sorted by the number of events in descending order.", "sql": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC"}, {"query": "Show the names of products that are in at least two events.", "sql": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2"}, {"query": "Show the names of products that are in at least two events in ascending alphabetical order of product name.", "sql": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name"}, {"query": "List the names of products that are not in any event.", "sql": "SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)"}, {"query": "How many artworks are there?", "sql": "SELECT count(*) FROM artwork"}, {"query": "List the name of artworks in ascending alphabetical order.", "sql": "SELECT Name FROM artwork ORDER BY Name ASC"}, {"query": "List the name of artworks whose type is not \"Program Talent Show\".", "sql": "SELECT Name FROM artwork WHERE TYPE != \"Program Talent Show\""}, {"query": "What are the names and locations of festivals?", "sql": "SELECT Festival_Name ,  LOCATION FROM festival_detail"}, {"query": "What are the names of the chairs of festivals, sorted in ascending order of the year held?", "sql": "SELECT Chair_Name FROM festival_detail ORDER BY YEAR ASC"}, {"query": "What is the location of the festival with the largest number of audience?", "sql": "SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1"}, {"query": "What are the names of festivals held in year 2007?", "sql": "SELECT Festival_Name FROM festival_detail WHERE YEAR  =  2007"}, {"query": "What is the average number of audience for festivals?", "sql": "SELECT avg(Num_of_Audience) FROM festival_detail"}, {"query": "Show the names of the three most recent festivals.", "sql": "SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3"}, {"query": "For each nomination, show the name of the artwork and name of the festival where it is nominated.", "sql": "SELECT T2.Name ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID"}, {"query": "Show distinct types of artworks that are nominated in festivals in 2007.", "sql": "SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T3.Year  =  2007"}, {"query": "Show the names of artworks in ascending order of the year they are nominated in.", "sql": "SELECT T2.Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID ORDER BY T3.Year"}, {"query": "Show the names of festivals that have nominated artworks of type \"Program Talent Show\".", "sql": "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\""}, {"query": "Show the ids and names of festivals that have at least two nominations for artworks.", "sql": "SELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  2"}, {"query": "Show the id, name of each festival and the number of artworks it has nominated.", "sql": "SELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID"}, {"query": "Please show different types of artworks with the corresponding number of artworks of each type.", "sql": "SELECT TYPE ,  COUNT(*) FROM artwork GROUP BY TYPE"}, {"query": "List the most common type of artworks.", "sql": "SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "List the year in which there are more than one festivals.", "sql": "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*)  >  1"}, {"query": "List the name of artworks that are not nominated.", "sql": "SELECT Name FROM Artwork WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination)"}, {"query": "Show the number of audience in year 2008 or 2010.", "sql": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010"}, {"query": "What are the total number of the audiences who visited any of the festivals?", "sql": "SELECT sum(Num_of_Audience) FROM festival_detail"}, {"query": "In which year are there festivals both inside the 'United States' and outside the 'United States'?", "sql": "SELECT YEAR FROM festival_detail WHERE LOCATION  =  'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION != 'United States'"}, {"query": "How many premises are there?", "sql": "SELECT count(*) FROM premises"}, {"query": "What are all the distinct premise types?", "sql": "SELECT DISTINCT premises_type FROM premises"}, {"query": "Find the types and details for all premises and order by the premise type.", "sql": "SELECT premises_type ,  premise_details FROM premises ORDER BY premises_type"}, {"query": "Show each premise type and the number of premises in that type.", "sql": "SELECT premises_type ,  count(*) FROM premises GROUP BY premises_type"}, {"query": "Show all distinct product categories along with the number of mailshots in each category.", "sql": "SELECT product_category ,  count(*) FROM mailshot_campaigns GROUP BY product_category"}, {"query": "Show the name and phone of the customer without any mailshot.", "sql": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)"}, {"query": "Show the name and phone for customers with a mailshot with outcome code 'No Response'.", "sql": "SELECT T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.outcome_code  =  'No Response'"}, {"query": "Show the outcome code of mailshots along with the number of mailshots in each outcome code.", "sql": "SELECT outcome_code ,  count(*) FROM mailshot_customers GROUP BY outcome_code"}, {"query": "Show the names of customers who have at least 2 mailshots with outcome code 'Order'.", "sql": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE outcome_code  =  'Order' GROUP BY T1.customer_id HAVING count(*)  >=  2"}, {"query": "Show the names of customers who have the most mailshots.", "sql": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.", "sql": "SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'"}, {"query": "Show the premise type and address type code for all customer addresses.", "sql": "SELECT T2.premises_type ,  T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id  =  T2.premise_id"}, {"query": "What are the distinct address type codes for all customer addresses?", "sql": "SELECT DISTINCT address_type_code FROM customer_addresses"}, {"query": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.", "sql": "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'"}, {"query": "Show the names of customers having an order with shipping method FedEx and order status Paid.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid'"}, {"query": "How many courses are there in total?", "sql": "SELECT count(*) FROM COURSE"}, {"query": "Count the number of courses.", "sql": "SELECT count(*) FROM COURSE"}, {"query": "How many courses have more than 2 credits?", "sql": "SELECT count(*) FROM COURSE WHERE Credits  >  2"}, {"query": "Count the number of courses with more than 2 credits.", "sql": "SELECT count(*) FROM COURSE WHERE Credits  >  2"}, {"query": "List all names of courses with 1 credit?", "sql": "SELECT CName FROM COURSE WHERE Credits  =  1"}, {"query": "What are the names of courses with 1 credit?", "sql": "SELECT CName FROM COURSE WHERE Credits  =  1"}, {"query": "Which courses are taught on days MTW?", "sql": "SELECT CName FROM COURSE WHERE Days  =  \"MTW\""}, {"query": "What are the course names for courses taught on MTW?", "sql": "SELECT CName FROM COURSE WHERE Days  =  \"MTW\""}, {"query": "What is the number of departments in Division \"AS\"?", "sql": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\""}, {"query": "How many departments are in the division AS?", "sql": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\""}, {"query": "What are the phones of departments in Room 268?", "sql": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268"}, {"query": "Give the phones for departments in room 268.", "sql": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268"}, {"query": "Find the number of students that have at least one grade \"B\".", "sql": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\""}, {"query": "How many students have had at least one \"B\" grade?", "sql": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\""}, {"query": "Find the max and min grade point for all letter grade.", "sql": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION"}, {"query": "What are the maximum and minumum grade points?", "sql": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION"}, {"query": "Find the first names of students whose first names contain letter \"a\".", "sql": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'"}, {"query": "What are the first names for students who have an \"a\" in their first name?", "sql": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'"}, {"query": "Find the first names and last names of male (sex is M) faculties who live in building NEB.", "sql": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\""}, {"query": "What are the full names of faculties with sex M and who live in building NEB?", "sql": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\""}, {"query": "Find the rooms of faculties with rank professor who live in building NEB.", "sql": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\""}, {"query": "What are the rooms for members of the faculty who are professors and who live in building NEB?", "sql": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\""}, {"query": "Find the department name that is in Building \"Mergenthaler\".", "sql": "SELECT DName FROM DEPARTMENT WHERE Building  =  \"Mergenthaler\""}, {"query": "What is the name of the department in the Building Mergenthaler?", "sql": "SELECT DName FROM DEPARTMENT WHERE Building  =  \"Mergenthaler\""}, {"query": "List all information about courses sorted by credits in the ascending order.", "sql": "SELECT * FROM COURSE ORDER BY Credits"}, {"query": "What is all the information about courses, ordered by credits ascending?", "sql": "SELECT * FROM COURSE ORDER BY Credits"}, {"query": "List the course name of courses sorted by credits.", "sql": "SELECT CName FROM COURSE ORDER BY Credits"}, {"query": "What are the course names, ordered by credits?", "sql": "SELECT CName FROM COURSE ORDER BY Credits"}, {"query": "Find the first name of students in the descending order of age.", "sql": "SELECT Fname FROM STUDENT ORDER BY Age DESC"}, {"query": "What are the first names of students, ordered by age from greatest to least?", "sql": "SELECT Fname FROM STUDENT ORDER BY Age DESC"}, {"query": "Find the last name of female (sex is F) students in the descending order of age.", "sql": "SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC"}, {"query": "What are the last names of female students, ordered by age descending?", "sql": "SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC"}, {"query": "Find the last names of faculties in building Barton in alphabetic order.", "sql": "SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname"}, {"query": "What are the last names of faculty in building Barton, sorted by last name?", "sql": "SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname"}, {"query": "Find the first names of faculties of rank Professor in alphabetic order.", "sql": "SELECT Fname FROM FACULTY WHERE Rank  =  \"Professor\" ORDER BY Fname"}, {"query": "What are the first names for all faculty professors, ordered by first name?", "sql": "SELECT Fname FROM FACULTY WHERE Rank  =  \"Professor\" ORDER BY Fname"}, {"query": "Find the name of the department that has the biggest number of students minored in?", "sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name of the department with the most students minoring in it?", "sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the name of the department that has no students minored in?", "sql": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO"}, {"query": "What is the name of the department htat has no students minoring in it?", "sql": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO"}, {"query": "Find the name of the department that has the fewest members.", "sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1"}, {"query": "What is the name of the department with the fewest members?", "sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1"}, {"query": "Find the rank of the faculty that the fewest faculties belong to.", "sql": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1"}, {"query": "What is the least common faculty rank?", "sql": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1"}, {"query": "What are the first and last names of the instructors who teach the top 3 number of courses?", "sql": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3"}, {"query": "What are the full names of the 3 instructors who teach the most courses?", "sql": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3"}, {"query": "Which building does the instructor who teaches the most number of courses live in?", "sql": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1"}, {"query": "Give the building that the instructor who teaches the greatest number of courses lives in.", "sql": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the name of courses that have at least five enrollments?", "sql": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5"}, {"query": "Give the names of the courses with at least five enrollments.", "sql": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5"}, {"query": "Find the first name and last name of the instructor of course that has course name", "sql": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\""}, {"query": "What is the full name of the instructor who has a course named COMPUTER LITERACY?", "sql": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\""}, {"query": "Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE.", "sql": "SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\""}, {"query": "What are the department name and room for the course INTRODUCTION TO COMPUTER SCIENCE?", "sql": "SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\""}, {"query": "Find the student first and last names and grade points of all enrollments.", "sql": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID"}, {"query": "What are the full names and gradepoints for all enrollments?", "sql": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID"}, {"query": "Find the distinct student first names of all students that have grade point at least 3.8 in one course.", "sql": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8"}, {"query": "What are the distinct first names for students with a grade point of 3.8 or above in at least one course?", "sql": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8"}, {"query": "Find the full names of faculties who are members of department with department number 520.", "sql": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520"}, {"query": "What are the full names of faculty members who are a part of department 520?", "sql": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520"}, {"query": "What are the first names and last names of the students that minor in the department with DNO 140.", "sql": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140"}, {"query": "What are the full names of students minoring in department 140?", "sql": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140"}, {"query": "Find the last names of faculties who are members of computer science department.", "sql": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\""}, {"query": "What are the last names of faculty who are part of the computer science department?", "sql": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\""}, {"query": "Find the average grade point of student whose last name is Smith.", "sql": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\""}, {"query": "What is the average gradepoint for students with the last name Smith?", "sql": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\""}, {"query": "What is the maximum and minimum grade point of students who live in NYC?", "sql": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\""}, {"query": "Give the maximum and minimum gradepoints for students living in NYC?", "sql": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\""}, {"query": "Find the names of courses that have either 3 credits or 1 credit but 4 hours.", "sql": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4"}, {"query": "What are the names of courses that give either 3 credits, or 1 credit and 4 hours?", "sql": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4"}, {"query": "Find the names of departments that are either in division AS or in division EN and in Building NEB.", "sql": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\""}, {"query": "What are the names of departments either in division AS, or in division EN and in building NEB?", "sql": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\""}, {"query": "Find the first name of students not enrolled in any course.", "sql": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)"}, {"query": "What are the first names of all students that are not enrolled in courses?", "sql": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)"}, {"query": "What are the ids of the top three products that were purchased in the largest amount?", "sql": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3"}, {"query": "Give the ids of the three products purchased in the largest amounts.", "sql": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3"}, {"query": "What are the product id and product type of the cheapest product?", "sql": "SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1"}, {"query": "Give the id and product type of the product with the lowest price.", "sql": "SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1"}, {"query": "Find the number of different product types.", "sql": "SELECT count(DISTINCT product_type_code) FROM products"}, {"query": "Count the number of distinct product types.", "sql": "SELECT count(DISTINCT product_type_code) FROM products"}, {"query": "Return the address of customer 10.", "sql": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10"}, {"query": "What is the address for the customer with id 10?", "sql": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10"}, {"query": "What are the staff ids and genders of all staffs whose job title is Department Manager?", "sql": "SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\""}, {"query": "Return the staff ids and genders for any staff with the title Department Manager.", "sql": "SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\""}, {"query": "For each payment method, return how many customers use it.", "sql": "SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code"}, {"query": "How many customers use each payment method?", "sql": "SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code"}, {"query": "What is the id of the product that was ordered the most often?", "sql": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Give the product id for the product that was ordered most frequently.", "sql": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the name, phone number and email address of the customer who made the largest number of orders?", "sql": "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the name, phone number and email address for the customer with the most orders.", "sql": "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the average price for each type of product?", "sql": "SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code"}, {"query": "Return the average price for each product type.", "sql": "SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code"}, {"query": "How many department stores does the store chain South have?", "sql": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\""}, {"query": "Count the number of stores the chain South has.", "sql": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\""}, {"query": "What is the name and job title of the staff who was assigned the latest?", "sql": "SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1"}, {"query": "Return the name and job title of the staff with the latest date assigned.", "sql": "SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1"}, {"query": "Give me the product type, name and price for all the products supplied by supplier id 3.", "sql": "SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3"}, {"query": "Return the product type, name, and price for products supplied by supplier 3.", "sql": "SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3"}, {"query": "Return the distinct name of customers whose order status is Pending, in the order of customer id.", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id"}, {"query": "What are the distinct names of customers with an order status of Pending, sorted by customer id?", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id"}, {"query": "Find the name and address of the customers who have both New and Pending orders.", "sql": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\""}, {"query": "What are the names and addressed of customers who have both New and Pending orders?", "sql": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\""}, {"query": "Return ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products.", "sql": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)"}, {"query": "What are the ids of products from the supplier with id 2, which are more expensive than the average price across all products?", "sql": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)"}, {"query": "What is the id and name of the department store that has both marketing and managing department?", "sql": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\""}, {"query": "What are the ids and names of department stores with both marketing and managing departments?", "sql": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\""}, {"query": "What are the ids of the two department store chains with the largest number of department stores?", "sql": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2"}, {"query": "Return the ids of the two department store chains with the most department stores.", "sql": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2"}, {"query": "What is the id of the department with the least number of staff?", "sql": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1"}, {"query": "Return the id of the department with the fewest staff assignments.", "sql": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1"}, {"query": "For each product type, return the maximum and minimum price.", "sql": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code"}, {"query": "What are the maximum and minimum product prices for each product type?", "sql": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code"}, {"query": "Find the product type whose average price is higher than the average price of all products.", "sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)"}, {"query": "What is the code of the product type with an average price higher than the average price of all products?", "sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)"}, {"query": "Find the id and name of the staff who has been assigned for the shortest period.", "sql": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1"}, {"query": "What is the id and name of the staff who has been assigned for the least amount of time?", "sql": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1"}, {"query": "Return the names and ids of all products whose price is between 600 and 700.", "sql": "SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700"}, {"query": "What are the names and ids of products costing between 600 and 700?", "sql": "SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700"}, {"query": "Find the ids of all distinct customers who made order after some orders that were Cancelled.", "sql": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")"}, {"query": "What are the distinct ids of customers who made an order after any order that was Cancelled?", "sql": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")"}, {"query": "What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff?", "sql": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')"}, {"query": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.", "sql": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')"}, {"query": "What are the names and ids of customers whose address contains TN?", "sql": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\""}, {"query": "Return the names and ids of customers who have TN in their address.", "sql": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\""}, {"query": "Return the name and gender of the staff who was assigned in 2016.", "sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\""}, {"query": "What are the names and genders of staff who were assigned in 2016?", "sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\""}, {"query": "List the name of staff who has been assigned multiple jobs.", "sql": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1"}, {"query": "What are the names of staff who have been assigned multiple jobs?", "sql": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1"}, {"query": "List the name and phone number of all suppliers in the alphabetical order of their addresses.", "sql": "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details"}, {"query": "What are the names and phone numbers for all suppliers, sorted in alphabetical order of their addressed?", "sql": "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details"}, {"query": "What are the phone numbers of all customers and suppliers.", "sql": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers"}, {"query": "Return the phone numbers for all customers and suppliers.", "sql": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers"}, {"query": "Return the ids of all products that were ordered more than three times or supplied more than 80000.", "sql": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000"}, {"query": "What are the ids of all products that were either ordered more than 3 times or have a cumulative amount purchased of above 80000?", "sql": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000"}, {"query": "What are id and name of the products whose price is lower than 600 or higher than 900?", "sql": "SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900"}, {"query": "Give the ids and names of products with price lower than 600 or higher than 900.", "sql": "SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900"}, {"query": "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000.", "sql": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000"}, {"query": "What are the ids of suppliers which have an average amount purchased of above 50000 or below 30000?", "sql": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000"}, {"query": "What are the average amount purchased and value purchased for the supplier who supplies the most products.", "sql": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)"}, {"query": "Return the average total amount purchased and total value purchased for the supplier who supplies the greatest number of products.", "sql": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)"}, {"query": "What is the largest and smallest customer codes?", "sql": "SELECT max(customer_code) ,  min(customer_code) FROM Customers"}, {"query": "Return the maximum and minimum customer codes.", "sql": "SELECT max(customer_code) ,  min(customer_code) FROM Customers"}, {"query": "List the names of all the distinct customers who bought a keyboard.", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\""}, {"query": "What are the distinct names of customers who have purchased a keyboard?", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\""}, {"query": "List the names and phone numbers of all the distinct suppliers who supply red jeans.", "sql": "SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  \"red jeans\""}, {"query": "What are the distinct names and phone numbers for suppliers who have red jeans?", "sql": "SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  \"red jeans\""}, {"query": "What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type?", "sql": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code"}, {"query": "Give the maximum and minimum product prices for each product type, grouped and ordered by product type.", "sql": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code"}, {"query": "List the order id, customer id for orders in Cancelled status, ordered by their order dates.", "sql": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date"}, {"query": "What are the order ids and customer ids for orders that have been Cancelled, sorted by their order dates?", "sql": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date"}, {"query": "Find the names of products that were bought by at least two distinct customers.", "sql": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2"}, {"query": "What are the distinct names of products purchased by at least two different customers?", "sql": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2"}, {"query": "Find the names of customers who have bought by at least three distinct products.", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3"}, {"query": "What are the distinct names of customers who have purchased at least three different products?", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3"}, {"query": "Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.", "sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\""}, {"query": "What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff?", "sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\""}, {"query": "Find the id and name of customers whose address contains WY state and do not use credit card for payment.", "sql": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\""}, {"query": "What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment?", "sql": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\""}, {"query": "Find the average price of all product clothes.", "sql": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'"}, {"query": "What is the average price of clothes?", "sql": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'"}, {"query": "Find the name of the most expensive hardware product.", "sql": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1"}, {"query": "What is the name of the hardware product with the greatest price?", "sql": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1"}, {"query": "How many aircrafts are there?", "sql": "SELECT count(*) FROM aircraft"}, {"query": "What is the number of aircraft?", "sql": "SELECT count(*) FROM aircraft"}, {"query": "List the description of all aircrafts.", "sql": "SELECT Description FROM aircraft"}, {"query": "What are the descriptions for the aircrafts?", "sql": "SELECT Description FROM aircraft"}, {"query": "What is the average number of international passengers of all airports?", "sql": "SELECT avg(International_Passengers) FROM airport"}, {"query": "What is the average number of international passengers for an airport?", "sql": "SELECT avg(International_Passengers) FROM airport"}, {"query": "What are the number of international and domestic passengers of the airport named London \"Heathrow\"?", "sql": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\""}, {"query": "How many international and domestic passengers are there in the airport London Heathrow?", "sql": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\""}, {"query": "What are the total number of Domestic Passengers of airports that contain the word \"London\".", "sql": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\""}, {"query": "What are the total number of domestic passengers at all London airports?", "sql": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\""}, {"query": "What are the maximum and minimum number of transit passengers of all aiports.", "sql": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport"}, {"query": "What is the maximum and mininum number of transit passengers for all airports?", "sql": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport"}, {"query": "What are the name of pilots aged 25 or older?", "sql": "SELECT Name FROM pilot WHERE Age  >=  25"}, {"query": "what is the name of every pilot who is at least 25 years old?", "sql": "SELECT Name FROM pilot WHERE Age  >=  25"}, {"query": "List all pilot names in ascending alphabetical order.", "sql": "SELECT Name FROM pilot ORDER BY Name ASC"}, {"query": "What are the names of the pilots in alphabetical order?", "sql": "SELECT Name FROM pilot ORDER BY Name ASC"}, {"query": "List names of all pilot aged 30 or younger in descending alphabetical order.", "sql": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC"}, {"query": "What are the names of all pilots 30 years old or young in descending alphabetical order?", "sql": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC"}, {"query": "Please show the names of aircrafts associated with airport with name \"London Gatwick\".", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\""}, {"query": "What are the names of all the aircrafts associated with London Gatwick airport?", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\""}, {"query": "Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000.", "sql": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000"}, {"query": "What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?", "sql": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000"}, {"query": "What is the average total number of passengers of airports that are associated with aircraft \"Robinson R-22\"?", "sql": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\""}, {"query": "What is the average total number of passengers for all airports that the aircraft \"Robinson R-22\" visits?", "sql": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\""}, {"query": "Please list the location and the winning aircraft name.", "sql": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft"}, {"query": "What is the location and name of the winning aircraft?", "sql": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft"}, {"query": "List the name of the aircraft that has been named winning aircraft the most number of times.", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What is the name of the aircraft that has won an award the most?", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "List the names of aircrafts and the number of times it won matches.", "sql": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft"}, {"query": "For each aircraft that has won an award, what is its name and how many time has it won?", "sql": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft"}, {"query": "List names of all pilot in descending order of age.", "sql": "SELECT Name FROM pilot ORDER BY Age DESC"}, {"query": "What are the names of all pilots listed by descending age?", "sql": "SELECT Name FROM pilot ORDER BY Age DESC"}, {"query": "List the names of aircrafts and that won matches at least twice.", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2"}, {"query": "What are the names of all aircrafts that have won a match at least twice?", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2"}, {"query": "List the names of aircrafts and that did not win any match.", "sql": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)"}, {"query": "What are the names of all aicrafts that have never won any match?", "sql": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)"}, {"query": "Show the names of aircrafts that are associated with both an airport named \"London Heathrow\" and an airport named \"London Gatwick\"", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\""}, {"query": "What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\""}, {"query": "Show all information on the airport that has the largest number of international passengers.", "sql": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1"}, {"query": "What is all the information on the airport with the largest number of international passengers?", "sql": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1"}, {"query": "find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.", "sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name and age of the pilot younger than 30 who has won the most number of times?", "sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1"}, {"query": "what is the name and age of the youngest winning pilot?", "sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1"}, {"query": "How old is the youngest winning pilot and what is their name?", "sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1"}, {"query": "find the name of pilots who did not win the matches held in the country of Australia.", "sql": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')"}, {"query": "What are the names of the pilots that have not won any matches in Australia?", "sql": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')"}, {"query": "How many residents does each property have? List property id and resident count.", "sql": "SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id"}, {"query": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?", "sql": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'"}, {"query": "How many services has each resident requested? List the resident id, details, and the count in descending order of the count.", "sql": "SELECT T1.resident_id ,  T1.other_details ,  count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC"}, {"query": "What is the maximum number that a certain service is provided? List the service id, details and number.", "sql": "SELECT T1.service_id ,  T1.service_details ,  count(*) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id  =  T2.service_id GROUP BY T1.service_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "List the id and type of each thing, and the details of the organization that owns it.", "sql": "SELECT T1.thing_id ,  T1.type_of_Thing_Code ,  T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id  =  T2.organization_id"}, {"query": "What are the id and details of the customers who have at least 3 events?", "sql": "SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3"}, {"query": "What is each customer's move in date, and the corresponding customer id and details?", "sql": "SELECT T2.date_moved_in ,  T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id"}, {"query": "Which events have the number of notes between one and three? List the event id and the property id.", "sql": "SELECT T1.Customer_Event_ID  ,  T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID  =  T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3"}, {"query": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'", "sql": "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'"}, {"query": "How many distinct locations have the things with service detail 'Unsatisfied' been located in?", "sql": "SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  'Unsatisfied'"}, {"query": "How many different status codes of things are there?", "sql": "SELECT count(DISTINCT Status_of_Thing_Code) FROM Timed_Status_of_Things"}, {"query": "Which organizations are not a parent organization of others? List the organization id.", "sql": "SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations"}, {"query": "When is the last day any resident moved in?", "sql": "SELECT max(date_moved_in) FROM Residents"}, {"query": "What are the resident details containing the substring 'Miss'?", "sql": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'"}, {"query": "List the customer event id and the corresponding move in date and property id.", "sql": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events"}, {"query": "How many customers did not have any event?", "sql": "SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )"}, {"query": "What are the distinct move in dates of the residents?", "sql": "SELECT DISTINCT date_moved_in FROM residents"}, {"query": "How many schools are there?", "sql": "SELECT count(*) FROM school"}, {"query": "Count the number of schools.", "sql": "SELECT count(*) FROM school"}, {"query": "List the locations of schools in ascending order of enrollment.", "sql": "SELECT LOCATION FROM school ORDER BY Enrollment ASC"}, {"query": "What is the list of school locations sorted in ascending order of school enrollment?", "sql": "SELECT LOCATION FROM school ORDER BY Enrollment ASC"}, {"query": "List the locations of schools in descending order of founded year.", "sql": "SELECT LOCATION FROM school ORDER BY Founded DESC"}, {"query": "What is the list of school locations sorted in descending order of school foundation year?", "sql": "SELECT LOCATION FROM school ORDER BY Founded DESC"}, {"query": "What are the enrollments of schools whose denomination is not \"Catholic\"?", "sql": "SELECT Enrollment FROM school WHERE Denomination != \"Catholic\""}, {"query": "List the enrollment for each school that does not have \"Catholic\" as denomination.", "sql": "SELECT Enrollment FROM school WHERE Denomination != \"Catholic\""}, {"query": "What is the average enrollment of schools?", "sql": "SELECT avg(Enrollment) FROM school"}, {"query": "Take the average of the school enrollment.", "sql": "SELECT avg(Enrollment) FROM school"}, {"query": "What are the teams of the players, sorted in ascending alphabetical order?", "sql": "SELECT Team FROM player ORDER BY Team ASC"}, {"query": "Find the team of each player and sort them in ascending alphabetical order.", "sql": "SELECT Team FROM player ORDER BY Team ASC"}, {"query": "How many different positions of players are there?", "sql": "SELECT count(DISTINCT POSITION) FROM player"}, {"query": "Count the number of distinct player positions.", "sql": "SELECT count(DISTINCT POSITION) FROM player"}, {"query": "Find the team of the player of the highest age.", "sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 1"}, {"query": "Which team has the oldest player?", "sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 1"}, {"query": "List the teams of the players with the top 5 largest ages.", "sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5"}, {"query": "What are the teams that have the 5 oldest players?", "sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5"}, {"query": "For each player, show the team and the location of school they belong to.", "sql": "SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID"}, {"query": "What are the team and the location of school each player belongs to?", "sql": "SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID"}, {"query": "Show the locations of schools that have more than 1 player.", "sql": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1"}, {"query": "Which schools have more than 1 player? Give me the school locations.", "sql": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1"}, {"query": "Show the denomination of the school that has the most players.", "sql": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What is the denomination of the school the most players belong to?", "sql": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Show locations and nicknames of schools.", "sql": "SELECT T1.Location ,  T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID  =  T2.School_ID"}, {"query": "What are the location and nickname of each school?", "sql": "SELECT T1.Location ,  T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID  =  T2.School_ID"}, {"query": "Please show different denominations and the corresponding number of schools.", "sql": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination"}, {"query": "For each denomination, return the denomination and the count of schools with that denomination.", "sql": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination"}, {"query": "Please show different denominations and the corresponding number of schools in descending order.", "sql": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC"}, {"query": "Order denominations in descending order of the count of schools with the denomination. Return each denomination with the count of schools.", "sql": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC"}, {"query": "List the school color of the school that has the largest enrollment.", "sql": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1"}, {"query": "What is the school color of the school with the largest enrollment?", "sql": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1"}, {"query": "List the locations of schools that do not have any player.", "sql": "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)"}, {"query": "Which schools do not have any player? Give me the school locations.", "sql": "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)"}, {"query": "Show the denomination shared by schools founded before 1890 and schools founded after 1900", "sql": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900"}, {"query": "What are the denominations used by both schools founded before 1890 and schools founded  after 1900?", "sql": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900"}, {"query": "Show the nicknames of schools that are not in division 1.", "sql": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\""}, {"query": "What are the nicknames of schools whose division is not 1?", "sql": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\""}, {"query": "Show the denomination shared by more than one school.", "sql": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1"}, {"query": "What are the denomination more than one school have?", "sql": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1"}, {"query": "Find all the distinct district names ordered by city area in descending.", "sql": "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC"}, {"query": "What are the different district names in order of descending city area?", "sql": "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC"}, {"query": "Find the list of page size which have more than 3 product listed", "sql": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3"}, {"query": "What is the maximum page size for everything that has more than 3 products listed?", "sql": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3"}, {"query": "Find the name and population of district with population between 200000 and 2000000", "sql": "SELECT District_name ,  City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000"}, {"query": "What are the district names and city populations for all districts that between 200,000 and 2,000,000 residents?", "sql": "SELECT District_name ,  City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000"}, {"query": "Find the name all districts with city area greater than 10 or population larger than 100000", "sql": "SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000"}, {"query": "What are the names of all districts with a city area greater than 10 or have more than 100000 people living there?", "sql": "SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000"}, {"query": "Which district has the largest population?", "sql": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1"}, {"query": "What is the name of the district with the most residents?", "sql": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1"}, {"query": "Which district has the least area?", "sql": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1"}, {"query": "What is the name of the district with the smallest area?", "sql": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1"}, {"query": "Find the total population of the top 3 districts with the largest area.", "sql": "SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3"}, {"query": "What is the total number of residents for the districts with the 3 largest areas?", "sql": "SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3"}, {"query": "Find all types of store and number of them.", "sql": "SELECT TYPE ,  count(*) FROM store GROUP BY TYPE"}, {"query": "For each type of store, how many of them are there?", "sql": "SELECT TYPE ,  count(*) FROM store GROUP BY TYPE"}, {"query": "Find the names of all stores in Khanewal District.", "sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\""}, {"query": "What are the names of all the stores located in Khanewal District?", "sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\""}, {"query": "Find all the stores in the district with the most population.", "sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)"}, {"query": "What are the names of all the stores in the largest district by population?", "sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)"}, {"query": "Which city is the headquarter of the store named \"Blackville\" in?", "sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\""}, {"query": "What city is the headquarter of the store Blackville?", "sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\""}, {"query": "Find the number of stores in each city.", "sql": "SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city"}, {"query": "How many stores are headquarted in each city?", "sql": "SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city"}, {"query": "Find the city with the most number of stores.", "sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the city with the most number of flagship stores?", "sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the average pages per minute color?", "sql": "SELECT avg(pages_per_minute_color) FROM product"}, {"query": "What is the average number of pages per minute color?", "sql": "SELECT avg(pages_per_minute_color) FROM product"}, {"query": "What products are available at store named \"Miramichi\"?", "sql": "SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id  =  t2.product_id JOIN store AS t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  \"Miramichi\""}, {"query": "What products are sold at the store named Miramichi?", "sql": "SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id  =  t2.product_id JOIN store AS t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  \"Miramichi\""}, {"query": "Find products with max page size as \"A4\" and pages per minute color smaller than 5.", "sql": "SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5"}, {"query": "What are the products with the maximum page size A4 that also have a pages per minute color smaller than 5?", "sql": "SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5"}, {"query": "Find products with max page size as \"A4\" or pages per minute color smaller than 5.", "sql": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5"}, {"query": "What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?", "sql": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5"}, {"query": "Find all the product whose name contains the word \"Scanner\".", "sql": "SELECT product FROM product WHERE product LIKE \"%Scanner%\""}, {"query": "What are all of the products whose name includes the substring \"Scanner\"?", "sql": "SELECT product FROM product WHERE product LIKE \"%Scanner%\""}, {"query": "Find the most prominent max page size among all the products.", "sql": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the most common maximum page size?", "sql": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the name of the products that are not using the most frequently-used max page size.", "sql": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)"}, {"query": "What are the names of all products that are not the most frequently-used maximum page size?", "sql": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)"}, {"query": "Find the total population of the districts where the area is bigger than the average city area.", "sql": "SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)"}, {"query": "What is the total population for all the districts that have an area larger tahn the average city area?", "sql": "SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)"}, {"query": "Find the names of districts where have both city mall and village store type stores.", "sql": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\""}, {"query": "What are the names of the districts that have both mall and village store style shops?", "sql": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\""}, {"query": "What is the total enrollment number of all colleges?", "sql": "SELECT sum(enr) FROM College"}, {"query": "How many students are enrolled in college?", "sql": "SELECT sum(enr) FROM College"}, {"query": "What is the average enrollment number?", "sql": "SELECT avg(enr) FROM College"}, {"query": "How many students, on average, does each college have enrolled?", "sql": "SELECT avg(enr) FROM College"}, {"query": "How many colleges in total?", "sql": "SELECT count(*) FROM College"}, {"query": "How many different colleges are there?", "sql": "SELECT count(*) FROM College"}, {"query": "How many players have more than 1000 hours of training?", "sql": "SELECT count(*) FROM Player WHERE HS  >  1000"}, {"query": "How many different players trained for more than 1000 hours?", "sql": "SELECT count(*) FROM Player WHERE HS  >  1000"}, {"query": "How many colleges has more than 15000 students?", "sql": "SELECT count(*) FROM College WHERE enr  >  15000"}, {"query": "What is the number of colleges with a student population greater than 15000?", "sql": "SELECT count(*) FROM College WHERE enr  >  15000"}, {"query": "What is the average training hours of all players?", "sql": "SELECT avg(HS) FROM Player"}, {"query": "How many hours do the players train on average?", "sql": "SELECT avg(HS) FROM Player"}, {"query": "Find the name and training hours of players whose hours are below 1500.", "sql": "SELECT pName ,  HS FROM Player WHERE HS  <  1500"}, {"query": "What are the names and number of hours spent training for each player who trains for less than 1500 hours?", "sql": "SELECT pName ,  HS FROM Player WHERE HS  <  1500"}, {"query": "How many different colleges do attend the tryout test?", "sql": "SELECT count(DISTINCT cName) FROM tryout"}, {"query": "How many different colleges were represented at tryouts?", "sql": "SELECT count(DISTINCT cName) FROM tryout"}, {"query": "What are the unique types of player positions in the tryout?", "sql": "SELECT count(DISTINCT pPos) FROM tryout"}, {"query": "What are the different types of player positions?", "sql": "SELECT count(DISTINCT pPos) FROM tryout"}, {"query": "How many students got accepted after the tryout?", "sql": "SELECT count(*) FROM tryout WHERE decision  =  'yes'"}, {"query": "How many students received a yes from tryouts?", "sql": "SELECT count(*) FROM tryout WHERE decision  =  'yes'"}, {"query": "How many students whose are playing the role of goalie?", "sql": "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'"}, {"query": "What is the number of students playing as a goalie?", "sql": "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'"}, {"query": "Find the max, average and min training hours of all players.", "sql": "SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player"}, {"query": "What is the average, maximum, and minimum for the number of hours spent training?", "sql": "SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player"}, {"query": "What is average enrollment of colleges in the state FL?", "sql": "SELECT avg(enr) FROM College WHERE state  =  'FL'"}, {"query": "What is average number of students enrolled in Florida colleges?", "sql": "SELECT avg(enr) FROM College WHERE state  =  'FL'"}, {"query": "What are the names of players whose training hours is between 500 and 1500?", "sql": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500"}, {"query": "What are the names of players who train between 500 and 1500 hours?", "sql": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500"}, {"query": "Find the players whose names contain letter 'a'.", "sql": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'"}, {"query": "Who are the players that have names containing the letter a?", "sql": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'"}, {"query": "Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.", "sql": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\""}, {"query": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?", "sql": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\""}, {"query": "List all information about college sorted by enrollment number in the ascending order.", "sql": "SELECT * FROM College ORDER BY enr"}, {"query": "What information do you have on colleges sorted by increasing enrollment numbers?", "sql": "SELECT * FROM College ORDER BY enr"}, {"query": "List the name of the colleges whose enrollment is greater 18000 sorted by the college's name.", "sql": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName"}, {"query": "What is the name of every college in alphabetical order that has more than 18000 students enrolled?", "sql": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName"}, {"query": "Find the name of players whose card is yes in the descending order of training hours.", "sql": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC"}, {"query": "What are the name of the players who received a card in descending order of the hours of training?", "sql": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC"}, {"query": "Find the name of different colleges involved in the tryout in alphabetical order.", "sql": "SELECT DISTINCT cName FROM tryout ORDER BY cName"}, {"query": "What are the different names of the colleges involved in the tryout in alphabetical order?", "sql": "SELECT DISTINCT cName FROM tryout ORDER BY cName"}, {"query": "Which position is most popular among players in the tryout?", "sql": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1"}, {"query": "What was the most popular position at tryouts?", "sql": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the number of students who participate in the tryout for each college ordered by descending count.", "sql": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC"}, {"query": "How many students participated in tryouts for each college by descennding count?", "sql": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC"}, {"query": "What is minimum hours of the students playing in different position?", "sql": "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos"}, {"query": "For each position, what is the minimum time students spent practicing?", "sql": "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos"}, {"query": "What are the names of schools with the top 3 largest size?", "sql": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3"}, {"query": "What are the names of the schools with the top 3 largest class sizes?", "sql": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3"}, {"query": "What is the name of school that has the smallest enrollment in each state?", "sql": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state"}, {"query": "What is the name of the school with smallest enrollment size per state?", "sql": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state"}, {"query": "Find the states where have some college students in tryout.", "sql": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName"}, {"query": "What are the different states that have students trying out?", "sql": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName"}, {"query": "Find the states where have some college students in tryout and their decisions are yes.", "sql": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'"}, {"query": "What are the different states that had students successfully try out?", "sql": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'"}, {"query": "Find the name and college of students whose decisions are yes in the tryout.", "sql": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'"}, {"query": "What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges?", "sql": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'"}, {"query": "Find the name of all students who were in the tryout sorted in alphabetic order.", "sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName"}, {"query": "What are the names of all students who tried out in alphabetical order?", "sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName"}, {"query": "Find the name and hours of the students whose tryout decision is yes.", "sql": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'"}, {"query": "What are the names and hours spent practicing of every student who received a yes at tryouts?", "sql": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'"}, {"query": "Find the states of the colleges that have students in the tryout who played in striker position.", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'"}, {"query": "What are the states of the colleges where students who tried out for the striker position attend?", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'"}, {"query": "Find the names of the students who are in the position of striker and got a yes tryout decision.", "sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'"}, {"query": "What are the names of all students who successfully tried out for the position of striker?", "sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'"}, {"query": "Find the state of the college which player Charles is attending.", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'"}, {"query": "In which state is the college that Charles attends?", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'"}, {"query": "Find the average and maximum hours for the students whose tryout decision is yes.", "sql": "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'"}, {"query": "What is the average and maximum number of hours students who made the team practiced?", "sql": "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'"}, {"query": "Find the average hours for the students whose tryout decision is no.", "sql": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'"}, {"query": "What is the average number of hours spent practicing for students who got rejected?", "sql": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'"}, {"query": "What is the maximum training hours for the students whose training hours is greater than 1000 in different positions?", "sql": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos"}, {"query": "For each position, what is the maximum number of  hours for students who spent more than 1000 hours training?", "sql": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos"}, {"query": "Which colleges do the tryout players whose name starts with letter D go to?", "sql": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'"}, {"query": "Which colleges does each player with a name that starts with the letter D  who tried out go to?", "sql": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'"}, {"query": "Which college has any student who is a goalie and succeeded in the tryout.", "sql": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'"}, {"query": "What college has a student who successfully made the team in the role of a goalie?", "sql": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'"}, {"query": "Find the name of the tryout players who are from the college with largest size.", "sql": "SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)"}, {"query": "What are the names of all tryout participants who are from the largest college?", "sql": "SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)"}, {"query": "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.", "sql": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'"}, {"query": "How many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges?", "sql": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'"}, {"query": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.", "sql": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\""}, {"query": "What are the names of colleges in LA that have more than 15,000 students and of colleges in AZ with less than 13,000 students?", "sql": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\""}, {"query": "Find the names of schools that have some students playing in goalie and mid positions.", "sql": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'"}, {"query": "What are the names of all schools that have students trying out for the position of goal and 'mid'-field.", "sql": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'"}, {"query": "Find the names of states that have some college students playing in goalie and mid positions.", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'"}, {"query": "What are the names of the states that have some college students playing in the positions of goalie and mid-field?", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'"}, {"query": "How many schools have some students playing in goalie and mid positions.", "sql": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')"}, {"query": "How many schools have students playing in goalie and mid-field positions?", "sql": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')"}, {"query": "Find the names of schools that have some players in the mid position but not in the goalie position.", "sql": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'"}, {"query": "What are the names of the schools with some players in the mid position but no goalies?", "sql": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'"}, {"query": "Find the names of states that have some college students playing in the mid position but not in the goalie position.", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'"}, {"query": "What are the names of all the states with college students playing in the mid position but no goalies?", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'"}, {"query": "How many states that have some college students playing in the mid position but not in the goalie position.", "sql": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')"}, {"query": "What is the count of states with college students playing in the mid position but not as goalies?", "sql": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')"}, {"query": "Find the states where have the colleges whose enrollments are less than the largest size.", "sql": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)"}, {"query": "What are the states with colleges that have enrollments less than the some other college?", "sql": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)"}, {"query": "Find names of colleges with enrollment greater than that of some (at least one) college in the FL state.", "sql": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')"}, {"query": "What are the names of the colleges that are larger than at least one college in Florida?", "sql": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')"}, {"query": "Find names of all colleges whose enrollment is greater than that of all colleges in the FL state.", "sql": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')"}, {"query": "What are the names of all colleges with a larger enrollment than the largest college in Florida?", "sql": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')"}, {"query": "What is the total number of enrollment of schools that do not have any goalie player?", "sql": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")"}, {"query": "What is the total number of students enrolled in schools without any goalies?", "sql": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")"}, {"query": "What is the number of states that has some college whose enrollment is larger than the average enrollment?", "sql": "SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)"}, {"query": "How many states have a college with more students than average?", "sql": "SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)"}, {"query": "What is the number of states that has some colleges whose enrollment is smaller than the average enrollment?", "sql": "SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)"}, {"query": "How many states have smaller colleges than average?", "sql": "SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)"}, {"query": "How many devices are there?", "sql": "SELECT count(*) FROM device"}, {"query": "Count the number of devices.", "sql": "SELECT count(*) FROM device"}, {"query": "List the carriers of devices in ascending alphabetical order.", "sql": "SELECT Carrier FROM device ORDER BY Carrier ASC"}, {"query": "What are the different carriers for devices, listed in alphabetical order?", "sql": "SELECT Carrier FROM device ORDER BY Carrier ASC"}, {"query": "What are the carriers of devices whose software platforms are not \"Android\"?", "sql": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'"}, {"query": "Return the device carriers that do not have Android as their software platform.", "sql": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'"}, {"query": "What are the names of shops in ascending order of open year?", "sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC"}, {"query": "Return the names of shops, ordered by year of opening ascending.", "sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC"}, {"query": "What is the average quantity of stocks?", "sql": "SELECT avg(Quantity) FROM stock"}, {"query": "Give the average quantity of stocks.", "sql": "SELECT avg(Quantity) FROM stock"}, {"query": "What are the names and location of the shops in ascending alphabetical order of name.", "sql": "SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC"}, {"query": "Return the names and locations of shops, ordered by name in alphabetical order.", "sql": "SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC"}, {"query": "How many different software platforms are there for devices?", "sql": "SELECT count(DISTINCT Software_Platform) FROM device"}, {"query": "Count the number of different software platforms.", "sql": "SELECT count(DISTINCT Software_Platform) FROM device"}, {"query": "List the open date of open year of the shop named \"Apple\".", "sql": "SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  \"Apple\""}, {"query": "What are the open dates and years for the shop named Apple?", "sql": "SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  \"Apple\""}, {"query": "List the name of the shop with the latest open year.", "sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1"}, {"query": "What is the shop name corresponding to the shop that opened in the most recent year?", "sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1"}, {"query": "Show names of shops and the carriers of devices they have in stock.", "sql": "SELECT T3.Shop_Name ,  T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID  =  T3.Shop_ID"}, {"query": "What are the names of device shops, and what are the carriers that they carry devices in stock for?", "sql": "SELECT T3.Shop_Name ,  T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID  =  T3.Shop_ID"}, {"query": "Show names of shops that have more than one kind of device in stock.", "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1"}, {"query": "What are the names of shops that have more than a single kind of device in stock?", "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1"}, {"query": "Show the name of the shop that has the most kind of devices in stock.", "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What is the name of the shop that has the most different kinds of devices in stock?", "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Show the name of the shop that have the largest quantity of devices in stock.", "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1"}, {"query": "What is the name of the shop that has the greatest quantity of devices in stock?", "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1"}, {"query": "Please show different software platforms and the corresponding number of devices using each.", "sql": "SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform"}, {"query": "What are the different software platforms for devices, and how many devices have each?", "sql": "SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform"}, {"query": "Please show the software platforms of devices in descending order of the count.", "sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC"}, {"query": "What are the different software platforms for devices, ordered by frequency descending?", "sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC"}, {"query": "List the software platform shared by the greatest number of devices.", "sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What is the software platform that is most common amongst all devices?", "sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "List the names of shops that have no devices in stock.", "sql": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)"}, {"query": "What are the names of shops that do not have any devices in stock?", "sql": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)"}, {"query": "Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.", "sql": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008"}, {"query": "Which locations contains both shops that opened after the year 2012 and shops that opened before 2008?", "sql": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008"}, {"query": "List the carriers of devices that have no devices in stock.", "sql": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)"}, {"query": "What are the carriers of devices that are not in stock anywhere?", "sql": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)"}, {"query": "Show the carriers of devices in stock at more than one shop.", "sql": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1"}, {"query": "What are the carriers of devices that are in stock in more than a single shop?", "sql": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1"}, {"query": "How many bookings do we have?", "sql": "SELECT count(*) FROM BOOKINGS"}, {"query": "Count the total number of bookings made.", "sql": "SELECT count(*) FROM BOOKINGS"}, {"query": "List the order dates of all the bookings.", "sql": "SELECT Order_Date FROM BOOKINGS"}, {"query": "What is the order date of each booking?", "sql": "SELECT Order_Date FROM BOOKINGS"}, {"query": "Show all the planned delivery dates and actual delivery dates of bookings.", "sql": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS"}, {"query": "What are the planned delivery date and actual delivery date for each booking?", "sql": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS"}, {"query": "How many customers do we have?", "sql": "SELECT count(*) FROM CUSTOMERS"}, {"query": "Count the number of customers recorded.", "sql": "SELECT count(*) FROM CUSTOMERS"}, {"query": "What are the phone and email for customer Harold?", "sql": "SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  \"Harold\""}, {"query": "Find the phone number and email address of customer \"Harold\".", "sql": "SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  \"Harold\""}, {"query": "Show all the Store_Name of drama workshop groups.", "sql": "SELECT Store_Name FROM Drama_Workshop_Groups"}, {"query": "What are the store names of drama workshop groups?", "sql": "SELECT Store_Name FROM Drama_Workshop_Groups"}, {"query": "Show the minimum, average, maximum order quantity of all invoices.", "sql": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES"}, {"query": "What are the minimum, average, and maximum quantities ordered? Check all the invoices.", "sql": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES"}, {"query": "What are the distinct payment method codes in all the invoices?", "sql": "SELECT DISTINCT payment_method_code FROM INVOICES"}, {"query": "Show me the distinct payment method codes from the invoice record.", "sql": "SELECT DISTINCT payment_method_code FROM INVOICES"}, {"query": "What is the description of the marketing region China?", "sql": "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name  =  \"China\""}, {"query": "Find the marketing region description of China?", "sql": "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name  =  \"China\""}, {"query": "Show all the distinct product names with price higher than the average.", "sql": "SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS)"}, {"query": "What are the distinct names of the products that cost more than the average?", "sql": "SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS)"}, {"query": "What is the name of the most expensive product?", "sql": "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1"}, {"query": "Tell me the name of the most pricy product.", "sql": "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1"}, {"query": "List all product names in ascending order of price.", "sql": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC"}, {"query": "Sort the names of products in ascending order of their price.", "sql": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC"}, {"query": "What is the phone number of the performer Ashley?", "sql": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\""}, {"query": "Find the phone number of performer \"Ashley\".", "sql": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\""}, {"query": "Show all payment method codes and the number of orders for each code.", "sql": "SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code"}, {"query": "List the distinct payment method codes with the number of orders made", "sql": "SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code"}, {"query": "What is the payment method code used by the most orders?", "sql": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the payment method that is used the most often in all the invoices. Give me its code.", "sql": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which city is the address of the store named \"FJA Filming\" located in?", "sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\""}, {"query": "Find the city the store named \"FJA Filming\" is in.", "sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\""}, {"query": "What are the states or counties of the address of the stores with marketing region code \"CA\"?", "sql": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  \"CA\""}, {"query": "Find the states or counties where the stores with marketing region code \"CA\" are located.", "sql": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  \"CA\""}, {"query": "What is the name of the marketing region that the store Rob Dinning belongs to?", "sql": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  \"Rob Dinning\""}, {"query": "Return the name of the marketing region the store Rob Dinning is located in.", "sql": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  \"Rob Dinning\""}, {"query": "What are the descriptions of the service types with product price above 100?", "sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Price  >  100"}, {"query": "Give me the descriptions of the service types that cost more than 100.", "sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Price  >  100"}, {"query": "What is the description, code and the corresponding count of each service type?", "sql": "SELECT T1.Service_Type_Description ,  T2.Service_Type_Code ,  COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T2.Service_Type_Code"}, {"query": "List the description, code and the number of services for each service type.", "sql": "SELECT T1.Service_Type_Description ,  T2.Service_Type_Code ,  COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T2.Service_Type_Code"}, {"query": "What is the description and code of the type of service that is performed the most often?", "sql": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Find the description and code of the service type that is performed the most times.", "sql": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What are the phones and emails of workshop groups in which services are performed?", "sql": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID"}, {"query": "Give me all the phone numbers and email addresses of the workshop groups where services are performed.", "sql": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID"}, {"query": "What are the names of workshop groups in which services with product name \"film\" are performed?", "sql": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T2.Product_Name  =  \"film\""}, {"query": "Find the names of the workshop groups where services with product name \"film\" are performed.", "sql": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T2.Product_Name  =  \"film\""}, {"query": "What are the different product names? What is the average product price for each of them?", "sql": "SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name"}, {"query": "For each distinct product name, show its average product price.", "sql": "SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name"}, {"query": "What are the product names with average product price smaller than 1000000?", "sql": "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000"}, {"query": "Find the product names whose average product price is below 1000000.", "sql": "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000"}, {"query": "What are the total order quantities of photo products?", "sql": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\""}, {"query": "Compute the total order quantities of the product \"photo\".", "sql": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\""}, {"query": "What are the order details of the products with price higher than 2000?", "sql": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000"}, {"query": "Find the order detail for the products with price above 2000.", "sql": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000"}, {"query": "What are the actual delivery dates of orders with quantity 1?", "sql": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1"}, {"query": "List the actual delivery date for all the orders with quantity 1", "sql": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1"}, {"query": "What are the order dates of orders with price higher than 1000?", "sql": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID JOIN Products AS T3 ON T2.Product_ID  =  T3.Product_ID WHERE T3.Product_price  >  1000"}, {"query": "Find the order dates of the orders with price above 1000.", "sql": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID JOIN Products AS T3 ON T2.Product_ID  =  T3.Product_ID WHERE T3.Product_price  >  1000"}, {"query": "How many distinct currency codes are there for all drama workshop groups?", "sql": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups"}, {"query": "Find the number of distinct currency codes used in drama workshop groups.", "sql": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups"}, {"query": "What are the names of the drama workshop groups with address in Feliciaberg city?", "sql": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\""}, {"query": "Return the the names of the drama workshop groups that are located in Feliciaberg city.", "sql": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\""}, {"query": "What are the email addresses of the drama workshop groups with address in Alaska state?", "sql": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\""}, {"query": "List the email addresses of the drama workshop groups located in Alaska state.", "sql": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\""}, {"query": "Show all cities along with the number of drama workshop groups in each city.", "sql": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town"}, {"query": "How many drama workshop groups are there in each city? Return both the city and the count.", "sql": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town"}, {"query": "What is the marketing region code that has the most drama workshop groups?", "sql": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which marketing region has the most drama workshop groups? Give me the region code.", "sql": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show all cities where at least one customer lives in but no performer lives in.", "sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID"}, {"query": "Which cities have at least one customer but no performer?", "sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID"}, {"query": "What is the most frequent status of bookings?", "sql": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which status code is the most common of all the bookings?", "sql": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the names of the workshop groups that have bookings with status code \"stop\"?", "sql": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\""}, {"query": "Which workshop groups have bookings with status code \"stop\"? Give me the names.", "sql": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\""}, {"query": "Show the names of all the clients with no booking.", "sql": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID"}, {"query": "What are the names of the clients who do not have any booking?", "sql": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID"}, {"query": "What is the average quantities ordered with payment method code \"MasterCard\" on invoices?", "sql": "SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  \"MasterCard\""}, {"query": "Check the invoices record and compute the average quantities ordered with the payment method \"MasterCard\".", "sql": "SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  \"MasterCard\""}, {"query": "What is the product ID of the most frequently ordered item on invoices?", "sql": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Find the id of the product ordered the most often on invoices.", "sql": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What is the description of the service type which offers both the photo product and the film product?", "sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film'"}, {"query": "Give me the description of the service type that offers not only the photo product but also the film product.", "sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film'"}, {"query": "How many bands are there?", "sql": "SELECT count(*) FROM Band"}, {"query": "Find the number of bands.", "sql": "SELECT count(*) FROM Band"}, {"query": "What are all the labels?", "sql": "SELECT DISTINCT label FROM Albums"}, {"query": "What are the different album labels listed?", "sql": "SELECT DISTINCT label FROM Albums"}, {"query": "Find all the albums in 2012.", "sql": "SELECT * FROM Albums WHERE YEAR  =  2012"}, {"query": "return all columns of the albums created in the year of 2012.", "sql": "SELECT * FROM Albums WHERE YEAR  =  2012"}, {"query": "Find all the stage positions of the musicians with first name \"Solveig\"", "sql": "SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  \"Solveig\""}, {"query": "What are the different stage positions for all musicians whose first name is \"Solveig\"?", "sql": "SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  \"Solveig\""}, {"query": "How many songs are there?", "sql": "SELECT count(*) FROM Songs"}, {"query": "Count the number of songs.", "sql": "SELECT count(*) FROM Songs"}, {"query": "Find all the songs performed by artist with last name \"Heilo\"", "sql": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  \"Heilo\""}, {"query": "What are the names of the songs by the artist whose last name is \"Heilo\"?", "sql": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  \"Heilo\""}, {"query": "Hom many musicians performed in the song \"Flash\"?", "sql": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\""}, {"query": "How many musicians play in the song \"Flash\"?", "sql": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\""}, {"query": "Find all the songs produced by artists with first name \"Marianne\".", "sql": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.firstname  =  \"Marianne\""}, {"query": "What are the names of all songs produced by the artist with the first name \"Marianne\"?", "sql": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.firstname  =  \"Marianne\""}, {"query": "Who performed the song named \"Badlands\"? Show the first name and the last name.", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\""}, {"query": "What are the first and last names of the artist who perfomed the song \"Badlands\"?", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\""}, {"query": "Who is performing in the back stage position for the song \"Badlands\"? Show the first name and the last name.", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\""}, {"query": "What are the first and last names of the performer who was in the back stage position for the song \"Badlands\"?", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\""}, {"query": "How many unique labels are there for albums?", "sql": "SELECT count(DISTINCT label) FROM albums"}, {"query": "What are the unique labels for the albums?", "sql": "SELECT count(DISTINCT label) FROM albums"}, {"query": "What is the label that has the most albums?", "sql": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the label with the most albums?", "sql": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the last name of the musician that have produced the most number of songs?", "sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the last name of the musician who was in the most songs?", "sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the last name of the musician that has been at the back position the most?", "sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the last name of the musicians who has played back position the most?", "sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find all the songs whose name contains the word \"the\".", "sql": "SELECT title FROM songs WHERE title LIKE '% the %'"}, {"query": "What are the names of the songs whose title has the word \"the\"?", "sql": "SELECT title FROM songs WHERE title LIKE '% the %'"}, {"query": "What are all the instruments used?", "sql": "SELECT DISTINCT instrument FROM Instruments"}, {"query": "What are the different instruments listed in the database?", "sql": "SELECT DISTINCT instrument FROM Instruments"}, {"query": "What instrument did the musician with last name \"Heilo\" use in the song \"Le Pop\"?", "sql": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Le Pop\""}, {"query": "What instruments did the musician with the last name \"Heilo\" play in the song \"Le Pop\"?", "sql": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Le Pop\""}, {"query": "What is the most used instrument?", "sql": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1"}, {"query": "What instrument is used the most?", "sql": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1"}, {"query": "How many songs have used the instrument \"drums\"?", "sql": "SELECT count(*) FROM instruments WHERE instrument  =  \"drums\""}, {"query": "How many songs use drums as an instrument?", "sql": "SELECT count(*) FROM instruments WHERE instrument  =  \"drums\""}, {"query": "What instruments does the the song \"Le Pop\" use?", "sql": "SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\""}, {"query": "What are the instruments are used in the song \"Le Pop\"?", "sql": "SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\""}, {"query": "How many instruments does the song \"Le Pop\" use?", "sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\""}, {"query": "How many different instruments are used in the song \"Le Pop\"?", "sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\""}, {"query": "How many instrument does the musician with last name \"Heilo\" use?", "sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\""}, {"query": "How many different instruments does the musician with the last name \"Heilo\" use?", "sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\""}, {"query": "Find all the instruments ever used by the musician with last name \"Heilo\"?", "sql": "SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\""}, {"query": "What are all the instruments used by the musician with the last name \"Heilo\"?", "sql": "SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\""}, {"query": "Which song has the most vocals?", "sql": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the song with the most vocals?", "sql": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which vocal type is the most frequently appearring type?", "sql": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the type of vocables that appears most frequently?", "sql": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which vocal type has the band mate with last name \"Heilo\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the type of vocals that the band member with the last name \"Heilo\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the vocal types used in song \"Le Pop\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\""}, {"query": "What are the types of vocals used in the song \"Le Pop\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\""}, {"query": "Find the number of vocal types used in song \"Demon Kitty Rag\"?", "sql": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Demon Kitty Rag\""}, {"query": "What are the types of vocals used in the song \"Demon Kitty Rag\"?", "sql": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Demon Kitty Rag\""}, {"query": "How many songs have a lead vocal?", "sql": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"lead\""}, {"query": "How many songs have vocals of type lead?", "sql": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"lead\""}, {"query": "Which vocal type did the musician with first name \"Solveig\" played in the song with title \"A Bar in Amsterdam\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  \"Solveig\" AND T2.title  =  \"A Bar In Amsterdam\""}, {"query": "What are the types of vocals that the musician with the first name \"Solveig\" played in the song \"A Bar in Amsterdam\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  \"Solveig\" AND T2.title  =  \"A Bar In Amsterdam\""}, {"query": "Find all the songs that do not have a lead vocal.", "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\""}, {"query": "What are the names of the songs without a lead vocal?", "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\""}, {"query": "Find all the vocal types.", "sql": "SELECT DISTINCT TYPE FROM vocals"}, {"query": "What are the different types of vocals?", "sql": "SELECT DISTINCT TYPE FROM vocals"}, {"query": "What are the albums produced in year 2010?", "sql": "SELECT * FROM Albums WHERE YEAR  =  2010"}, {"query": "What information is there on albums from 2010?", "sql": "SELECT * FROM Albums WHERE YEAR  =  2010"}, {"query": "Who performed the song named \"Le Pop\"?", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\""}, {"query": "What is the first and last name of artist who performed \"Le Pop\"?", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\""}, {"query": "What is the last name of the musician that have produced the most songs?", "sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the last name of the artist who sang the most songs?", "sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1"}, {"query": "What instrument did the musician with last name \"Heilo\" use in the song \"Badlands\"?", "sql": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Badlands\""}, {"query": "What instruments did the musician with the last name \"Heilo\" play in \"Badlands\"?", "sql": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Badlands\""}, {"query": "How many instruments does the song \"Badlands\" use?", "sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\""}, {"query": "How many different instruments are used in the song \"Badlands\"?", "sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\""}, {"query": "What are the vocal types used in song \"Badlands\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\""}, {"query": "What types of vocals are used in the song \"Badlands\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\""}, {"query": "Find the number of vocal types used in song \"Le Pop\"", "sql": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\""}, {"query": "How many vocal types are used in the song \"Le Pop\"?", "sql": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\""}, {"query": "How many songs have a shared vocal?", "sql": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\""}, {"query": "How many different songs have shared vocals?", "sql": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\""}, {"query": "Find all the songs that do not have a back vocal.", "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\""}, {"query": "What are the different names of all songs without back vocals?", "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\""}, {"query": "Which vocal type has the band mate with first name \"Solveig\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the types of vocals that the band member with the first name \"Solveig\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which vocal type did the musician with last name \"Heilo\" played in the song with title \"Der Kapitan\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\""}, {"query": "What are the types of vocals that the musician with the last name \"Heilo\" played in \"Der Kapitan\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\""}, {"query": "Find the first name of the band mate that has performed in most songs.", "sql": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the first name of the band mate who perfomed in the most songs?", "sql": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which vocal type has the band mate with first name \"Marianne\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Marianne\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the vocal type of the band mate whose first name is \"Marianne\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Marianne\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"}, {"query": "Who is performing in the back stage position for the song \"Der Kapitan\"? Show the first name and last name.", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\""}, {"query": "What is the first and last name of the artist who performed back stage for the song \"Der Kapitan\"?", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\""}, {"query": "Find the name of songs that does not have a back vocal.", "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\""}, {"query": "What are the names of the songs that do not have back vocals?", "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\""}, {"query": "What are the songs in album \"A Kiss Before You Go: Live in Hamburg\"?", "sql": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  \"A Kiss Before You Go: Live in Hamburg\""}, {"query": "What are the song titles on the album \"A Kiss Before You Go: Live in Hamburg\"?", "sql": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  \"A Kiss Before You Go: Live in Hamburg\""}, {"query": "What are all the songs in albums under label \"Universal Music Group\"?", "sql": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  \"Universal Music Group\""}, {"query": "What are the names of all the songs whose album is under the label of \"Universal Music Group\"?", "sql": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  \"Universal Music Group\""}, {"query": "Find the number of songs in all the studio albums.", "sql": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  \"Studio\""}, {"query": "How many songs appear in studio albums?", "sql": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  \"Studio\""}, {"query": "Who is the founder of Sony?", "sql": "SELECT founder FROM manufacturers WHERE name  =  'Sony'"}, {"query": "Return the founder of Sony.", "sql": "SELECT founder FROM manufacturers WHERE name  =  'Sony'"}, {"query": "Where is the headquarter of the company founded by James?", "sql": "SELECT headquarter FROM manufacturers WHERE founder  =  'James'"}, {"query": "What is the headquarter of the company whose founder is James?", "sql": "SELECT headquarter FROM manufacturers WHERE founder  =  'James'"}, {"query": "Find all manufacturers' names and their headquarters, sorted by the ones with highest revenue first.", "sql": "SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC"}, {"query": "What are the names and headquarters of all manufacturers, ordered by revenue descending?", "sql": "SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC"}, {"query": "What are the average, maximum and total revenues of all companies?", "sql": "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers"}, {"query": "Return the average, maximum, and total revenues across all manufacturers.", "sql": "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers"}, {"query": "How many companies were created by Andy?", "sql": "SELECT count(*) FROM manufacturers WHERE founder  =  'Andy'"}, {"query": "Return the number of companies created by Andy.", "sql": "SELECT count(*) FROM manufacturers WHERE founder  =  'Andy'"}, {"query": "Find the total revenue created by the companies whose headquarter is located at Austin.", "sql": "SELECT sum(revenue) FROM manufacturers WHERE headquarter  =  'Austin'"}, {"query": "What is the sum of revenue from companies with headquarters in Austin?", "sql": "SELECT sum(revenue) FROM manufacturers WHERE headquarter  =  'Austin'"}, {"query": "What are the different cities listed?", "sql": "SELECT DISTINCT headquarter FROM manufacturers"}, {"query": "Give the distinct headquarters of manufacturers.", "sql": "SELECT DISTINCT headquarter FROM manufacturers"}, {"query": "Find the number of manufactures that are based in Tokyo or Beijing.", "sql": "SELECT count(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing'"}, {"query": "How many manufacturers have headquarters in either Tokyo or Beijing?", "sql": "SELECT count(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing'"}, {"query": "Find the founder of the company whose name begins with the letter 'S'.", "sql": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'"}, {"query": "Who is the founders of companies whose first letter is S?", "sql": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'"}, {"query": "Find the name of companies whose revenue is between 100 and 150.", "sql": "SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150"}, {"query": "What are the names of companies with revenue between 100 and 150?", "sql": "SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150"}, {"query": "What is the total revenue of all companies whose main office is at Tokyo or Taiwan?", "sql": "SELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  'Tokyo' OR Headquarter  =  'Taiwan'"}, {"query": "Return the total revenue of companies with headquarters in Tokyo or Taiwan.", "sql": "SELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  'Tokyo' OR Headquarter  =  'Taiwan'"}, {"query": "Find the name of product that is produced by both companies Creative Labs and Sony.", "sql": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'"}, {"query": "What are the names of products produced by both Creative Labs and Sony?", "sql": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'"}, {"query": "Find the name, headquarter and founder of the manufacturer that has the highest revenue.", "sql": "SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1"}, {"query": "What are the names, headquarters and founders of the company with the highest revenue?", "sql": "SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1"}, {"query": "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order.", "sql": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC"}, {"query": "What are the names, headquarters and revenues for manufacturers, sorted by revenue descending?", "sql": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC"}, {"query": "Find the name of companies whose revenue is greater than the average revenue of all companies.", "sql": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)"}, {"query": "What are the names of manufacturers with revenue greater than the average of all revenues?", "sql": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)"}, {"query": "Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin.", "sql": "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')"}, {"query": "What are the names of companies with revenue less than the lowest revenue of any manufacturer in Austin?", "sql": "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')"}, {"query": "Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin.", "sql": "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')"}, {"query": "What is the total revenue of companies with revenue greater than the lowest revenue of any manufacturer in Austin?", "sql": "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')"}, {"query": "Find the total revenue of companies of each founder.", "sql": "SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder"}, {"query": "What is the total revenue of companies started by founder?", "sql": "SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder"}, {"query": "Find the name and revenue of the company that earns the highest revenue in each city.", "sql": "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter"}, {"query": "What are the names and revenues of the companies with the highest revenues in each headquarter city?", "sql": "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter"}, {"query": "Find the total revenue for each manufacturer.", "sql": "SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name"}, {"query": "What is the total revenue of each manufacturer?", "sql": "SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name"}, {"query": "Find the average prices of all products from each manufacture, and list each company's name.", "sql": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name"}, {"query": "What are the average prices of products for each manufacturer?", "sql": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name"}, {"query": "Find the number of different products that are produced by companies at different headquarter cities.", "sql": "SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter"}, {"query": "How many different products are produced in each headquarter city?", "sql": "SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter"}, {"query": "Find number of products which Sony does not make.", "sql": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')"}, {"query": "How many products are not made by Sony?", "sql": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')"}, {"query": "Find the name of companies that do not make DVD drive.", "sql": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'"}, {"query": "What are the names of companies that do not make DVD drives?", "sql": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'"}, {"query": "Find the number of products for each manufacturer, showing the name of each company.", "sql": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name"}, {"query": "How many products are there for each manufacturer?", "sql": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name"}, {"query": "Select the names of all the products in the store.", "sql": "SELECT Name FROM Products"}, {"query": "What are the names of all products?", "sql": "SELECT Name FROM Products"}, {"query": "Select the names and the prices of all the products in the store.", "sql": "SELECT name ,  price FROM products"}, {"query": "What are the names and prices of all products in the store?", "sql": "SELECT name ,  price FROM products"}, {"query": "Select the name of the products with a price less than or equal to $200.", "sql": "SELECT name FROM products WHERE price  <=  200"}, {"query": "What are the names of products with price at most 200?", "sql": "SELECT name FROM products WHERE price  <=  200"}, {"query": "Find all information of all the products with a price between $60 and $120.", "sql": "SELECT * FROM products WHERE price BETWEEN 60 AND 120"}, {"query": "What is all the information of all the products that have a price between 60 and 120?", "sql": "SELECT * FROM products WHERE price BETWEEN 60 AND 120"}, {"query": "Compute the average price of all the products.", "sql": "SELECT avg(price) FROM products"}, {"query": "What is the average price across all products?", "sql": "SELECT avg(price) FROM products"}, {"query": "Compute the average price of all products with manufacturer code equal to 2.", "sql": "SELECT avg(price) FROM products WHERE Manufacturer  =  2"}, {"query": "What is the average price of products with manufacturer codes equal to 2?", "sql": "SELECT avg(price) FROM products WHERE Manufacturer  =  2"}, {"query": "Compute the number of products with a price larger than or equal to $180.", "sql": "SELECT count(*) FROM products WHERE price >= 180"}, {"query": "How many products have prices of at least 180?", "sql": "SELECT count(*) FROM products WHERE price >= 180"}, {"query": "Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order).", "sql": "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC"}, {"query": "What are the names and prices of products that cost at least 180, sorted by price decreasing and name ascending?", "sql": "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC"}, {"query": "Select all the data from the products and each product's manufacturer.", "sql": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code"}, {"query": "What is all the product data, as well as  each product's manufacturer?", "sql": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code"}, {"query": "Select the average price of each manufacturer's products, showing only the manufacturer's code.", "sql": "SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer"}, {"query": "What are the average prices of products, grouped by manufacturer code?", "sql": "SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer"}, {"query": "Select the average price of each manufacturer's products, showing the manufacturer's name.", "sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name"}, {"query": "What are the average prices of products, grouped by manufacturer name?", "sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name"}, {"query": "Select the names of manufacturer whose products have an average price higher than or equal to $150.", "sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150"}, {"query": "What are the names and average prices of products for manufacturers whose products cost on average 150 or more?", "sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150"}, {"query": "Select the name and price of the cheapest product.", "sql": "SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1"}, {"query": "What is the name and price of the cheapest product?", "sql": "SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1"}, {"query": "Select the name of each manufacturer along with the name and price of its most expensive product.", "sql": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name"}, {"query": "For each manufacturer name, what are the names and prices of their most expensive product?", "sql": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name"}, {"query": "Select the code of the product that is cheapest in each product category.", "sql": "SELECT code ,  name ,  min(price) FROM products GROUP BY name"}, {"query": "What are the codes and names of the cheapest products in each category?", "sql": "SELECT code ,  name ,  min(price) FROM products GROUP BY name"}, {"query": "What is the id of the problem log that is created most recently?", "sql": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1"}, {"query": "Which problem log was created most recently? Give me the log id.", "sql": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1"}, {"query": "What is the oldest log id and its corresponding problem id?", "sql": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1"}, {"query": "Find the oldest log id and its corresponding problem id.", "sql": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1"}, {"query": "Find all the ids and dates of the logs for the problem whose id is 10.", "sql": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10"}, {"query": "For the problem with id 10, return the ids and dates of its problem logs.", "sql": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10"}, {"query": "List all the log ids and their descriptions from the problem logs.", "sql": "SELECT problem_log_id ,  log_entry_description FROM problem_log"}, {"query": "What are the log id and entry description of each problem?", "sql": "SELECT problem_log_id ,  log_entry_description FROM problem_log"}, {"query": "List the first and last names of all distinct staff members who are assigned to the problem whose id is 1.", "sql": "SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1"}, {"query": "Which staff members are assigned to the problem with id 1? Give me their first and last names.", "sql": "SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1"}, {"query": "List the problem id and log id which are assigned to the staff named Rylan Homenick.", "sql": "SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\""}, {"query": "Which problem id and log id are assigned to the staff named Rylan Homenick?", "sql": "SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\""}, {"query": "How many problems are there for product voluptatem?", "sql": "SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\""}, {"query": "How many problems did the product called \"voluptatem\" have in record?", "sql": "SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\""}, {"query": "How many problems does the product with the most problems have? List the number of the problems and product name.", "sql": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which product has the most problems? Give me the number of problems and the product name.", "sql": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1"}, {"query": "Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop.", "sql": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\""}, {"query": "Which problems are reported by the staff with first name \"Christop\"? Show the descriptions of the problems.", "sql": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\""}, {"query": "Find the ids of the problems that are reported by the staff whose last name is Bosco.", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Bosco\""}, {"query": "Which problems are reported by the staff with last name \"Bosco\"? Show the ids of the problems.", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Bosco\""}, {"query": "What are the ids of the problems which are reported after 1978-06-26?", "sql": "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\""}, {"query": "Find the ids of the problems reported after 1978-06-26.", "sql": "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\""}, {"query": "What are the ids of the problems which are reported before 1978-06-26?", "sql": "SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\""}, {"query": "Which problems are reported before 1978-06-26? Give me the ids of the problems.", "sql": "SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\""}, {"query": "For each product which has problems, what are the number of problems and the product id?", "sql": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id"}, {"query": "For each product with some problems, list the count of problems and the product id.", "sql": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id"}, {"query": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?", "sql": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id"}, {"query": "What are the products that have problems reported after 1986-11-13? Give me the product id and the count of problems reported after 1986-11-13.", "sql": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id"}, {"query": "List the names of all the distinct product names in alphabetical order?", "sql": "SELECT DISTINCT product_name FROM product ORDER BY product_name"}, {"query": "Sort all the distinct product names in alphabetical order.", "sql": "SELECT DISTINCT product_name FROM product ORDER BY product_name"}, {"query": "List all the distinct product names ordered by product id?", "sql": "SELECT DISTINCT product_name FROM product ORDER BY product_id"}, {"query": "What is the list of distinct product names sorted by product id?", "sql": "SELECT DISTINCT product_name FROM product ORDER BY product_id"}, {"query": "What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?", "sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\""}, {"query": "Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems.", "sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\""}, {"query": "What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?", "sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\""}, {"query": "For which product was there a problem reported by Christop Berge, with closure authorised by Ashley Medhurst? Return the product ids.", "sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\""}, {"query": "What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )"}, {"query": "Which problems were reported before the date of any problem reported by the staff Lysanne Turcotte? Give me the ids of the problems.", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )"}, {"query": "What are the ids of the problems reported after the date of any problems reported by Rylan Homenick?", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )"}, {"query": "Find the ids of the problems reported after the date of any problems reported by the staff Rylan Homenick.", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )"}, {"query": "Find the top 3 products which have the largest number of problems?", "sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3"}, {"query": "What are the three products that have the most problems?s", "sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3"}, {"query": "List the ids of the problems from the product \"voluptatem\" that are reported after 1995?", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\""}, {"query": "What are the ids of the problems that are from the product \"voluptatem\" and are reported after 1995?", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\""}, {"query": "Find the first and last name of the staff members who reported problems from the product \"rem\" but not \"aut\"?", "sql": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\""}, {"query": "Which staff members who reported problems from the product \"rem\" but not \"aut\"? Give me their first and last names.", "sql": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\""}, {"query": "Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?", "sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\""}, {"query": "Which products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin?", "sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\""}, {"query": "How many branches where have more than average number of memberships are there?", "sql": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)"}, {"query": "What is the number of branches that have more than the average number of memberships?", "sql": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)"}, {"query": "Show name, address road, and city for all branches sorted by open year.", "sql": "SELECT name ,  address_road ,  city FROM branch ORDER BY open_year"}, {"query": "What are the names, address roads, and cities of the branches ordered by opening year?", "sql": "SELECT name ,  address_road ,  city FROM branch ORDER BY open_year"}, {"query": "What are names for top three branches with most number of membership?", "sql": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3"}, {"query": "What are the names for the 3 branches that have the most memberships?", "sql": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3"}, {"query": "Show all distinct city where branches with at least 100 memberships are located.", "sql": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100"}, {"query": "What are the different cities that have more than 100 memberships?", "sql": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100"}, {"query": "List all open years when at least two shops are opened.", "sql": "SELECT open_year FROM branch GROUP BY open_year HAVING count(*)  >=  2"}, {"query": "What are the opening years in which at least two shops opened?", "sql": "SELECT open_year FROM branch GROUP BY open_year HAVING count(*)  >=  2"}, {"query": "Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London.", "sql": "SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'"}, {"query": "What are the minimum and maximum membership amounts for all branches that either opened in 2011 or are located in London?", "sql": "SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'"}, {"query": "Show the city and the number of branches opened before 2010 for each city.", "sql": "SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city"}, {"query": "For each city, how many branches opened before 2010?", "sql": "SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city"}, {"query": "How many different levels do members have?", "sql": "SELECT count(DISTINCT LEVEL) FROM member"}, {"query": "What are the different membership levels?", "sql": "SELECT count(DISTINCT LEVEL) FROM member"}, {"query": "Show card number, name, and hometown for all members in a descending order of level.", "sql": "SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC"}, {"query": "What are the card numbers, names, and hometowns of every member ordered by descending level?", "sql": "SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC"}, {"query": "Show the membership level with most number of members.", "sql": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the membership level with the most people?", "sql": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show all member names and registered branch names sorted by register year.", "sql": "SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year"}, {"query": "What are the names of the members and branches at which they are registered sorted by year of registration?", "sql": "SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year"}, {"query": "Show all branch names with the number of members in each branch registered after 2015.", "sql": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id"}, {"query": "For each branch id, what are the names of the branches that were registered after 2015?", "sql": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id"}, {"query": "Show member names without any registered branch.", "sql": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)"}, {"query": "What are the names of the members that have never registered at any branch?", "sql": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)"}, {"query": "List the branch name and city without any registered members.", "sql": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)"}, {"query": "What are the names and cities of the branches that do not have any registered members?", "sql": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)"}, {"query": "What is the name and open year for the branch with most number of memberships registered in 2016?", "sql": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name and opening year for the branch that registered the most members in 2016?", "sql": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show the member name and hometown who registered a branch in 2016.", "sql": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016"}, {"query": "What are the member names and hometowns of those who registered at a branch in 2016?", "sql": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016"}, {"query": "Show all city with a branch opened in 2001 and a branch with more than 100 membership.", "sql": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100"}, {"query": "What are the cities that have a branch that opened in 2001 and a branch with more than 100 members?", "sql": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100"}, {"query": "Show all cities without a branch having more than 100 memberships.", "sql": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100"}, {"query": "What are the cities that do not have any branches with more than 100 members?", "sql": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100"}, {"query": "What is the sum of total pounds of purchase in year 2018 for all branches in London?", "sql": "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018"}, {"query": "How many total pounds were purchased in the year 2018 at all London branches?", "sql": "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018"}, {"query": "What is the total number of purchases for members with level 6?", "sql": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6"}, {"query": "What are the total purchases for members rated at level 6?", "sql": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6"}, {"query": "Find the name of branches where have some members whose hometown is in Louisville, Kentucky and some in Hiram, Georgia.", "sql": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'"}, {"query": "What are the names of the branches that have some members with a hometown in Louisville, Kentucky and also those from Hiram, Goergia?", "sql": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'"}, {"query": "list the card number of all members whose hometown address includes word \"Kentucky\".", "sql": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\""}, {"query": "What are the card numbers of members from Kentucky?", "sql": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\""}, {"query": "Find the number of students in total.", "sql": "SELECT count(*) FROM STUDENT"}, {"query": "How many students are there in total?", "sql": "SELECT count(*) FROM STUDENT"}, {"query": "Find the number of voting records in total.", "sql": "SELECT count(*) FROM VOTING_RECORD"}, {"query": "How many voting records do we have?", "sql": "SELECT count(*) FROM VOTING_RECORD"}, {"query": "Find the distinct number of president votes.", "sql": "SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD"}, {"query": "How many distinct president votes are recorded?", "sql": "SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD"}, {"query": "Find the maximum age of all the students.", "sql": "SELECT max(Age) FROM STUDENT"}, {"query": "What is the oldest age among the students?", "sql": "SELECT max(Age) FROM STUDENT"}, {"query": "Find the last names of students with major 50.", "sql": "SELECT LName FROM STUDENT WHERE Major  =  50"}, {"query": "What are the last names of students studying major 50?", "sql": "SELECT LName FROM STUDENT WHERE Major  =  50"}, {"query": "Find the first names of students with age above 22.", "sql": "SELECT Fname FROM STUDENT WHERE Age  >  22"}, {"query": "What are the first names of all the students aged above 22?", "sql": "SELECT Fname FROM STUDENT WHERE Age  >  22"}, {"query": "What are the majors of male (sex is M) students?", "sql": "SELECT Major FROM STUDENT WHERE Sex  =  \"M\""}, {"query": "List the major of each male student.", "sql": "SELECT Major FROM STUDENT WHERE Sex  =  \"M\""}, {"query": "What is the average age of female (sex is F) students?", "sql": "SELECT avg(Age) FROM STUDENT WHERE Sex  =  \"F\""}, {"query": "Find the average age of female students.", "sql": "SELECT avg(Age) FROM STUDENT WHERE Sex  =  \"F\""}, {"query": "What are the maximum and minimum age of students with major 600?", "sql": "SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600"}, {"query": "Tell me the ages of the oldest and youngest students studying major 600.", "sql": "SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600"}, {"query": "Who are the advisors for students that live in a city with city code \"BAL\"?", "sql": "SELECT Advisor FROM STUDENT WHERE city_code  =  \"BAL\""}, {"query": "Show the advisors of the students whose city of residence has city code \"BAL\".", "sql": "SELECT Advisor FROM STUDENT WHERE city_code  =  \"BAL\""}, {"query": "What are the distinct secretary votes in the fall election cycle?", "sql": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\""}, {"query": "Return all the distinct secretary votes made in the fall election cycle.", "sql": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\""}, {"query": "What are the distinct president votes on 08/30/2015?", "sql": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\""}, {"query": "Show all the distinct president votes made on 08/30/2015.", "sql": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\""}, {"query": "Report the distinct registration date and the election cycle.", "sql": "SELECT DISTINCT Registration_Date ,  Election_Cycle FROM VOTING_RECORD"}, {"query": "What are the distinct registration dates and the election cycles?", "sql": "SELECT DISTINCT Registration_Date ,  Election_Cycle FROM VOTING_RECORD"}, {"query": "Report the distinct president vote and the vice president vote.", "sql": "SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD"}, {"query": "List all the distinct president votes and the vice president votes.", "sql": "SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD"}, {"query": "Find the distinct last names of the students who have class president votes.", "sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE"}, {"query": "What are the distinct last names of the students who have class president votes?", "sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE"}, {"query": "Find the distinct first names of the students who have class senator votes.", "sql": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE"}, {"query": "What are the distinct first names of the students who have class president votes?", "sql": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE"}, {"query": "Find the distinct ages of students who have secretary votes in the fall election cycle.", "sql": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\""}, {"query": "What are the distinct ages of students who have secretary votes in the fall election cycle?", "sql": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\""}, {"query": "Find the distinct Advisor of students who have treasurer votes in the spring election cycle.", "sql": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\""}, {"query": "Who served as an advisor for students who have treasurer votes in the spring election cycle?", "sql": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\""}, {"query": "Find the distinct majors of students who have treasurer votes.", "sql": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote"}, {"query": "What are the distinct majors that students with treasurer votes are studying?", "sql": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote"}, {"query": "Find the first and last names of all the female (sex is F) students who have president votes.", "sql": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\""}, {"query": "What are the first and last names of all the female students who have president votes?", "sql": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\""}, {"query": "Find the first and last name of all the students of age 18 who have vice president votes.", "sql": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18"}, {"query": "What are the first names and last names of the students who are 18 years old and have vice president votes.", "sql": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18"}, {"query": "How many male (sex is M) students have class senator votes in the fall election cycle?", "sql": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\""}, {"query": "Count the number of male students who had class senator votes in the fall election cycle.", "sql": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\""}, {"query": "Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.", "sql": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\""}, {"query": "Which students live in the city with code \"NYC\" and have class senator votes in the spring election cycle? Count the numbers.", "sql": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\""}, {"query": "Find the average age of students who live in the city with code \"NYC\" and have secretary votes in the spring election cycle.", "sql": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\""}, {"query": "What is the average age of students who have city code \"NYC\" and have secretary votes for the spring election cycle?", "sql": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\""}, {"query": "Find the average age of female (sex is F) students who have secretary votes in the spring election cycle.", "sql": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  \"F\" AND T2.Election_Cycle  =  \"Spring\""}, {"query": "What is the average age of the female students with secretary votes in the spring election cycle?", "sql": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  \"F\" AND T2.Election_Cycle  =  \"Spring\""}, {"query": "Find the distinct first names of all the students who have vice president votes and whose city code is not PIT.", "sql": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\""}, {"query": "What are the distinct first names of the students who have vice president votes and reside in a city whose city code is not PIT?", "sql": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\""}, {"query": "Find the distinct last names of all the students who have president votes and whose advisor is not 2192.", "sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\""}, {"query": "What are the distinct last names of the students who have president votes but do not have 2192 as the advisor?", "sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\""}, {"query": "Find the distinct last names of all the students who have president votes and whose advisor is 8741.", "sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\""}, {"query": "What are the distinct last names of the students who have president votes and have 8741 as the advisor?", "sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\""}, {"query": "For each advisor, report the total number of students advised by him or her.", "sql": "SELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor"}, {"query": "How many students does each advisor have?", "sql": "SELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor"}, {"query": "Report all advisors that advise more than 2 students.", "sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2"}, {"query": "Which advisors have more than two students?", "sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2"}, {"query": "Report all majors that have less than 3 students.", "sql": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3"}, {"query": "What are the majors only less than three students are studying?", "sql": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3"}, {"query": "For each election cycle, report the number of voting records.", "sql": "SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle"}, {"query": "Count the number of voting records for each election cycle.", "sql": "SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle"}, {"query": "Which major has the most students?", "sql": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the major that is studied by the largest number of students.", "sql": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the most common major among female (sex is F) students?", "sql": "SELECT Major FROM STUDENT WHERE Sex  =  \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the major that is studied by the most female students.", "sql": "SELECT Major FROM STUDENT WHERE Sex  =  \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the city_code of the city that the most students live in?", "sql": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the code of the city that has the most students.", "sql": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Report the distinct advisors who have more than 2 students.", "sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*)  >  2"}, {"query": "Which advisors are advising more than 2 students?", "sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*)  >  2"}, {"query": "How many products are there?", "sql": "SELECT count(*) FROM products"}, {"query": "Count the number of products.", "sql": "SELECT count(*) FROM products"}, {"query": "How many colors are there?", "sql": "SELECT count(*) FROM ref_colors"}, {"query": "Count the number of colors.", "sql": "SELECT count(*) FROM ref_colors"}, {"query": "How many characteristics are there?", "sql": "SELECT count(*) FROM CHARACTERISTICS"}, {"query": "Count the number of characteristics.", "sql": "SELECT count(*) FROM CHARACTERISTICS"}, {"query": "What are the names and buying prices of all the products?", "sql": "SELECT product_name ,  typical_buying_price FROM products"}, {"query": "Return the names and typical buying prices for all products.", "sql": "SELECT product_name ,  typical_buying_price FROM products"}, {"query": "List the description of all the colors.", "sql": "SELECT color_description FROM ref_colors"}, {"query": "What are the descriptions for each color?", "sql": "SELECT color_description FROM ref_colors"}, {"query": "Find the names of all the product characteristics.", "sql": "SELECT DISTINCT characteristic_name FROM CHARACTERISTICS"}, {"query": "What are the different names of the product characteristics?", "sql": "SELECT DISTINCT characteristic_name FROM CHARACTERISTICS"}, {"query": "What are the names of products with category \"Spices\"?", "sql": "SELECT product_name FROM products WHERE product_category_code  =  \"Spices\""}, {"query": "Return the names of products in the category 'Spices'.", "sql": "SELECT product_name FROM products WHERE product_category_code  =  \"Spices\""}, {"query": "List the names, color descriptions and product descriptions of products with category \"Herbs\".", "sql": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\""}, {"query": "What are the names, color descriptions, and product descriptions for products in the 'Herbs' category?", "sql": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\""}, {"query": "How many products are there under the category \"Seeds\"?", "sql": "SELECT count(*) FROM products WHERE product_category_code  =  \"Seeds\""}, {"query": "Count the number of products in the category 'Seeds'.", "sql": "SELECT count(*) FROM products WHERE product_category_code  =  \"Seeds\""}, {"query": "Find the number of products with category \"Spices\" and typically sold above 1000.", "sql": "SELECT count(*) FROM products WHERE product_category_code  =  \"Spices\" AND typical_buying_price  >  1000"}, {"query": "How many products are in the 'Spices' category and have a typical price of over 1000?", "sql": "SELECT count(*) FROM products WHERE product_category_code  =  \"Spices\" AND typical_buying_price  >  1000"}, {"query": "What is the category and typical buying price  of the product with name \"cumin\"?", "sql": "SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  \"cumin\""}, {"query": "Return the category code and typical price of 'cumin'.", "sql": "SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  \"cumin\""}, {"query": "Which category does the product named \"flax\" belong to?", "sql": "SELECT product_category_code FROM products WHERE product_name  =  \"flax\""}, {"query": "What is the code of the category that the product with the name 'flax' belongs to?", "sql": "SELECT product_category_code FROM products WHERE product_name  =  \"flax\""}, {"query": "What is the name of the product with the color description 'yellow'?", "sql": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow'"}, {"query": "Give the name of the products that have a color description 'yellow'.", "sql": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow'"}, {"query": "Find the category descriptions of the products whose descriptions include letter 't'.", "sql": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'"}, {"query": "What are the descriptions of the categories that products with product descriptions that contain the letter t are in?", "sql": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'"}, {"query": "What is the color description of the product with name \"catnip\"?", "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\""}, {"query": "Give the color description for the product 'catnip'.", "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\""}, {"query": "What is the color code and description of the product named \"chervil\"?", "sql": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\""}, {"query": "Return the color code and description for the product with the name 'chervil'.", "sql": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\""}, {"query": "Find the id and color description of the products with at least 2 characteristics.", "sql": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2"}, {"query": "What are the product ids and color descriptions for products with two or more characteristics?", "sql": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2"}, {"query": "List all the product names with the color description \"white\".", "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\""}, {"query": "What are the names of products with 'white' as their color description?", "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\""}, {"query": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?", "sql": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\""}, {"query": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.", "sql": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\""}, {"query": "How many characteristics does the product named \"sesame\" have?", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\""}, {"query": "Count the number of characteristics the product 'sesame' has.", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\""}, {"query": "How many distinct characteristic names does the product \"cumin\" have?", "sql": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\""}, {"query": "Count the number of different characteristic names the product 'cumin' has.", "sql": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\""}, {"query": "What are all the characteristic names of product \"sesame\"?", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\""}, {"query": "Return the characteristic names of the 'sesame' product.", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\""}, {"query": "List all the characteristic names and data types of product \"cumin\".", "sql": "SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"cumin\""}, {"query": "What are the names and data types of the characteristics of the 'cumin' product?", "sql": "SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"cumin\""}, {"query": "List all characteristics of product named \"sesame\" with type code \"Grade\".", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\""}, {"query": "What are the names of the characteristics of the product 'sesame' that have the characteristic type code 'Grade'?", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\""}, {"query": "How many characteristics does the product named \"laurel\" have?", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\""}, {"query": "Count the number of characteristics of the product named 'laurel'.", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\""}, {"query": "Find the number of characteristics that the product \"flax\" has.", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\""}, {"query": "Count the number of characteristics of the 'flax' product.", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\""}, {"query": "Find the name of the products that have the color description \"red\" and have the characteristic name \"fast\".", "sql": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"fast\""}, {"query": "What are the names of the products that have a color description of 'red' and the 'fast' characteristic?", "sql": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"fast\""}, {"query": "How many products have the characteristic named \"hot\"?", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\""}, {"query": "Count the number of products with the 'hot' charactersitic.", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\""}, {"query": "List the all the distinct names of the products with the characteristic name 'warm'.", "sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\""}, {"query": "What are the different product names for products that have the 'warm' characteristic:?", "sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\""}, {"query": "Find the number of the products that have their color described as \"red\" and have a characteristic named \"slow\".", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\""}, {"query": "How many products have the color description 'red' and the characteristic name 'slow'?", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\""}, {"query": "Count the products that have the color description \"white\" or have the characteristic name \"hot\".", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\""}, {"query": "How many products have their color described as 'white' or have a characteristic with the name 'hot'?", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\""}, {"query": "What is the unit of measuerment of the product category code \"Herbs\"?", "sql": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\""}, {"query": "Return the unit of measure for 'Herb' products.", "sql": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\""}, {"query": "Find the product category description of the product category with code \"Spices\".", "sql": "SELECT product_category_description FROM ref_product_categories WHERE product_category_code  =  \"Spices\""}, {"query": "What is the description of the product category with the code 'Spices'?", "sql": "SELECT product_category_description FROM ref_product_categories WHERE product_category_code  =  \"Spices\""}, {"query": "What is the product category description and unit of measurement of category \"Herbs\"?", "sql": "SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\""}, {"query": "Return the description and unit of measurement for products in the 'Herbs' category.", "sql": "SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\""}, {"query": "What is the unit of measurement of product named \"cumin\"?", "sql": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"cumin\""}, {"query": "Give the unit of measure for the product with the name 'cumin'.", "sql": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"cumin\""}, {"query": "Find the unit of measurement and product category code of product named \"chervil\".", "sql": "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"chervil\""}, {"query": "What are the unit of measure and category code for the 'chervil' product?", "sql": "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"chervil\""}, {"query": "Find the product names that are colored 'white' but do not have unit of measurement \"Handful\".", "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\""}, {"query": "What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'?", "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\""}, {"query": "What is the description of the color for most products?", "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the color description that is most common across all products.", "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the description of the color used by least products?", "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1"}, {"query": "Give the color description that is least common across products.", "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1"}, {"query": "What is the characteristic name used by most number of the products?", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the name of the characteristic that is most common across all products.", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the names, details and data types of the characteristics which are never used by any product?", "sql": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id"}, {"query": "Give the names, details, and data types of characteristics that are not found in any product.", "sql": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id"}, {"query": "What are characteristic names used at least twice across all products?", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2"}, {"query": "Give the names of characteristics that are in two or more products?", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2"}, {"query": "How many colors are never used by any product?", "sql": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )"}, {"query": "Count the number of colors that are not used in any products.", "sql": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )"}, {"query": "How many events are there?", "sql": "SELECT count(*) FROM event"}, {"query": "List all the event names by year from the most recent to the oldest.", "sql": "SELECT name FROM event ORDER BY YEAR DESC"}, {"query": "What is the name of the event that happened in the most recent year?", "sql": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1"}, {"query": "How many stadiums are there?", "sql": "SELECT count(*) FROM stadium"}, {"query": "Find the name of the stadium that has the maximum capacity.", "sql": "SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1"}, {"query": "Find the names of stadiums whose capacity is smaller than the average capacity.", "sql": "SELECT name FROM stadium WHERE capacity  <  (SELECT avg(capacity) FROM stadium)"}, {"query": "Find the country that has the most stadiums.", "sql": "SELECT country FROM stadium GROUP BY country ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which country has at most 3 stadiums listed?", "sql": "SELECT country FROM stadium GROUP BY country HAVING count(*)  <=  3"}, {"query": "Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?", "sql": "SELECT country FROM stadium WHERE capacity  >  60000 INTERSECT SELECT country FROM stadium WHERE capacity  <  50000"}, {"query": "How many cities have a stadium that was opened before the year of 2006?", "sql": "SELECT count(DISTINCT city) FROM stadium WHERE opening_year  <  2006"}, {"query": "How many stadiums does each country have?", "sql": "SELECT country ,  count(*) FROM stadium GROUP BY country"}, {"query": "Which countries do not have a stadium that was opened after 2006?", "sql": "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year  >  2006"}, {"query": "How many stadiums are not in country \"Russia\"?", "sql": "SELECT count(*) FROM stadium WHERE country != 'Russia'"}, {"query": "Find the names of all swimmers, sorted by their 100 meter scores in ascending order.", "sql": "SELECT name FROM swimmer ORDER BY meter_100"}, {"query": "How many different countries are all the swimmers from?", "sql": "SELECT count(DISTINCT nationality) FROM swimmer"}, {"query": "List countries that have more than one swimmer.", "sql": "SELECT nationality ,  count(*) FROM swimmer GROUP BY nationality HAVING count(*)  >  1"}, {"query": "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".", "sql": "SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'"}, {"query": "Find the names of swimmers who has a result of \"win\".", "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win'"}, {"query": "What is the name of the stadium which held the most events?", "sql": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the name and capacity of the stadium where the event named \"World Junior\" happened.", "sql": "SELECT t1.name ,  t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id WHERE t2.name  =  'World Junior'"}, {"query": "Find the names of stadiums which have never had any event.", "sql": "SELECT name FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event)"}, {"query": "Find the name of the swimmer who has the most records.", "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the name of the swimmer who has at least 2 records.", "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2"}, {"query": "Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time.", "sql": "SELECT t1.name ,  t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1"}, {"query": "Find the names of the swimmers who have no record.", "sql": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)"}, {"query": "Find the names of the swimmers who have both \"win\" and \"loss\" results in the record.", "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'"}, {"query": "Find the names of stadiums that some Australian swimmers have been to.", "sql": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id JOIN event AS t3 ON t2.event_id  =  t3.id JOIN stadium AS t4 ON t4.id  =  t3.stadium_id WHERE t1.nationality  =  'Australia'"}, {"query": "Find the names of stadiums that the most swimmers have been to.", "sql": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find all details for each swimmer.", "sql": "SELECT * FROM swimmer"}, {"query": "What is the average capacity of the stadiums that were opened in year 2005?", "sql": "SELECT avg(capacity) FROM stadium WHERE opening_year  =  2005"}, {"query": "How many railways are there?", "sql": "SELECT count(*) FROM railway"}, {"query": "List the builders of railways in ascending alphabetical order.", "sql": "SELECT Builder FROM railway ORDER BY Builder ASC"}, {"query": "List the wheels and locations of the railways.", "sql": "SELECT Wheels ,  LOCATION FROM railway"}, {"query": "What is the maximum level of managers in countries that are not \"Australia\"?", "sql": "SELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\""}, {"query": "What is the average age for all managers?", "sql": "SELECT avg(Age) FROM manager"}, {"query": "What are the names of managers in ascending order of level?", "sql": "SELECT Name FROM manager ORDER BY LEVEL ASC"}, {"query": "What are the names and arrival times of trains?", "sql": "SELECT Name ,  Arrival FROM train"}, {"query": "What is the name of the oldest manager?", "sql": "SELECT Name FROM manager ORDER BY Age DESC LIMIT 1"}, {"query": "Show the names of trains and locations of railways they are in.", "sql": "SELECT T2.Name ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID"}, {"query": "Show the builder of railways associated with the trains named \"Andaman Exp\".", "sql": "SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID WHERE T2.Name  =  \"Andaman Exp\""}, {"query": "Show id and location of railways that are associated with more than one train.", "sql": "SELECT T2.Railway_ID ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*)  >  1"}, {"query": "Show the id and builder of the railway that are associated with the most trains.", "sql": "SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Show different builders of railways, along with the corresponding number of railways using each builder.", "sql": "SELECT Builder ,  COUNT(*) FROM railway GROUP BY Builder"}, {"query": "Show the most common builder of railways.", "sql": "SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Show different locations of railways along with the corresponding number of railways at each location.", "sql": "SELECT LOCATION ,  COUNT(*) FROM railway GROUP BY LOCATION"}, {"query": "Show the locations that have more than one railways.", "sql": "SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT(*)  >  1"}, {"query": "List the object number of railways that do not have any trains.", "sql": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)"}, {"query": "Show the countries that have both managers of age above 50 and managers of age below 46.", "sql": "SELECT Country FROM manager WHERE Age  >  50 INTERSECT SELECT Country FROM manager WHERE Age  <  46"}, {"query": "Show the distinct countries of managers.", "sql": "SELECT DISTINCT Country FROM manager"}, {"query": "Show the working years of managers in descending order of their level.", "sql": "SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC"}, {"query": "Show the countries that have managers of age above 50 or below 46.", "sql": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46"}, {"query": "How many addresses are there in country USA?", "sql": "SELECT count(*) FROM addresses WHERE country  =  'USA'"}, {"query": "Show all distinct cities in the address record.", "sql": "SELECT DISTINCT city FROM addresses"}, {"query": "Show each state and the number of addresses in each state.", "sql": "SELECT state_province_county ,  count(*) FROM addresses GROUP BY state_province_county"}, {"query": "Show names and phones of customers who do not have address information.", "sql": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_address_history)"}, {"query": "Show the name of the customer who has the most orders.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show the product type codes which have at least two products.", "sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2"}, {"query": "Show the names of customers who have both an order in completed status and an order in part status.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Part'"}, {"query": "Show the name, phone, and payment method code for all customers in descending order of customer number.", "sql": "SELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC"}, {"query": "Show the product name and total order quantity for each product.", "sql": "SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id"}, {"query": "Show the minimum, maximum, average price for all products.", "sql": "SELECT min(product_price) ,  max(product_price) ,  avg(product_price) FROM products"}, {"query": "How many products have a price higher than the average?", "sql": "SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)"}, {"query": "Show the customer name, customer address city, date from, and date to for each customer address history.", "sql": "SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id"}, {"query": "Show the names of customers who use Credit Card payment method and have more than 2 orders.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2"}, {"query": "What are the name and phone of the customer with the most ordered product quantity?", "sql": "SELECT  T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T3.order_id  =  T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT 1"}, {"query": "Show the product type and name for the products with price higher than 1000 or lower than 500.", "sql": "SELECT product_type_code ,  product_name FROM products WHERE product_price  >  1000 OR product_price  <  500"}, {"query": "Find the name of dorms only for female (F gender).", "sql": "SELECT dorm_name FROM dorm WHERE gender  =  'F'"}, {"query": "What are the names of the all-female dorms?", "sql": "SELECT dorm_name FROM dorm WHERE gender  =  'F'"}, {"query": "Find the name of dorms that can accommodate more than 300 students.", "sql": "SELECT dorm_name FROM dorm WHERE student_capacity  >  300"}, {"query": "What are the names of all the dorms that can accomdate more than 300 students?", "sql": "SELECT dorm_name FROM dorm WHERE student_capacity  >  300"}, {"query": "How many female students (sex is F) whose age is below 25?", "sql": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25"}, {"query": "How many girl students who are younger than 25?", "sql": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25"}, {"query": "Find the first name of students who is older than 20.", "sql": "SELECT fname FROM student WHERE age  >  20"}, {"query": "What are the first names of all students who are older than 20?", "sql": "SELECT fname FROM student WHERE age  >  20"}, {"query": "Find the first name of students living in city PHL whose age is between 20 and 25.", "sql": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25"}, {"query": "What is the first name of the students who are in age 20 to 25 and living in PHL city?", "sql": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25"}, {"query": "How many dorms are there?", "sql": "SELECT count(*) FROM dorm"}, {"query": "How many dorms are in the database?", "sql": "SELECT count(*) FROM dorm"}, {"query": "Find the number of distinct amenities.", "sql": "SELECT count(*) FROM dorm_amenity"}, {"query": "How many diffrent dorm amenities are there?", "sql": "SELECT count(*) FROM dorm_amenity"}, {"query": "Find the total capacity of all dorms.", "sql": "SELECT sum(student_capacity) FROM dorm"}, {"query": "What is the total student capacity of all dorms?", "sql": "SELECT sum(student_capacity) FROM dorm"}, {"query": "How many students are there?", "sql": "SELECT count(*) FROM student"}, {"query": "How many students exist?", "sql": "SELECT count(*) FROM student"}, {"query": "Find the average age of all students living in the each city.", "sql": "SELECT avg(age) ,  city_code FROM student GROUP BY city_code"}, {"query": "What is the average age for each city and what are those cities?", "sql": "SELECT avg(age) ,  city_code FROM student GROUP BY city_code"}, {"query": "Find the average and total capacity of dorms for the students with gender X.", "sql": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'"}, {"query": "What is the average and total capacity for all dorms who are of gender X?", "sql": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'"}, {"query": "Find the number of dorms that have some amenity.", "sql": "SELECT count(DISTINCT dormid) FROM has_amenity"}, {"query": "How many dorms have amenities?", "sql": "SELECT count(DISTINCT dormid) FROM has_amenity"}, {"query": "Find the name of dorms that do not have any amenity", "sql": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)"}, {"query": "What are the names of all the dorms that don't have any amenities?", "sql": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)"}, {"query": "Find the number of distinct gender for dorms.", "sql": "SELECT count(DISTINCT gender) FROM dorm"}, {"query": "How many different genders are there in the dorms?", "sql": "SELECT count(DISTINCT gender) FROM dorm"}, {"query": "Find the capacity and gender type of the dorm whose name has substring \u2018Donor\u2019.", "sql": "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'"}, {"query": "What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it?", "sql": "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'"}, {"query": "Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.", "sql": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100"}, {"query": "What are the names and types of the dorms that have a capacity greater than 300 or less than 100?", "sql": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100"}, {"query": "Find the numbers of different majors and cities.", "sql": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student"}, {"query": "How many different majors are there and how many different city codes are there for each student?", "sql": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student"}, {"query": "Find the name of dorms which have both TV Lounge and Study Room as amenities.", "sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'"}, {"query": "What is the name of the dorm with both a TV Lounge and Study Room listed as amenities?", "sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'"}, {"query": "Find the name of dorms which have TV Lounge but no Study Room as amenity.", "sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'"}, {"query": "What is the name of each dorm that has a TV Lounge but no study rooms?", "sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'"}, {"query": "Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20.", "sql": "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20"}, {"query": "What is the last name of every student who is either female or living in a city with the code BAL or male and under 20?", "sql": "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20"}, {"query": "Find the name of the dorm with the largest capacity.", "sql": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1"}, {"query": "What are the names of the dorm with the largest capacity?", "sql": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1"}, {"query": "List in alphabetic order all different amenities.", "sql": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name"}, {"query": "What are the different dorm amenity names in alphabetical order?", "sql": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name"}, {"query": "Find the code of city where most of students are living in.", "sql": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the code of the city with the most students?", "sql": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the first and last name of students whose age is younger than the average age.", "sql": "SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)"}, {"query": "What is the first and last name of all students who are younger than average?", "sql": "SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)"}, {"query": "List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages.", "sql": "SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age"}, {"query": "What are the first and last names of all students who are not living in the city HKG and order the results by age?", "sql": "SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age"}, {"query": "List name of all amenities which Anonymous Donor Hall has, and sort the results in alphabetic order.", "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name"}, {"query": "What are the amenities in alphabetical order that Anonymous Donor Hall has?", "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name"}, {"query": "Find the number of dorms and total capacity for each gender.", "sql": "SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender"}, {"query": "How many dorms are there and what is the total capacity for each gender?", "sql": "SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender"}, {"query": "Find the average and oldest age for students with different sex.", "sql": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex"}, {"query": "What is the average and oldest age for each gender of student?", "sql": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex"}, {"query": "Find the number of students in each major.", "sql": "SELECT count(*) ,  major FROM student GROUP BY major"}, {"query": "How many students are there in each major?", "sql": "SELECT count(*) ,  major FROM student GROUP BY major"}, {"query": "Find the number and average age of students living in each city.", "sql": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code"}, {"query": "How many students live in each city and what are their average ages?", "sql": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code"}, {"query": "Find the average age and number of male students (with sex M) from each city.", "sql": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code"}, {"query": "What is the average age and how many male students are there in each city?", "sql": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code"}, {"query": "Find the number of students for the cities where have more than one student.", "sql": "SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1"}, {"query": "How many students are from each city, and which cities have more than one cities?", "sql": "SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1"}, {"query": "Find the first and last name of students who are not in the largest major.", "sql": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)"}, {"query": "What is the first and last name of the students who are not in the largest major?", "sql": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)"}, {"query": "Find the number of students whose age is older than the average age for each gender.", "sql": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex"}, {"query": "How many students are older than average for each gender?", "sql": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex"}, {"query": "Find the average age of students living in each dorm and the name of dorm.", "sql": "SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name"}, {"query": "What is the average age for each dorm and what are the names of each dorm?", "sql": "SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name"}, {"query": "Find the number of amenities for each of the dorms that can accommodate more than 100 students.", "sql": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid"}, {"query": "For each dorm, how many amenities does it have?", "sql": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid"}, {"query": "Find the number of students who is older than 20 in each dorm.", "sql": "SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name"}, {"query": "How many students are older than 20 in each dorm?", "sql": "SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name"}, {"query": "Find the first name of students who are living in the Smith Hall.", "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'"}, {"query": "What are the first names of all students in Smith Hall?", "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'"}, {"query": "Find the average age of students who are living in the dorm with the largest capacity.", "sql": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)"}, {"query": "What is the average age of students who are living in the dorm with the largest capacity?", "sql": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)"}, {"query": "Find the total number of students living in the male dorm (with gender M).", "sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'"}, {"query": "What are the total number of students who are living in a male dorm?", "sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'"}, {"query": "Find the number of female students (with F sex) living in Smith Hall", "sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'"}, {"query": "How many female students live in Smith Hall?", "sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'"}, {"query": "Find the name of amenities Smith Hall dorm have.", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'"}, {"query": "What are the names of the amenities that Smith Hall has?", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'"}, {"query": "Find the name of amenities Smith Hall dorm have. ordered the results by amenity names.", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name"}, {"query": "What amenities does Smith Hall have in alphabetical order?", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name"}, {"query": "Find the name of amenity that is most common in all dorms.", "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the most common amenity in the dorms?", "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the first name of students who are living in the dorm that has most number of amenities.", "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)"}, {"query": "What are the first names of all students who live in the dorm with the most amenities?", "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)"}, {"query": "Find the name and capacity of the dorm with least number of amenities.", "sql": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1"}, {"query": "What is the name and capacity of the dorm with the fewest amount of amenities?", "sql": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1"}, {"query": "Find the name of dorms that do not have amenity TV Lounge.", "sql": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'"}, {"query": "What are the names of the dorm that does not have a TV Lounge?", "sql": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'"}, {"query": "Find the first and last name of students who are living in the dorms that have amenity TV Lounge.", "sql": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')"}, {"query": "What are the first and last names of all students who are living in a dorm with a TV Lounge?", "sql": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')"}, {"query": "Find the first name and age of students who are living in the dorms that do not have amenity TV Lounge.", "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')"}, {"query": "What is the first name and age of every student who lives in a dorm with a TV Lounge?", "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')"}, {"query": "Find the name of amenities of the dorm where the student with last name Smith is living in.", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'"}, {"query": "What are the amenities in the dorm that a student who has the last name of Smith lives in?", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'"}, {"query": "How many customers are there?", "sql": "SELECT count(*) FROM customers"}, {"query": "Count the number of customers.", "sql": "SELECT count(*) FROM customers"}, {"query": "Find the emails and phone numbers of all the customers, ordered by email address and phone number.", "sql": "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number"}, {"query": "What are the emails and phone numbers of all customers, sorted by email address and phone number?", "sql": "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number"}, {"query": "Which city has the least number of customers whose type code is \"Good Credit Rating\"?", "sql": "SELECT town_city FROM customers WHERE customer_type_code  =  \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1"}, {"query": "Return the city with the customer type code \"Good Credit Rating\" that had the fewest customers.", "sql": "SELECT town_city FROM customers WHERE customer_type_code  =  \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1"}, {"query": "List the name of all products along with the number of complaints that they have received.", "sql": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name"}, {"query": "What are all the different product names, and how many complains has each received?", "sql": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name"}, {"query": "Find the emails of customers who has filed a complaints of the product with the most complaints.", "sql": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1"}, {"query": "What are the emails of customers who have filed complaints on the product which has had the greatest number of complaints?", "sql": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1"}, {"query": "Which products has been complained by the customer who has filed least amount of complaints?", "sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1"}, {"query": "Return the names of products that have had complaints filed by the customer who has filed the fewest complaints.", "sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1"}, {"query": "What is the phone number of the customer who has filed the most recent complaint?", "sql": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1"}, {"query": "Return the phone number of the customer who filed the complaint that was raised most recently.", "sql": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1"}, {"query": "Find the email and phone number of the customers who have never filed a complaint before.", "sql": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)"}, {"query": "What are the emails and phone numbers of custoemrs who have never filed a complaint?", "sql": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)"}, {"query": "Find the phone number of all the customers and staff.", "sql": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff"}, {"query": "What are the phone numbers of all customers and all staff members?", "sql": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff"}, {"query": "What is the description of the product named \"Chocolate\"?", "sql": "SELECT product_description FROM products WHERE product_name  =  \"Chocolate\""}, {"query": "Return the description of the product called \"Chocolate\".", "sql": "SELECT product_description FROM products WHERE product_name  =  \"Chocolate\""}, {"query": "Find the name and category of the most expensive product.", "sql": "SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1"}, {"query": "What is the name and category code of the product with the highest price?", "sql": "SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1"}, {"query": "Find the prices of products which has never received a single complaint.", "sql": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)"}, {"query": "What are the prices of products that have never gotten a complaint?", "sql": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)"}, {"query": "What is the average price of the products for each category?", "sql": "SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code"}, {"query": "Return the average price of products that have each category code.", "sql": "SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code"}, {"query": "Find the last name of the staff member who processed the complaint of the cheapest product.", "sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT 1"}, {"query": "What is the last name of the staff member in charge of the complaint on the product with the lowest price?", "sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT 1"}, {"query": "Which complaint status has more than 3 records on file?", "sql": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  3"}, {"query": "Return complaint status codes have more than 3 corresponding complaints?", "sql": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  3"}, {"query": "Find the last name of the staff whose email address contains \"wrau\".", "sql": "SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\""}, {"query": "What are the last names of staff with email addressed containing the substring \"wrau\"?", "sql": "SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\""}, {"query": "How many customers are there in the customer type with the most customers?", "sql": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Count the number of customers that have the customer type that is most common.", "sql": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the last name of the staff who has handled the first ever complaint?", "sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1"}, {"query": "Return the last name of the staff member who handled the complaint with the earliest date raised.", "sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1"}, {"query": "How many distinct complaint type codes are there in the database?", "sql": "SELECT count(DISTINCT complaint_type_code) FROM complaints"}, {"query": "Count the number of different complaint type codes.", "sql": "SELECT count(DISTINCT complaint_type_code) FROM complaints"}, {"query": "Find the address line 1 and 2 of the customer with email \"vbogisich@example.org\".", "sql": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\""}, {"query": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?", "sql": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\""}, {"query": "Find the number of complaints with Product Failure type for each complaint status.", "sql": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code"}, {"query": "Of complaints with the type code \"Product Failure\", how many had each different status code?", "sql": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code"}, {"query": "What is first names of the top 5 staff who have handled the greatest number of complaints?", "sql": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5"}, {"query": "Return the first names of the 5 staff members who have handled the most complaints.", "sql": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5"}, {"query": "Which state has the most customers?", "sql": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1"}, {"query": "Give the state that has the most customers.", "sql": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1"}, {"query": "How many submissions are there?", "sql": "SELECT count(*) FROM submission"}, {"query": "Count the number of submissions.", "sql": "SELECT count(*) FROM submission"}, {"query": "List the authors of submissions in ascending order of scores.", "sql": "SELECT Author FROM submission ORDER BY Scores ASC"}, {"query": "Find the author for each submission and list them in ascending order of submission score.", "sql": "SELECT Author FROM submission ORDER BY Scores ASC"}, {"query": "What are the authors of submissions and their colleges?", "sql": "SELECT Author ,  College FROM submission"}, {"query": "For each submission, show the author and their affiliated college.", "sql": "SELECT Author ,  College FROM submission"}, {"query": "Show the names of authors from college \"Florida\" or \"Temple\"", "sql": "SELECT Author FROM submission WHERE College  =  \"Florida\" OR College  =  \"Temple\""}, {"query": "Which authors with submissions are from college \"Florida\" or \"Temple\"?", "sql": "SELECT Author FROM submission WHERE College  =  \"Florida\" OR College  =  \"Temple\""}, {"query": "What is the average score of submissions?", "sql": "SELECT avg(Scores) FROM submission"}, {"query": "Compute the average score of submissions.", "sql": "SELECT avg(Scores) FROM submission"}, {"query": "What is the author of the submission with the highest score?", "sql": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1"}, {"query": "Find the author who achieved the highest score in a submission.", "sql": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1"}, {"query": "Show different colleges along with the number of authors of submission from each college.", "sql": "SELECT College ,  COUNT(*) FROM submission GROUP BY College"}, {"query": "For each college, return the college name and the count of authors with submissions from that college.", "sql": "SELECT College ,  COUNT(*) FROM submission GROUP BY College"}, {"query": "Show the most common college of authors of submissions.", "sql": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Which college has the most authors with submissions?", "sql": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Show the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80.", "sql": "SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80"}, {"query": "Which colleges have both authors with submission score above 90 and authors with submission score below 80?", "sql": "SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80"}, {"query": "Show the authors of submissions and the acceptance results of their submissions.", "sql": "SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID"}, {"query": "For each submission, find its author and acceptance result.", "sql": "SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID"}, {"query": "Show the result of the submission with the highest score.", "sql": "SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1"}, {"query": "Which submission received the highest score in acceptance result. Show me the result.", "sql": "SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1"}, {"query": "Show each author and the number of workshops they submitted to.", "sql": "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author"}, {"query": "How many workshops did each author submit to? Return the author name and the number of workshops.", "sql": "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author"}, {"query": "Show the authors who have submissions to more than one workshop.", "sql": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1"}, {"query": "Which authors have submitted to more than one workshop?", "sql": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1"}, {"query": "Show the date and venue of each workshop in ascending alphabetical order of the venue.", "sql": "SELECT Date ,  Venue FROM workshop ORDER BY Venue"}, {"query": "Sort the each workshop in alphabetical order of the venue. Return the date and venue of each workshop.", "sql": "SELECT Date ,  Venue FROM workshop ORDER BY Venue"}, {"query": "List the authors who do not have submission to any workshop.", "sql": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)"}, {"query": "Which authors did not submit to any workshop?", "sql": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)"}, {"query": "Find the number of investors in total.", "sql": "SELECT count(*) FROM INVESTORS"}, {"query": "Show all investor details.", "sql": "SELECT Investor_details FROM INVESTORS"}, {"query": "Show all distinct lot details.", "sql": "SELECT DISTINCT lot_details FROM LOTS"}, {"query": "Show the maximum amount of transaction.", "sql": "SELECT max(amount_of_transaction) FROM TRANSACTIONS"}, {"query": "Show all date and share count of transactions.", "sql": "SELECT date_of_transaction ,  share_count FROM TRANSACTIONS"}, {"query": "What is the total share of transactions?", "sql": "SELECT sum(share_count) FROM TRANSACTIONS"}, {"query": "Show all transaction ids with transaction code 'PUR'.", "sql": "SELECT transaction_id FROM TRANSACTIONS WHERE transaction_type_code  =  'PUR'"}, {"query": "Show all dates of transactions whose type code is \"SALE\".", "sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\""}, {"query": "Show the average amount of transactions with type code \"SALE\".", "sql": "SELECT avg(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\""}, {"query": "Show the description of transaction type with code \"PUR\".", "sql": "SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code\t  =  \"PUR\""}, {"query": "Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50.", "sql": "SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50"}, {"query": "Show the maximum share count of transactions where the amount is smaller than 10000", "sql": "SELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction  <  10000"}, {"query": "Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000.", "sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >  100 OR amount_of_transaction  >  1000"}, {"query": "Show the transaction type descriptions and dates if the share count is smaller than 10.", "sql": "SELECT T1.transaction_type_description ,  T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code WHERE T2.share_count  <  10"}, {"query": "Show details of all investors if they make any transaction with share count greater than 100.", "sql": "SELECT T1.Investor_details FROM  INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.share_count  >  100"}, {"query": "How many distinct transaction types are used in the transactions?", "sql": "SELECT COUNT(DISTINCT transaction_type_code) FROM TRANSACTIONS"}, {"query": "Return the lot details and investor ids.", "sql": "SELECT lot_details ,  investor_id FROM LOTS"}, {"query": "Return the lot details of lots that belong to investors with details \"l\"?", "sql": "SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON  T1.investor_id  =  T2.investor_id WHERE T1.Investor_details  =  \"l\""}, {"query": "What are the purchase details of transactions with amount bigger than 10000?", "sql": "SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  >  10000"}, {"query": "What are the sale details and dates of transactions with amount smaller than 3000?", "sql": "SELECT T1.sales_details ,  T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  <  3000"}, {"query": "What are the lot details of lots associated with transactions with share count smaller than 50?", "sql": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  <  50"}, {"query": "What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"?", "sql": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  >  100 AND T3.transaction_type_code  =  \"PUR\""}, {"query": "Show the average transaction amount for different transaction types.", "sql": "SELECT transaction_type_code ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code"}, {"query": "Show the maximum and minimum share count of different transaction types.", "sql": "SELECT transaction_type_code ,  max(share_count) ,  min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code"}, {"query": "Show the average share count of transactions for different investors.", "sql": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id"}, {"query": "Show the average share count of transactions each each investor, ordered by average share count.", "sql": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)"}, {"query": "Show the average amount of transactions for different investors.", "sql": "SELECT investor_id ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id"}, {"query": "Show the average amount of transactions for different lots.", "sql": "SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id"}, {"query": "Show the average amount of transactions for different lots, ordered by average amount of transactions.", "sql": "SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)"}, {"query": "Show the number of transactions with transaction type code \"SALE\" for different investors if it is larger than 0.", "sql": "SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\" GROUP BY investor_id"}, {"query": "Show the number of transactions for different investors.", "sql": "SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS GROUP BY investor_id"}, {"query": "Show the transaction type code that occurs the fewest times.", "sql": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1"}, {"query": "Show the transaction type code that occurs the most frequently.", "sql": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Show the description of the transaction type that occurs most frequently.", "sql": "SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Show the id and details of the investor that has the largest number of transactions.", "sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Show the id and details for the investors who have the top 3 number of transactions.", "sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3"}, {"query": "Show the ids of the investors who have at least two transactions.", "sql": "SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*)  >=  2"}, {"query": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\".", "sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  \"SALE\" GROUP BY T2.investor_id HAVING COUNT(*)  >=  2"}, {"query": "What are the dates of transactions with at least 100 share count or amount bigger than 100?", "sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >=  100 OR amount_of_transaction  >=  100"}, {"query": "What are the details of all sales and purchases?", "sql": "SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases"}, {"query": "What are the details of the lots which are not used in any transactions?", "sql": "SELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id  =  T2.lot_id"}, {"query": "How many available hotels are there in total?", "sql": "SELECT count(*) FROM HOTELS"}, {"query": "Find the total number of available hotels.", "sql": "SELECT count(*) FROM HOTELS"}, {"query": "What are the price ranges of hotels?", "sql": "SELECT price_range FROM HOTELS"}, {"query": "Tell me the price ranges for all the hotels.", "sql": "SELECT price_range FROM HOTELS"}, {"query": "Show all distinct location names.", "sql": "SELECT DISTINCT Location_Name FROM LOCATIONS"}, {"query": "What are the distinct location names?", "sql": "SELECT DISTINCT Location_Name FROM LOCATIONS"}, {"query": "Show the names and details of all the staff members.", "sql": "SELECT Name ,  Other_Details FROM Staff"}, {"query": "What is the name and detail of each staff member?", "sql": "SELECT Name ,  Other_Details FROM Staff"}, {"query": "Show details of all visitors.", "sql": "SELECT Tourist_Details FROM VISITORS"}, {"query": "What is the detail of each visitor?", "sql": "SELECT Tourist_Details FROM VISITORS"}, {"query": "Show the price ranges of hotels with 5 star ratings.", "sql": "SELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\""}, {"query": "What are the price ranges of five star hotels?", "sql": "SELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\""}, {"query": "Show the average price range of hotels that have 5 star ratings and allow pets.", "sql": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1"}, {"query": "What is the average price range of five star hotels that allow pets?", "sql": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1"}, {"query": "What is the address of the location \"UK Gallery\"?", "sql": "SELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\""}, {"query": "Find the address of the location named \"UK Gallery\".", "sql": "SELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\""}, {"query": "What is the detail of the location UK Gallery?", "sql": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\""}, {"query": "Return the detail of the location named \"UK Gallery\".", "sql": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\""}, {"query": "Which location names contain the word \"film\"?", "sql": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\""}, {"query": "Find all the locations whose names contain the word \"film\".", "sql": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\""}, {"query": "How many distinct names are associated with all the photos?", "sql": "SELECT count(DISTINCT Name) FROM PHOTOS"}, {"query": "Count the number of distinct names associated with the photos.", "sql": "SELECT count(DISTINCT Name) FROM PHOTOS"}, {"query": "What are the distinct visit dates?", "sql": "SELECT DISTINCT Visit_Date FROM VISITS"}, {"query": "Find all the distinct visit dates.", "sql": "SELECT DISTINCT Visit_Date FROM VISITS"}, {"query": "What are the names of the tourist attractions that can be accessed by bus?", "sql": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\""}, {"query": "Which tourist attractions can we get to by bus? Tell me the names of the attractions.", "sql": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\""}, {"query": "What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?", "sql": "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\""}, {"query": "Find the names and opening hours of the tourist attractions that we get to by bus or walk.", "sql": "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\""}, {"query": "What are the star rating descriptions of the hotels with price above 10000?", "sql": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000"}, {"query": "Give me the star rating descriptions of the hotels that cost more than 10000.", "sql": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000"}, {"query": "What are the details and opening hours of the museums?", "sql": "SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID"}, {"query": "Give me the detail and opening hour for each museum.", "sql": "SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID"}, {"query": "What is the name of the tourist attraction that is associated with the photo \"game1\"?", "sql": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\""}, {"query": "Which tourist attraction is associated with the photo \"game1\"? Return its name.", "sql": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\""}, {"query": "What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"?", "sql": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\""}, {"query": "Find the names and descriptions of the photos taken at the tourist attraction called \"film festival\".", "sql": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\""}, {"query": "What are the details and ways to get to tourist attractions related to royal family?", "sql": "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID"}, {"query": "Which tourist attractions are related to royal family? Tell me their details and how we can get there.", "sql": "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID"}, {"query": "What are the details of the shops that can be accessed by walk?", "sql": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\""}, {"query": "Find the details of the shops that can be reached by walk.", "sql": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\""}, {"query": "What is the name of the staff that is in charge of the attraction named \"US museum\"?", "sql": "SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"US museum\""}, {"query": "Tell me the name of the staff in charge of the attraction called \"US museum\".", "sql": "SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"US museum\""}, {"query": "What are the details of the markets that can be accessed by walk or bus?", "sql": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\""}, {"query": "Find the details of all the markets that are accessible by walk or bus.", "sql": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\""}, {"query": "What are the visit date and details of the visitor whose detail is 'Vincent'?", "sql": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\""}, {"query": "Find the visit date and details of the tourist whose detail is 'Vincent'", "sql": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\""}, {"query": "Which tourist attractions does the visitor with detail 'Vincent' visit?", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  \"Vincent\""}, {"query": "Show the tourist attractions visited by the tourist whose detail is 'Vincent'.", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  \"Vincent\""}, {"query": "What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?", "sql": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\""}, {"query": "For each tourist attraction, return its name and the date when the tourists named Vincent or Vivian visited there.", "sql": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\""}, {"query": "Show the average price of hotels for each star rating code.", "sql": "SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code"}, {"query": "What is the average price range of hotels for each each star rating code?", "sql": "SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code"}, {"query": "Show the average price of hotels for different pet policy.", "sql": "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn"}, {"query": "What are the average prices of hotels grouped by their pet policy.", "sql": "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn"}, {"query": "Show the id and star rating of each hotel, ordered by its price from low to high.", "sql": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC"}, {"query": "Find the id and star rating of each hotel and sort them in increasing order of price.", "sql": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC"}, {"query": "Show the details of the top 3 most expensive hotels.", "sql": "SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3"}, {"query": "What are the details of the three most expensive hotels?", "sql": "SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3"}, {"query": "Show the details and star ratings of the 3 least expensive hotels.", "sql": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3"}, {"query": "What are the details and star ratings of the three hotels with the lowest price ranges?", "sql": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3"}, {"query": "Show the transportation method most people choose to get to tourist attractions.", "sql": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Which transportation method is used the most often to get to tourist attractions?", "sql": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Show the description and code of the attraction type most tourist attractions belong to.", "sql": "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Which attraction type does the most tourist attractions belong to? Tell me its  attraction type description and code.", "sql": "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.", "sql": "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There"}, {"query": "List all the possible ways to get to attractions, together with the number of attractions accessible by these methods.", "sql": "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There"}, {"query": "Show different tourist attractions' names, ids, and the corresponding number of visits.", "sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID"}, {"query": "What are the name, id and the corresponding number of visits for each  tourist attraction?", "sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID"}, {"query": "Show the names and ids of tourist attractions that are visited at least two times.", "sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2"}, {"query": "Which tourist attractions are visited at least twice? Give me their names and ids.", "sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2"}, {"query": "Show the names and ids of tourist attractions that are visited at most once.", "sql": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1"}, {"query": "What are the names and ids of the tourist attractions that are visited at most once?", "sql": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1"}, {"query": "What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?", "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\""}, {"query": "Find the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent.", "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\""}, {"query": "What are the names of the tourist attractions that have parking or shopping as their feature details?", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'"}, {"query": "Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'"}, {"query": "What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?", "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\""}, {"query": "Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction.", "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\""}, {"query": "What are the names of the tourist attractions Vincent and Marcelle visit?", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\""}, {"query": "Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\""}, {"query": "What are the names of tourist attraction that Alison visited but Rosalind did not visit?", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\""}, {"query": "Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\""}, {"query": "How many tourists did not make any visit?", "sql": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )"}, {"query": "Count the number of tourists who did not visit any place.", "sql": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )"}, {"query": "How many video games exist?", "sql": "SELECT count(*) FROM Video_games"}, {"query": "How many video games do you have?", "sql": "SELECT count(*) FROM Video_games"}, {"query": "How many video game types exist?", "sql": "SELECT count(DISTINCT gtype) FROM Video_games"}, {"query": "What is the count of different game types?", "sql": "SELECT count(DISTINCT gtype) FROM Video_games"}, {"query": "Show all video game types.", "sql": "SELECT DISTINCT gtype FROM Video_games"}, {"query": "What are the different types of video games?", "sql": "SELECT DISTINCT gtype FROM Video_games"}, {"query": "Show all video games and their types in the order of their names.", "sql": "SELECT gname ,  gtype FROM Video_games ORDER BY gname"}, {"query": "What are the names of all the video games and their types in alphabetical order?", "sql": "SELECT gname ,  gtype FROM Video_games ORDER BY gname"}, {"query": "Show all video games with type Collectible card game.", "sql": "SELECT gname FROM Video_games WHERE gtype  =  \"Collectible card game\""}, {"query": "What are the names of all video games that are collectible cards?", "sql": "SELECT gname FROM Video_games WHERE gtype  =  \"Collectible card game\""}, {"query": "What is the type of video game Call of Destiny.", "sql": "SELECT gtype FROM Video_games WHERE gname  =  \"Call of Destiny\""}, {"query": "What type of game is Call of Destiny?", "sql": "SELECT gtype FROM Video_games WHERE gname  =  \"Call of Destiny\""}, {"query": "How many video games have type Massively multiplayer online game?", "sql": "SELECT count(*) FROM Video_games WHERE gtype  =  \"Massively multiplayer online game\""}, {"query": "Count the number of video games with Massively multiplayer online game type .", "sql": "SELECT count(*) FROM Video_games WHERE gtype  =  \"Massively multiplayer online game\""}, {"query": "Show all video game types and the number of video games in each type.", "sql": "SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype"}, {"query": "What are the types of video games and how many are in each type?", "sql": "SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype"}, {"query": "Which game type has most number of games?", "sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1"}, {"query": "What type has the most games?", "sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which game type has least number of games?", "sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1"}, {"query": "What is the type with the fewest games?", "sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1"}, {"query": "Show ids for all students who live in CHI.", "sql": "SELECT StuID FROM Student WHERE city_code  =  \"CHI\""}, {"query": "What are the ids of all students who live in CHI?", "sql": "SELECT StuID FROM Student WHERE city_code  =  \"CHI\""}, {"query": "Show ids for all students who have advisor 1121.", "sql": "SELECT StuID FROM Student WHERE Advisor  =  1121"}, {"query": "What are the ids of all students who have advisor number 1121?", "sql": "SELECT StuID FROM Student WHERE Advisor  =  1121"}, {"query": "Show first name for all students with major 600.", "sql": "SELECT Fname FROM Student WHERE Major  =  600"}, {"query": "What are the first names for all students who are from the major numbered 600?", "sql": "SELECT Fname FROM Student WHERE Major  =  600"}, {"query": "Show the average, minimum, and maximum age for different majors.", "sql": "SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major"}, {"query": "What are the average, minimum, and max ages for each of the different majors?", "sql": "SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major"}, {"query": "Show all advisors who have at least two students.", "sql": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2"}, {"query": "What are the advisors", "sql": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2"}, {"query": "How many sports do we have?", "sql": "SELECT count(DISTINCT sportname) FROM Sportsinfo"}, {"query": "How many different types of sports do we offer?", "sql": "SELECT count(DISTINCT sportname) FROM Sportsinfo"}, {"query": "How many students play sports?", "sql": "SELECT count(DISTINCT StuID) FROM Sportsinfo"}, {"query": "How many different students are involved in sports?", "sql": "SELECT count(DISTINCT StuID) FROM Sportsinfo"}, {"query": "List ids for all student who are on scholarship.", "sql": "SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'"}, {"query": "What are the ids for all sporty students who are on scholarship?", "sql": "SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'"}, {"query": "Show last names for all student who are on scholarship.", "sql": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'"}, {"query": "What are the last names for all scholarship students?", "sql": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'"}, {"query": "How many games are played for all students?", "sql": "SELECT sum(gamesplayed) FROM Sportsinfo"}, {"query": "What is the total number of games played?", "sql": "SELECT sum(gamesplayed) FROM Sportsinfo"}, {"query": "How many games are played for all football games by students on scholarship?", "sql": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y'"}, {"query": "What is the total number of all football games played by scholarship students?", "sql": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y'"}, {"query": "Show all sport name and the number of students.", "sql": "SELECT sportname ,  count(*) FROM Sportsinfo GROUP BY sportname"}, {"query": "How many students play each sport?", "sql": "SELECT sportname ,  count(*) FROM Sportsinfo GROUP BY sportname"}, {"query": "Show all student IDs with the number of sports and total number of games played", "sql": "SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID"}, {"query": "What are the ids of all students along with how many sports and games did they play?", "sql": "SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID"}, {"query": "Show all student IDs with more than total 10 hours per week on all sports played.", "sql": "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  10"}, {"query": "What are the student IDs for everybody who worked for more than 10 hours per week on all sports?", "sql": "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  10"}, {"query": "What is the first name and last name of the student who have most number of sports?", "sql": "SELECT T2.Fname ,  T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the first and last name of the student who played the most sports?", "sql": "SELECT T2.Fname ,  T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which sport has most number of students on scholarship?", "sql": "SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the sport with the most scholarship students?", "sql": "SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show student ids who don't have any sports.", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo"}, {"query": "What are the ids of all students who don't play sports?", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo"}, {"query": "Show student ids who are on scholarship and have major 600.", "sql": "SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'"}, {"query": "What are the student ids for those on scholarship in major number 600?", "sql": "SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'"}, {"query": "Show student ids who are female and play football.", "sql": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\""}, {"query": "What are the ids of all female students who play football?", "sql": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\""}, {"query": "Show all male student ids who don't play football.", "sql": "SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\""}, {"query": "What are the ids of all male students who do not play football?", "sql": "SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\""}, {"query": "Show total hours per week and number of games played for student David Shieber.", "sql": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  \"David\" AND T2.Lname  =  \"Shieber\""}, {"query": "What is the total number of hours per work and number of games played by David Shieber?", "sql": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  \"David\" AND T2.Lname  =  \"Shieber\""}, {"query": "Show total hours per week and number of games played for students under 20.", "sql": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20"}, {"query": "What is the total number of hours per week and number of games played by students under 20?", "sql": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20"}, {"query": "How many students play video games?", "sql": "SELECT count(DISTINCT StuID) FROM Plays_games"}, {"query": "How many different students play games?", "sql": "SELECT count(DISTINCT StuID) FROM Plays_games"}, {"query": "Show ids of students who don't play video game.", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games"}, {"query": "What are the ids of all students who are not video game players?", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games"}, {"query": "Show ids of students who play video game and play sports.", "sql": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games"}, {"query": "What are the ids of all students who played video games and sports?", "sql": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games"}, {"query": "Show all game ids and the number of hours played.", "sql": "SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid"}, {"query": "What are ids and total number of hours played for each game?", "sql": "SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid"}, {"query": "Show all student ids and the number of hours played.", "sql": "SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid"}, {"query": "What are the ids of all students and number of hours played?", "sql": "SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid"}, {"query": "Show the game name that has most number of hours played.", "sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1"}, {"query": "What is the name of the game that has been played the most?", "sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1"}, {"query": "Show all game names played by at least 1000 hours.", "sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000"}, {"query": "What are the names of all the games that have been played for at least 1000 hours?", "sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000"}, {"query": "Show all game names played by Linda Smith", "sql": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  \"Smith\" AND T3.Fname  =  \"Linda\""}, {"query": "What are the names of all games played by Linda Smith?", "sql": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  \"Smith\" AND T3.Fname  =  \"Linda\""}, {"query": "Find the last and first name of students who are playing Football or Lacrosse.", "sql": "SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"Football\" OR T1.SportName  =  \"Lacrosse\""}, {"query": "What is the first and last name of all students who play Football or Lacrosse?", "sql": "SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"Football\" OR T1.SportName  =  \"Lacrosse\""}, {"query": "Find the first name and age of the students who are playing both Football and Lacrosse.", "sql": "SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")"}, {"query": "What are the first names and ages of all students who are playing both Football and Lacrosse?", "sql": "SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")"}, {"query": "Find the last name and gender of the students who are playing both Call of Destiny and Works of Widenius games.", "sql": "SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Call of Destiny\" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Works of Widenius\")"}, {"query": "what is the last name and gender of all students who played both Call of Destiny and Works of Widenius?", "sql": "SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Call of Destiny\" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Works of Widenius\")"}, {"query": "Find the name of all customers.", "sql": "SELECT customer_name FROM customers"}, {"query": "What are the names of all the customers?", "sql": "SELECT customer_name FROM customers"}, {"query": "How many customers are there?", "sql": "SELECT count(*) FROM customers"}, {"query": "Return the total number of distinct customers.", "sql": "SELECT count(*) FROM customers"}, {"query": "What is the average amount of items ordered in each order?", "sql": "SELECT avg(order_quantity) FROM order_items"}, {"query": "Find the average order quantity per order.", "sql": "SELECT avg(order_quantity) FROM order_items"}, {"query": "What are the names of customers who use payment method \"Cash\"?", "sql": "SELECT customer_name FROM customers WHERE payment_method  =  \"Cash\""}, {"query": "Which customers use \"Cash\" for payment method? Return the customer names.", "sql": "SELECT customer_name FROM customers WHERE payment_method  =  \"Cash\""}, {"query": "Find the \"date became customers\" of the customers whose ID is between 10 and 20.", "sql": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20"}, {"query": "What are the dates when customers with ids between 10 and 20 became customers?", "sql": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20"}, {"query": "Which payment method is used by most customers?", "sql": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the payment method that is used most frequently.", "sql": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the names of customers using the most popular payment method?", "sql": "SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)"}, {"query": "Find the name of the customers who use the most frequently used payment method.", "sql": "SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)"}, {"query": "What are all the payment methods?", "sql": "SELECT DISTINCT payment_method FROM customers"}, {"query": "Return all the distinct payment methods used by customers.", "sql": "SELECT DISTINCT payment_method FROM customers"}, {"query": "What are the details of all products?", "sql": "SELECT DISTINCT product_details FROM products"}, {"query": "Return the the details of all products.", "sql": "SELECT DISTINCT product_details FROM products"}, {"query": "Find the name of all customers whose name contains \"Alex\".", "sql": "SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\""}, {"query": "Which customer's name contains \"Alex\"? Find the full name.", "sql": "SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\""}, {"query": "Find the detail of products whose detail contains the word \"Latte\" or the word \"Americano\"", "sql": "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\""}, {"query": "Which product's detail contains the word \"Latte\" or \"Americano\"? Return the full detail.", "sql": "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\""}, {"query": "What is the address content of the customer named \"Maudie Kertzmann\"?", "sql": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\""}, {"query": "Return the address content for the customer whose name is \"Maudie Kertzmann\".", "sql": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\""}, {"query": "How many customers are living in city \"Lake Geovannyton\"?", "sql": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\""}, {"query": "Find the number of customers who live in the city called Lake Geovannyton.", "sql": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\""}, {"query": "Find the name of customers who are living in Colorado?", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"Colorado\""}, {"query": "What are the names of customers who live in Colorado state?", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"Colorado\""}, {"query": "Find the list of cities that no customer is living in.", "sql": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)"}, {"query": "What are the cities no customers live in?", "sql": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)"}, {"query": "Which city has the most customers living in?", "sql": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the city where the most customers live.", "sql": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1"}, {"query": "Retrieve the list of all cities.", "sql": "SELECT DISTINCT city FROM addresses"}, {"query": "List all the distinct cities", "sql": "SELECT DISTINCT city FROM addresses"}, {"query": "Find the city with post code 255.", "sql": "SELECT city FROM addresses WHERE zip_postcode  =  255"}, {"query": "Which city is post code 255 located in?", "sql": "SELECT city FROM addresses WHERE zip_postcode  =  255"}, {"query": "Find the state and country of all cities with post code starting with 4.", "sql": "SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\""}, {"query": "What are the state and country of all the cities that have post codes starting with 4.\\", "sql": "SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\""}, {"query": "List the countries having more than 4 addresses listed.", "sql": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4"}, {"query": "For which countries are there more than four distinct addresses listed?", "sql": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4"}, {"query": "List all the contact channel codes that were used less than 5 times.", "sql": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5"}, {"query": "Which contact channel codes were used less than 5 times?", "sql": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5"}, {"query": "Which contact channel has been used by the customer with name \"Tillman Ernser\"?", "sql": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\""}, {"query": "Find the contact channel code that was used by the customer named \"Tillman Ernser\".", "sql": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\""}, {"query": "What is the \"active to date\" of the latest contact channel used by \"Tillman Ernser\"?", "sql": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\""}, {"query": "Return the the \"active to date\" of the latest contact channel used by the customer named \"Tillman Ernser\".", "sql": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\""}, {"query": "What is the average time span of contact channels in the database?", "sql": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels"}, {"query": "Compute the average active time span of contact channels.", "sql": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels"}, {"query": "What is the channel code and contact number of the customer contact channel that was active for the longest time?", "sql": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)"}, {"query": "Return the channel code and contact number of the customer contact channel whose active duration was the longest.", "sql": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)"}, {"query": "Find the name and active date of the customer that use email as the contact channel.", "sql": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'"}, {"query": "What are the name and active date of the customers whose contact channel code is email?", "sql": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'"}, {"query": "What is the name of the customer that made the order with the largest quantity?", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)"}, {"query": "Find the name of the customer who made the order of the largest amount of goods.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)"}, {"query": "What is the name of the customer that has purchased the most items?", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1"}, {"query": "Give me the name of the customer who ordered the most items in total.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1"}, {"query": "What is the payment method of the customer that has purchased the least quantity of items?", "sql": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1"}, {"query": "Tell me the payment method used by the customer who ordered the least amount of goods in total.", "sql": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1"}, {"query": "How many types of products have Rodrick Heaney bought in total?", "sql": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\""}, {"query": "Find the number of distinct products Rodrick Heaney has bought so far.", "sql": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\""}, {"query": "What is the total quantity of products purchased by \"Rodrick Heaney\"?", "sql": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\""}, {"query": "Tell me the total quantity of products bought by the customer called \"Rodrick Heaney\".", "sql": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\""}, {"query": "How many customers have at least one order with status \"Cancelled\"?", "sql": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\""}, {"query": "Return the number of customers who have at least one order with \"Cancelled\" status.", "sql": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\""}, {"query": "How many orders have detail \"Second time\"?", "sql": "SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\""}, {"query": "Tell me the number of orders with \"Second time\" as order detail.", "sql": "SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\""}, {"query": "Find the customer name and date of the orders that have the status \"Delivered\".", "sql": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\""}, {"query": "What are the customer name and date of the orders whose status is \"Delivered\".", "sql": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\""}, {"query": "What is the total number of products that are in orders with status \"Cancelled\"?", "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\""}, {"query": "Find the total quantity of products associated with the orders in the \"Cancelled\" status.", "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\""}, {"query": "Find the total amount of products ordered before 2018-03-17 07:13:53.", "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\""}, {"query": "What is the total amount of products purchased before 2018-03-17 07:13:53?", "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\""}, {"query": "Who made the latest order?", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1"}, {"query": "Find the name of the customer who made an order most recently.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1"}, {"query": "Which product has been ordered most number of times?", "sql": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the most frequently ordered product? Tell me the detail of the product", "sql": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the name and ID of the product whose total order quantity is the largest.", "sql": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1"}, {"query": "What are the name and ID of the product bought the most.", "sql": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1"}, {"query": "Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.", "sql": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\""}, {"query": "What are all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.", "sql": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\""}, {"query": "Find the name of customers who did not pay with Cash.", "sql": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'"}, {"query": "What is the name of customers who do not use Cash as payment method.", "sql": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'"}, {"query": "Find the names of customers who never ordered product Latte.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'"}, {"query": "What are names of customers who never ordered product Latte.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'"}, {"query": "Find the names of customers who never placed an order.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id"}, {"query": "What are the names of customers who never made an order.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id"}, {"query": "Find the names of customers who ordered both products Latte and Americano.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'"}, {"query": "What are the names of customers who have purchased both products Latte and Americano?", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'"}, {"query": "How many artists are there?", "sql": "SELECT count(*) FROM artist"}, {"query": "Count the number of artists.", "sql": "SELECT count(*) FROM artist"}, {"query": "List the age of all music artists.", "sql": "SELECT Age FROM artist"}, {"query": "What are the ages of all music artists?", "sql": "SELECT Age FROM artist"}, {"query": "What is the average age of all artists?", "sql": "SELECT avg(Age) FROM artist"}, {"query": "Return the average age across all artists.", "sql": "SELECT avg(Age) FROM artist"}, {"query": "What are the famous titles of the artist \"Triumfall\"?", "sql": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\""}, {"query": "Return the famous titles of the artist called \"Triumfall\".", "sql": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\""}, {"query": "What are the distinct Famous release dates?", "sql": "SELECT distinct(Famous_Release_date) FROM artist"}, {"query": "Give the distinct famous release dates for all artists.", "sql": "SELECT distinct(Famous_Release_date) FROM artist"}, {"query": "Return the dates of ceremony and the results of all music festivals", "sql": "SELECT Date_of_ceremony ,  RESULT FROM music_festival"}, {"query": "What are the dates of ceremony and results for each music festival?", "sql": "SELECT Date_of_ceremony ,  RESULT FROM music_festival"}, {"query": "What are the category of music festivals with result \"Awarded\"?", "sql": "SELECT Category FROM music_festival WHERE RESULT  =  \"Awarded\""}, {"query": "Return the categories of music festivals that have the result \"Awarded\".", "sql": "SELECT Category FROM music_festival WHERE RESULT  =  \"Awarded\""}, {"query": "What are the maximum and minimum week on top of all volumes?", "sql": "SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume"}, {"query": "Give the maximum and minimum weeks on top across all volumes.", "sql": "SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume"}, {"query": "What are the songs in volumes with more than 1 week on top?", "sql": "SELECT Song FROM volume WHERE Weeks_on_Top  >  1"}, {"query": "Give the songs included in volumes that have more than 1 week on top.", "sql": "SELECT Song FROM volume WHERE Weeks_on_Top  >  1"}, {"query": "Please list all songs in volumes in ascending alphabetical order.", "sql": "SELECT Song FROM volume ORDER BY Song"}, {"query": "What are the the songs in volumes, listed in ascending order?", "sql": "SELECT Song FROM volume ORDER BY Song"}, {"query": "How many distinct artists do the volumes associate to?", "sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume"}, {"query": "Count the number of distinct artists who have volumes.", "sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume"}, {"query": "Please show the date of ceremony of the volumes that last more than 2 weeks on top.", "sql": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2"}, {"query": "What are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top?", "sql": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2"}, {"query": "Please show the songs that have result \"nominated\" at music festivals.", "sql": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  \"Nominated\""}, {"query": "What are the songs in volumes that have resulted in a nomination at music festivals?", "sql": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  \"Nominated\""}, {"query": "What are the issue dates of volumes associated with the artist \"Gorgoroth\"?", "sql": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  \"Gorgoroth\""}, {"query": "Return the issue dates of volumes that are by the artist named Gorgoroth.", "sql": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  \"Gorgoroth\""}, {"query": "What are the songs in volumes associated with the artist aged 32 or older?", "sql": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32"}, {"query": "Return names of songs in volumes that are by artists that are at least 32 years old.", "sql": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32"}, {"query": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?", "sql": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25"}, {"query": "Return the average number of weeks on top for volumes by artists that are at most 25 years old.", "sql": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25"}, {"query": "What are the famous title of the artists associated with volumes with more than 2 weeks on top?", "sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2"}, {"query": "Return the famous titles for artists that have volumes that lasted more than 2 weeks on top.", "sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2"}, {"query": "Please list the age and famous title of artists in descending order of age.", "sql": "SELECT Famous_Title ,  Age FROM artist ORDER BY Age DESC"}, {"query": "What are the famous titles and ages of each artist, listed in descending order by age?", "sql": "SELECT Famous_Title ,  Age FROM artist ORDER BY Age DESC"}, {"query": "What is the famous release date of the artist with the oldest age?", "sql": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1"}, {"query": "Return the famous release date for the oldest artist.", "sql": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1"}, {"query": "Please show the categories of the music festivals and the count.", "sql": "SELECT Category ,  COUNT(*) FROM music_festival GROUP BY Category"}, {"query": "Return the number of music festivals of each category.", "sql": "SELECT Category ,  COUNT(*) FROM music_festival GROUP BY Category"}, {"query": "What is the most common result of the music festival?", "sql": "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Return the result that is most frequent at music festivals.", "sql": "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Please show the categories of the music festivals with count more than 1.", "sql": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1"}, {"query": "What are the categories of music festivals for which there have been more than 1 music festival?", "sql": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1"}, {"query": "What is the song in the volume with the maximum weeks on top?", "sql": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1"}, {"query": "Return the song in the volume that has spent the most weeks on top?", "sql": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1"}, {"query": "Find the famous titles of artists that do not have any volume.", "sql": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)"}, {"query": "What are the famous titles of artists who do not have any volumes?", "sql": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)"}, {"query": "Show the famous titles of the artists with both volumes that lasted more than 2 weeks on top and volumes that lasted less than 2 weeks on top.", "sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2"}, {"query": "What are the famous titles of artists who have not only had volumes that spent more than 2 weeks on top but also volumes that spent less than 2 weeks on top?", "sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2"}, {"query": "What are the date of ceremony of music festivals with category \"Best Song\" and result \"Awarded\"?", "sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\""}, {"query": "Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\".", "sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\""}, {"query": "What is the issue date of the volume with the minimum weeks on top?", "sql": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1"}, {"query": "Return the issue date of the volume that has spent the fewest weeks on top.", "sql": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1"}, {"query": "How many distinct artists have volumes?", "sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume"}, {"query": "Count the number of artists who have had volumes.", "sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume"}, {"query": "Please show the results of music festivals and the number of music festivals that have had each, ordered by this count.", "sql": "SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC"}, {"query": "How many music festivals have had each kind of result, ordered descending by count?", "sql": "SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC"}, {"query": "What are the issue dates of volumes associated with the artist aged 23 or younger?", "sql": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23"}, {"query": "Return the issue dates of volumes by artists who are at most 23 years old?", "sql": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23"}, {"query": "How many roller coasters are there?", "sql": "SELECT count(*) FROM roller_coaster"}, {"query": "List the names of roller coasters by ascending order of length.", "sql": "SELECT Name FROM roller_coaster ORDER BY LENGTH ASC"}, {"query": "What are the lengths and heights of roller coasters?", "sql": "SELECT LENGTH ,  Height FROM roller_coaster"}, {"query": "List the names of countries whose language is not \"German\".", "sql": "SELECT Name FROM country WHERE Languages != \"German\""}, {"query": "Show the statuses of roller coasters longer than 3300 or higher than 100.", "sql": "SELECT Status FROM roller_coaster WHERE LENGTH  >  3300 OR Height  >  100"}, {"query": "What are the speeds of the longest roller coaster?", "sql": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1"}, {"query": "What is the average speed of roller coasters?", "sql": "SELECT avg(Speed) FROM roller_coaster"}, {"query": "Show the different statuses and the numbers of roller coasters for each status.", "sql": "SELECT Status ,  COUNT(*) FROM roller_coaster GROUP BY Status"}, {"query": "Please show the most common status of roller coasters.", "sql": "SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "List the status shared by more than two roller coaster.", "sql": "SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*)  >  2"}, {"query": "Show the park of the roller coaster with the highest speed.", "sql": "SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1"}, {"query": "Show the names of roller coasters and names of country they are in.", "sql": "SELECT T2.Name ,  T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID"}, {"query": "Show the names of countries that have more than one roller coaster.", "sql": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"}, {"query": "Show the name and population of the country that has the highest roller coaster.", "sql": "SELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT 1"}, {"query": "Show the names of countries and the average speed of roller coasters from each country.", "sql": "SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name"}, {"query": "How many countries do not have an roller coaster longer than 3000?", "sql": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )"}, {"query": "What are the country names, area and population which has both roller coasters with speed higher", "sql": "SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  >  60 INTERSECT SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  <  55"}, {"query": "How many different captain ranks are there?", "sql": "SELECT count(DISTINCT rank) FROM captain"}, {"query": "Count the number of different ranks of captain.", "sql": "SELECT count(DISTINCT rank) FROM captain"}, {"query": "How many captains are in each rank?", "sql": "SELECT count(*) ,  rank FROM captain GROUP BY rank"}, {"query": "Count the number of captains that have each rank.", "sql": "SELECT count(*) ,  rank FROM captain GROUP BY rank"}, {"query": "How many captains with younger than 50 are in each rank?", "sql": "SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank"}, {"query": "Count the number of captains younger than 50 of each rank.", "sql": "SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank"}, {"query": "Sort all captain names by their ages from old to young.", "sql": "SELECT name FROM captain ORDER BY age DESC"}, {"query": "What are the names of captains, sorted by age descending?", "sql": "SELECT name FROM captain ORDER BY age DESC"}, {"query": "Find the name, class and rank of all captains.", "sql": "SELECT name ,  CLASS ,  rank FROM captain"}, {"query": "What are the names, classes, and ranks of all captains?", "sql": "SELECT name ,  CLASS ,  rank FROM captain"}, {"query": "Which rank is the most common among captains?", "sql": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the rank for which there are the fewest captains.", "sql": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which classes have more than two captains?", "sql": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*)  >  2"}, {"query": "Give the classes that have more than two captains.", "sql": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*)  >  2"}, {"query": "Find the name of captains whose rank are either Midshipman or Lieutenant.", "sql": "SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'"}, {"query": "What are the names of captains that have either the rank Midshipman or Lieutenant?", "sql": "SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'"}, {"query": "What are the average and minimum age of captains in different class?", "sql": "SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS"}, {"query": "Return the average and minimum age of captains in each class.", "sql": "SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS"}, {"query": "Find the captain rank that has some captains in both Cutter and Armed schooner classes.", "sql": "SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'"}, {"query": "What are the ranks of captains that are both in the Cutter and Armed schooner classes?", "sql": "SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'"}, {"query": "Find the captain rank that has no captain in Third-rate ship of the line class.", "sql": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'"}, {"query": "What are the ranks of captains that have no captain that are in the Third-rate ship of the line class?", "sql": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'"}, {"query": "What is the name of the youngest captain?", "sql": "SELECT name FROM captain ORDER BY age LIMIT 1"}, {"query": "Return the name of the youngest captain.", "sql": "SELECT name FROM captain ORDER BY age LIMIT 1"}, {"query": "how many ships are there?", "sql": "SELECT count(*) FROM ship"}, {"query": "Count the number of ships.", "sql": "SELECT count(*) FROM ship"}, {"query": "Find the name, type, and flag of the ship that is built in the most recent year.", "sql": "SELECT name ,  TYPE ,  flag FROM ship ORDER BY built_year DESC LIMIT 1"}, {"query": "What is the name, type, and flag of the ship that was built in the most recent year?", "sql": "SELECT name ,  TYPE ,  flag FROM ship ORDER BY built_year DESC LIMIT 1"}, {"query": "Group by ships by flag, and return number of ships that have each flag.", "sql": "SELECT count(*) ,  flag FROM ship GROUP BY flag"}, {"query": "What are the different ship flags, and how many ships have each?", "sql": "SELECT count(*) ,  flag FROM ship GROUP BY flag"}, {"query": "Which flag is most widely used among all ships?", "sql": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the flag that is most common among all ships.", "sql": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1"}, {"query": "List all ship names in the order of built year and class.", "sql": "SELECT name FROM ship ORDER BY built_year ,  CLASS"}, {"query": "What are the names of ships, ordered by year they were built and their class?", "sql": "SELECT name FROM ship ORDER BY built_year ,  CLASS"}, {"query": "Find the ship type that are used by both ships with Panama and Malta flags.", "sql": "SELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta'"}, {"query": "What types of ships have both ships that have Panama Flags and Malta flags?", "sql": "SELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta'"}, {"query": "In which year were most of ships built?", "sql": "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the year in which most ships were built?", "sql": "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the name of the ships that have more than one captain.", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1"}, {"query": "What are the names of ships that have more than one captain?", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1"}, {"query": "what are the names and classes of the ships that do not have any captain yet?", "sql": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)"}, {"query": "Return the names and classes of ships that do not have a captain?", "sql": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)"}, {"query": "Find the name of the ship that is steered by the youngest captain.", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1"}, {"query": "What is the name of the ship that is commanded by the youngest captain?", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1"}, {"query": "Find the name and flag of ships that are not steered by any captain with Midshipman rank.", "sql": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')"}, {"query": "What are the names and flags of ships that do not have a captain with the rank of Midshipman?", "sql": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')"}, {"query": "Find the name of the ships that are steered by both a captain with Midshipman rank and a captain with Lieutenant rank.", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'"}, {"query": "What are the names of ships that are commanded by both captains with the rank of Midshipman and captains with the rank of Lieutenant?", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'"}, {"query": "What is id of the city that hosted events in the most recent year?", "sql": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1"}, {"query": "Find the city that hosted some events in the most recent year. What is the id of this city?", "sql": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1"}, {"query": "Find the match ids of the cities that hosted competition \"1994 FIFA World Cup qualification\"?", "sql": "SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\""}, {"query": "What is the match id of the competition called \"1994 FIFA World Cup qualification\"?", "sql": "SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\""}, {"query": "Find the cities which were once a host city after 2010?", "sql": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010"}, {"query": "Which cities served as a host city after 2010?", "sql": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010"}, {"query": "Which city has hosted the most events?", "sql": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the city that hosted the most events.", "sql": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing ( Jiangsu )\"?", "sql": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\""}, {"query": "Find the venue of the competition \"1994 FIFA World Cup qualification\" which was hosted by \"Nanjing ( Jiangsu )\".", "sql": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\""}, {"query": "Give me the temperature of Shanghai in January.", "sql": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\""}, {"query": "What is the temperature of \"Shanghai\" city in January?", "sql": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\""}, {"query": "What is the host year of city \"Taizhou ( Zhejiang )\"?", "sql": "SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city WHERE T1.city  =  \"Taizhou ( Zhejiang )\""}, {"query": "IN which year did city \"Taizhou ( Zhejiang )\" serve as a host city?", "sql": "SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city WHERE T1.city  =  \"Taizhou ( Zhejiang )\""}, {"query": "Which three cities have the largest regional population?", "sql": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3"}, {"query": "What are the three largest cities in terms of regional population?", "sql": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3"}, {"query": "Which city has the lowest GDP? Please list the city name and its GDP.", "sql": "SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1"}, {"query": "What is the city with the smallest GDP? Return the city and its GDP.", "sql": "SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1"}, {"query": "Which city has the highest temperature in February?", "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1"}, {"query": "In February, which city marks the highest temperature?", "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1"}, {"query": "Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?", "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct"}, {"query": "Which cities' temperature in March is lower than that in July or higher than that in Oct?", "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct"}, {"query": "Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities?", "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city"}, {"query": "Which cities have lower temperature in March than in July and have been once host cities?", "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city"}, {"query": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.", "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city"}, {"query": "Which cities have lower temperature in March than in Dec and have never served as host cities?", "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city"}, {"query": "Give me a list of cities whose temperature in Feb is higher than that in Jun or cities that were once host cities?", "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city"}, {"query": "Which cities have higher temperature in Feb than in Jun or have once served as host cities?", "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city"}, {"query": "Please give me a list of cities whose regional population is over 10000000.", "sql": "SELECT city FROM city WHERE regional_population  >  10000000"}, {"query": "Which cities have regional population above 10000000?", "sql": "SELECT city FROM city WHERE regional_population  >  10000000"}, {"query": "Please give me a list of cities whose regional population is over 8000000 or under 5000000.", "sql": "SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000"}, {"query": "Which cities have regional population above 8000000 or below 5000000?", "sql": "SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000"}, {"query": "Find the number of matches in different competitions.", "sql": "SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition"}, {"query": "For each competition, count the number of matches.", "sql": "SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition"}, {"query": "List venues of all matches in the order of their dates starting from the most recent one.", "sql": "SELECT venue FROM MATCH ORDER BY date DESC"}, {"query": "What are the venues of all the matches? Sort them in the descending order of match date.", "sql": "SELECT venue FROM MATCH ORDER BY date DESC"}, {"query": "what is the GDP of the city with the largest population.", "sql": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1"}, {"query": "Find the GDP of the city with the largest regional population.", "sql": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1"}, {"query": "What are the GDP and population of the city that already served as a host more than once?", "sql": "SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1"}, {"query": "Which cities have served as host cities more than once? Return me their GDP and population.", "sql": "SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1"}, {"query": "List every individual's first name, middle name and last name in alphabetical order by last name.", "sql": "SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name"}, {"query": "What are the first, middle, and last names of all individuals, ordered by last name?", "sql": "SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name"}, {"query": "List all the types of forms.", "sql": "SELECT DISTINCT form_type_code FROM forms"}, {"query": "What are the different types of forms?", "sql": "SELECT DISTINCT form_type_code FROM forms"}, {"query": "Find the name of the most popular party form.", "sql": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name of the party form that is most common?", "sql": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the payment method and phone of the party with email \"enrico09@example.com\".", "sql": "SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  \"enrico09@example.com\""}, {"query": "What is the payment method code and party phone of the party with the email 'enrico09@example.com'?", "sql": "SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  \"enrico09@example.com\""}, {"query": "Find the emails of parties with the most popular party form.", "sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)"}, {"query": "What are the party emails associated with parties that used the party form that is the most common?", "sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)"}, {"query": "List all the name of organizations in order of the date formed.", "sql": "SELECT organization_name FROM organizations ORDER BY date_formed ASC"}, {"query": "What are the names of organizations, ordered by the date they were formed, ascending?", "sql": "SELECT organization_name FROM organizations ORDER BY date_formed ASC"}, {"query": "Find the name of the youngest organization.", "sql": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1"}, {"query": "What is the name of the organization that was formed most recently?", "sql": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1"}, {"query": "Find the last name of the latest contact individual of the organization \"Labour Party\".", "sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1"}, {"query": "What is the last name of the contact individual from the Labour party organization who was contacted most recently?", "sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1"}, {"query": "Find the last name of the first ever contact person of the organization with the highest UK Vat number.", "sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1"}, {"query": "What is the last name of the first individual contacted from the organization with the maximum UK Vat number across all organizations?", "sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1"}, {"query": "How many services are there?", "sql": "SELECT count(*) FROM services"}, {"query": "Count the number of services.", "sql": "SELECT count(*) FROM services"}, {"query": "Find name of the services that has never been used.", "sql": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id"}, {"query": "What are the names of the services that have never been used?", "sql": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id"}, {"query": "Find the name of all the cities and states.", "sql": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses"}, {"query": "What are the names of all cities and states?", "sql": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses"}, {"query": "How many cities are there in state \"Colorado\"?", "sql": "SELECT count(*) FROM addresses WHERE state_province_county  =  \"Colorado\""}, {"query": "Count the number of cities in the state of Colorado.", "sql": "SELECT count(*) FROM addresses WHERE state_province_county  =  \"Colorado\""}, {"query": "Find the payment method code used by more than 3 parties.", "sql": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3"}, {"query": "What are the payment method codes that have been used by more than 3 parties?", "sql": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3"}, {"query": "Find the name of organizations whose names contain \"Party\".", "sql": "SELECT organization_name FROM organizations WHERE organization_name LIKE \"%Party%\""}, {"query": "What are the names of organizations that contain the word \"Party\"?", "sql": "SELECT organization_name FROM organizations WHERE organization_name LIKE \"%Party%\""}, {"query": "How many distinct payment methods are used by parties?", "sql": "SELECT count(DISTINCT payment_method_code) FROM parties"}, {"query": "Count the number of different payment method codes used by parties.", "sql": "SELECT count(DISTINCT payment_method_code) FROM parties"}, {"query": "Which is the email of the party that has used the services the most number of times?", "sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the party email that has used party services the greatest number of times.", "sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which state can address \"6862 Kaitlyn Knolls\" possibly be in?", "sql": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\""}, {"query": "Give the state corresponding to the line number building \"6862 Kaitlyn Knolls\".", "sql": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\""}, {"query": "What is the name of organization that has the greatest number of contact individuals?", "sql": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the name of the organization which has the most contact individuals.", "sql": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the last name of the individuals that have been contact individuals of an organization.", "sql": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id"}, {"query": "What are the last names of individuals who have been contact individuals for an organization?", "sql": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id"}, {"query": "How many drivers are there?", "sql": "SELECT count(*) FROM driver"}, {"query": "Show the name, home city, and age for all drivers.", "sql": "SELECT name ,  home_city ,  age FROM driver"}, {"query": "Show the party and the number of drivers in each party.", "sql": "SELECT party ,  count(*) FROM driver GROUP BY party"}, {"query": "Show the name of drivers in descending order of age.", "sql": "SELECT name FROM driver ORDER BY age DESC"}, {"query": "Show all different home cities.", "sql": "SELECT DISTINCT home_city FROM driver"}, {"query": "Show the home city with the most number of drivers.", "sql": "SELECT home_city FROM driver GROUP BY home_city ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show the party with drivers from Hartford and drivers older than 40.", "sql": "SELECT party FROM driver WHERE home_city  =  'Hartford' AND age  >  40"}, {"query": "Show home city where at least two drivers older than 40 are from.", "sql": "SELECT home_city FROM driver WHERE age  >  40 GROUP BY home_city HAVING count(*)  >=  2"}, {"query": "Show all home cities except for those having a driver older than 40.", "sql": "SELECT home_city FROM driver EXCEPT SELECT home_city FROM driver WHERE age  >  40"}, {"query": "Show the names of the drivers without a school bus.", "sql": "SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)"}, {"query": "Show the types of schools that have two schools.", "sql": "SELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2"}, {"query": "Show the school name and driver name for all school buses.", "sql": "SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id"}, {"query": "What is the maximum, minimum and average years spent working on a school bus?", "sql": "SELECT max(years_working) ,  min(years_working) ,  avg(years_working) FROM school_bus"}, {"query": "Show the school name and type for schools without a school bus.", "sql": "SELECT school ,  TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)"}, {"query": "Show the type of school and the number of buses for each type.", "sql": "SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type"}, {"query": "How many drivers are from Hartford city or younger than 40?", "sql": "SELECT count(*) FROM driver WHERE home_city  =  'Hartford' OR age  <  40"}, {"query": "List names for drivers from Hartford city and younger than 40.", "sql": "SELECT name FROM driver WHERE home_city  =  'Hartford' AND age  <  40"}, {"query": "find the name of driver who is driving the school bus with the longest working history.", "sql": "SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id  =  t2.driver_id ORDER BY years_working DESC LIMIT 1"}, {"query": "How many flights have a velocity larger than 200?", "sql": "SELECT count(*) FROM flight WHERE velocity  >  200"}, {"query": "List the vehicle flight number, date and pilot of all the flights, ordered by altitude.", "sql": "SELECT vehicle_flight_number ,  date ,  pilot FROM flight ORDER BY altitude ASC"}, {"query": "List the id, country, city and name of the airports ordered alphabetically by the name.", "sql": "SELECT id ,  country ,  city ,  name FROM airport ORDER BY name"}, {"query": "What is maximum group equity shareholding of the companies?", "sql": "SELECT max(group_equity_shareholding) FROM operate_company"}, {"query": "What is the velocity of the pilot named 'Thompson'?", "sql": "SELECT avg(velocity) FROM flight WHERE pilot  =  'Thompson'"}, {"query": "What are the names and types of the companies that have ever operated a flight?", "sql": "SELECT T1.name ,  T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id"}, {"query": "What are the names of the airports which are not in the country 'Iceland'?", "sql": "SELECT name FROM airport WHERE country != 'Iceland'"}, {"query": "What are the distinct types of the companies that have operated any flights with velocity less than 200?", "sql": "SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T2.velocity  <  200"}, {"query": "What are the ids and names of the companies that operated more than one flight?", "sql": "SELECT T1.id ,  T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id GROUP BY T1.id HAVING count(*)  >  1"}, {"query": "What is the id, name and IATA code of the airport that had most number of flights?", "sql": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?", "sql": "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'"}, {"query": "What is the most common company type, and how many are there?", "sql": "SELECT TYPE ,  count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"}, {"query": "How many airports haven't the pilot 'Thompson' driven an aircraft?", "sql": "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' );"}, {"query": "List the name of the pilots who have flied for both a company that mainly provide 'Cargo' services and a company that runs 'Catering services' activities.", "sql": "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Catering services'"}, {"query": "Which of the airport names contains the word 'international'?", "sql": "SELECT name FROM airport WHERE name LIKE '%international%'"}, {"query": "How many companies operates airlines in each airport?", "sql": "SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id"}, {"query": "how many airports are there in each country?", "sql": "SELECT count(*) ,  country FROM airport GROUP BY country"}, {"query": "which countries have more than 2 airports?", "sql": "SELECT country FROM airport GROUP BY country HAVING count(*)  >  2"}, {"query": "which pilot is in charge of the most number of flights?", "sql": "SELECT pilot FROM flight GROUP BY pilot ORDER BY count(*) DESC LIMIT 1"}, {"query": "How many accounts do we have?", "sql": "SELECT count(*) FROM Accounts"}, {"query": "Count the number of accounts.", "sql": "SELECT count(*) FROM Accounts"}, {"query": "Show all account ids and account details.", "sql": "SELECT account_id ,  account_details FROM Accounts"}, {"query": "What are the ids and details of all accounts?", "sql": "SELECT account_id ,  account_details FROM Accounts"}, {"query": "How many statements do we have?", "sql": "SELECT count(*) FROM Statements"}, {"query": "Count the number of statements.", "sql": "SELECT count(*) FROM Statements"}, {"query": "List all statement ids and statement details.", "sql": "SELECT STATEMENT_ID ,  statement_details FROM Statements"}, {"query": "What are the ids and details of all statements?", "sql": "SELECT STATEMENT_ID ,  statement_details FROM Statements"}, {"query": "Show statement id, statement detail, account detail for accounts.", "sql": "SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id"}, {"query": "What are the statement ids, statement details, and account details, for all accounts?", "sql": "SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id"}, {"query": "Show all statement id and the number of accounts for each statement.", "sql": "SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID"}, {"query": "What are the different statement ids on accounts, and the number of accounts for each?", "sql": "SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID"}, {"query": "Show the statement id and the statement detail for the statement with most number of accounts.", "sql": "SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the statement id and statement detail for the statement that has the most corresponding accounts?", "sql": "SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show the number of documents.", "sql": "SELECT count(*) FROM Documents"}, {"query": "Count the number of documents.", "sql": "SELECT count(*) FROM Documents"}, {"query": "List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'.", "sql": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'"}, {"query": "What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?", "sql": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'"}, {"query": "Show the ids and names of all documents.", "sql": "SELECT document_id ,  document_name FROM Documents"}, {"query": "What are the ids and names for each of the documents?", "sql": "SELECT document_id ,  document_name FROM Documents"}, {"query": "Find names and ids of all documents with document type code BK.", "sql": "SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\""}, {"query": "What are the names and ids of documents that have the type code BK?", "sql": "SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\""}, {"query": "How many documents are with document type code BK for each product id?", "sql": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id"}, {"query": "Count the number of documents with the type code BK that correspond to each product id.", "sql": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id"}, {"query": "Show the document name and the document date for all documents on project with details 'Graph Database project'.", "sql": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'"}, {"query": "What are the names and dates for documents corresponding to project that has the details 'Graph Database project'?", "sql": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'"}, {"query": "Show project ids and the number of documents in each project.", "sql": "SELECT project_id ,  count(*) FROM Documents GROUP BY project_id"}, {"query": "How many documents correspond with each project id?", "sql": "SELECT project_id ,  count(*) FROM Documents GROUP BY project_id"}, {"query": "What is the id of the project with least number of documents?", "sql": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1"}, {"query": "Return the id of the project that has the fewest corresponding documents.", "sql": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1"}, {"query": "Show the ids for projects with at least 2 documents.", "sql": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2"}, {"query": "What are project ids of projects that have 2 or more corresponding documents?", "sql": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2"}, {"query": "List document type codes and the number of documents in each code.", "sql": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code"}, {"query": "How many documents are there of each type?", "sql": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code"}, {"query": "What is the document type code with most number of documents?", "sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the code of the document type that is most common.", "sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show the document type code with fewer than 3 documents.", "sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3"}, {"query": "What are the codes corresponding to document types for which there are less than 3 documents?", "sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3"}, {"query": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.", "sql": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'"}, {"query": "What are the details for statements with the details 'Private Project', and what are the names of the corresponding documents?", "sql": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'"}, {"query": "Show all document type codes, document type names, document type descriptions.", "sql": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types"}, {"query": "What are the codes, names, and descriptions of the different document types?", "sql": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types"}, {"query": "What is the document type description for document type named Film?", "sql": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  \"Film\""}, {"query": "Return the description of the document type name 'Film'.", "sql": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  \"Film\""}, {"query": "What is the document type name and the document type description and creation date for all the documents?", "sql": "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code"}, {"query": "Return the type name, type description, and date of creation for each document.", "sql": "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code"}, {"query": "Show the number of projects.", "sql": "SELECT count(*) FROM Projects"}, {"query": "How many projects are there?", "sql": "SELECT count(*) FROM Projects"}, {"query": "List ids and details for all projects.", "sql": "SELECT project_id ,  project_details FROM Projects"}, {"query": "What are the ids and details for each project?", "sql": "SELECT project_id ,  project_details FROM Projects"}, {"query": "What is the project id and detail for the project with at least two documents?", "sql": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2"}, {"query": "Return the ids and details corresponding to projects for which there are more than two documents.", "sql": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2"}, {"query": "What is the project detail for the project with document \"King Book\"?", "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\""}, {"query": "Give the details of the project with the document name 'King Book'.", "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\""}, {"query": "How many budget types do we have?", "sql": "SELECT count(*) FROM Ref_budget_codes"}, {"query": "Count the number of budget codes.", "sql": "SELECT count(*) FROM Ref_budget_codes"}, {"query": "List all budget type codes and descriptions.", "sql": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes"}, {"query": "What are the type codes and descriptions of each budget type?", "sql": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes"}, {"query": "What is the description for the budget type with code ORG?", "sql": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\""}, {"query": "Return the description of the budget type that has the code ORG.", "sql": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\""}, {"query": "How many documents have expenses?", "sql": "SELECT count(*) FROM Documents_with_expenses"}, {"query": "Count the number of documents with expenses.", "sql": "SELECT count(*) FROM Documents_with_expenses"}, {"query": "What are the document ids for the budget type code 'SF'?", "sql": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'"}, {"query": "Give the ids of documents with expenses that have the budget code 'SF'.", "sql": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'"}, {"query": "Show the budget type code and description and the corresponding document id.", "sql": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code"}, {"query": "Return the budget type codes, budget type descriptions and document ids for documents with expenses.", "sql": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code"}, {"query": "Show ids for all documents with budget types described as 'Government'.", "sql": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\""}, {"query": "Give the ids for documents that have the budget description 'Government'.", "sql": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\""}, {"query": "Show budget type codes and the number of documents in each budget type.", "sql": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code"}, {"query": "What are the different budget type codes, and how many documents are there for each?", "sql": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code"}, {"query": "What is the budget type code with most number of documents.", "sql": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Give the budget type code that is most common among documents with expenses.", "sql": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the ids of documents which don't have expense budgets?", "sql": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses"}, {"query": "Return the ids of documents that do not have expenses.", "sql": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses"}, {"query": "Show ids for all documents in type CV without expense budgets.", "sql": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses"}, {"query": "What are the ids of documents with the type code CV that do not have expenses.", "sql": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses"}, {"query": "What are the ids of documents with letter 's' in the name with any expense budgets.", "sql": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'"}, {"query": "Give the ids of documents that have expenses and contain the letter s in their names.", "sql": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'"}, {"query": "How many documents do not have any expense?", "sql": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )"}, {"query": "Count the number of documents that do not have expenses.", "sql": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )"}, {"query": "What are the dates for the documents with both 'GV' type and 'SF' type expenses?", "sql": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'"}, {"query": "Give the dates of creation for documents that have both budget type codes 'GV' and 'SF'.", "sql": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'"}, {"query": "What are the account details with the largest value or with value having char '5' in it?", "sql": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\""}, {"query": "Return the account details with the greatest value, as well as those that include the character 5.", "sql": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\""}, {"query": "Find the total number of scientists.", "sql": "SELECT count(*) FROM scientists"}, {"query": "How many scientists are there?", "sql": "SELECT count(*) FROM scientists"}, {"query": "Find the total hours of all projects.", "sql": "SELECT sum(hours) FROM projects"}, {"query": "What is the total number of hours for all projects?", "sql": "SELECT sum(hours) FROM projects"}, {"query": "How many different scientists are assigned to any project?", "sql": "SELECT count(DISTINCT scientist) FROM assignedto"}, {"query": "Count the number of different scientists assigned to any project.", "sql": "SELECT count(DISTINCT scientist) FROM assignedto"}, {"query": "Find the number of distinct projects.", "sql": "SELECT count(DISTINCT name) FROM projects"}, {"query": "How many different projects are there?", "sql": "SELECT count(DISTINCT name) FROM projects"}, {"query": "Find the average hours of all projects.", "sql": "SELECT avg(hours) FROM projects"}, {"query": "What is the average hours across all projects?", "sql": "SELECT avg(hours) FROM projects"}, {"query": "Find the name of project that continues for the longest time.", "sql": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1"}, {"query": "What is the name of the project with the most hours?", "sql": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1"}, {"query": "List the name of all projects that are operated longer than the average working hours of all projects.", "sql": "SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)"}, {"query": "What are the names of projects that have taken longer than the average number of hours for all projects?", "sql": "SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)"}, {"query": "Find the name and hours of project that has the most number of scientists.", "sql": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name and hours for the project which has the most scientists assigned to it?", "sql": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the name of the project for which a scientist whose name contains \u2018Smith\u2019 is assigned to.", "sql": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'"}, {"query": "What is the name of the project that has a scientist assigned to it whose name contains 'Smith'?", "sql": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'"}, {"query": "Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to.", "sql": "SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  'Michael Rogers' OR T3.name  =  'Carol Smith'"}, {"query": "What is the sum of hours for projects that scientists with the name Michael Rogers or Carol Smith are assigned to?", "sql": "SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  'Michael Rogers' OR T3.name  =  'Carol Smith'"}, {"query": "Find the name of projects that require between 100 and 300 hours of work.", "sql": "SELECT name FROM projects WHERE hours BETWEEN 100 AND 300"}, {"query": "What are the names of projects that require between 100 and 300 hours?", "sql": "SELECT name FROM projects WHERE hours BETWEEN 100 AND 300"}, {"query": "Find the name of the scientist who worked on both a project named 'Matter of Time' and a project named 'A Puzzling Parallax'.", "sql": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax'"}, {"query": "What are the names of any scientists who worked on projects named 'Matter of Time' and 'A Puzzling Pattern'?", "sql": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax'"}, {"query": "List the names of all scientists sorted in alphabetical order.", "sql": "SELECT name FROM scientists ORDER BY name"}, {"query": "What are the names of all the scientists in alphabetical order?", "sql": "SELECT name FROM scientists ORDER BY name"}, {"query": "Find the number of scientists involved for each project name.", "sql": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name"}, {"query": "What are the naems of all the projects, and how many scientists were assigned to each of them?", "sql": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name"}, {"query": "Find the number of scientists involved for the projects that require more than 300 hours.", "sql": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name"}, {"query": "What are the names of projects that require more than 300 hours, and how many scientists are assigned to each?", "sql": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name"}, {"query": "Find the number of projects which each scientist is working on and scientist's name.", "sql": "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name"}, {"query": "What are the names of the scientists, and how many projects are each of them working on?", "sql": "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name"}, {"query": "Find the SSN and name of scientists who are assigned to the project with the longest hours.", "sql": "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)"}, {"query": "What are the SSN and names of scientists working on the project with the most hours?", "sql": "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)"}, {"query": "Find the name of scientists who are assigned to some project.", "sql": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn"}, {"query": "What are the names of scientists who are assigned to any project?", "sql": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn"}, {"query": "Select the project names which are not assigned yet.", "sql": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)"}, {"query": "What are the names of projects that have not been assigned?", "sql": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)"}, {"query": "Find the name of scientists who are not assigned to any project.", "sql": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)"}, {"query": "What are the names of scientists who have not been assigned a project?", "sql": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)"}, {"query": "Find the number of scientists who are not assigned to any project.", "sql": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)"}, {"query": "How many scientists do not have any projects assigned to them?", "sql": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)"}, {"query": "Find the names of scientists who are not working on the project with the highest hours.", "sql": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)"}, {"query": "What are the names of scientists who are not working on the project with the most hours?", "sql": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)"}, {"query": "List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name.", "sql": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name"}, {"query": "What are the names of each scientist, the names of the projects that they work on, and the hours for each of those projects, listed in alphabetical order by project name, then scientist name.", "sql": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name"}, {"query": "Find name of the project that needs the least amount of time to finish and the name of scientists who worked on it.", "sql": "SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)"}, {"query": "What is the name of the project that requires the fewest number of hours, and the names of the scientists assigned to it?", "sql": "SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)"}, {"query": "What is the name of the highest rated wine?", "sql": "SELECT Name FROM WINE ORDER BY Score LIMIT 1"}, {"query": "Give the name of the wine with the highest score.", "sql": "SELECT Name FROM WINE ORDER BY Score LIMIT 1"}, {"query": "Which winery is the wine that has the highest score from?", "sql": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1"}, {"query": "What is the winery at which the wine with the highest score was made?", "sql": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1"}, {"query": "Find the names of all wines produced in 2008.", "sql": "SELECT Name FROM WINE WHERE YEAR  =  \"2008\""}, {"query": "What are the names of all wines produced in 2008?", "sql": "SELECT Name FROM WINE WHERE YEAR  =  \"2008\""}, {"query": "List the grapes and appelations of all wines.", "sql": "SELECT Grape ,  Appelation FROM WINE"}, {"query": "What are the grapes and appelations of each wine?", "sql": "SELECT Grape ,  Appelation FROM WINE"}, {"query": "List the names and scores of all wines.", "sql": "SELECT Name ,  Score FROM WINE"}, {"query": "What are the names and scores of all wines?", "sql": "SELECT Name ,  Score FROM WINE"}, {"query": "List the area and county of all appelations.", "sql": "SELECT Area ,  County FROM APPELLATIONS"}, {"query": "What are the areas and counties for all appelations?", "sql": "SELECT Area ,  County FROM APPELLATIONS"}, {"query": "What are the prices of wines produced before the year of 2010?", "sql": "SELECT Price FROM WINE WHERE YEAR  <  2010"}, {"query": "Return the prices of wines produced before 2010.", "sql": "SELECT Price FROM WINE WHERE YEAR  <  2010"}, {"query": "List the names of all distinct wines that have scores higher than 90.", "sql": "SELECT Name FROM WINE WHERE score  >  90"}, {"query": "What are the names of wines with scores higher than 90?", "sql": "SELECT Name FROM WINE WHERE score  >  90"}, {"query": "List the names of all distinct wines that are made of red color grape.", "sql": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\""}, {"query": "What are the names of wines made from red grapes?", "sql": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\""}, {"query": "Find the names of all distinct wines that have appellations in North Coast area.", "sql": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"North Coast\""}, {"query": "What are the distinct names of wines that have appellations in the North Coast area?", "sql": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"North Coast\""}, {"query": "How many wines are produced at Robert Biale winery?", "sql": "SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\""}, {"query": "Count the number of wines produced at Robert Biale winery.", "sql": "SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\""}, {"query": "How many appelations are in Napa Country?", "sql": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\""}, {"query": "Count the number of appelations in Napa County.", "sql": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\""}, {"query": "Give me the average prices of wines that are produced by appelations in Sonoma County.", "sql": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\""}, {"query": "What is the average price of wines produced in appelations in Sonoma County?", "sql": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\""}, {"query": "What are the names and scores of wines that are made of white color grapes?", "sql": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\""}, {"query": "Give the names and scores of wines made from white grapes.", "sql": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\""}, {"query": "Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005.", "sql": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005"}, {"query": "What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005?", "sql": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005"}, {"query": "Find the the grape whose white color grapes are used to produce wines with scores higher than 90.", "sql": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90"}, {"query": "Find the white grape used to produce wines with scores above 90.", "sql": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90"}, {"query": "What are the wines that have prices higher than 50 and made of Red color grapes?", "sql": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50"}, {"query": "What are the names of wines made from red grapes and with prices above 50?", "sql": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50"}, {"query": "What are the wines that have prices lower than 50 and have appelations in Monterey county?", "sql": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50"}, {"query": "Give the neames of wines with prices below 50 and with appelations in Monterey county.", "sql": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50"}, {"query": "What are the numbers of wines for different grapes?", "sql": "SELECT count(*) ,  Grape FROM WINE GROUP BY Grape"}, {"query": "How many wines are there for each grape?", "sql": "SELECT count(*) ,  Grape FROM WINE GROUP BY Grape"}, {"query": "What are the average prices of wines for different years?", "sql": "SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR"}, {"query": "What is the average prices of wines for each each?", "sql": "SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR"}, {"query": "Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.", "sql": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")"}, {"query": "What are the distinct names of wines with prices higher than any wine from John Anthony winery.", "sql": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")"}, {"query": "List the names of all distinct wines in alphabetical order.", "sql": "SELECT DISTINCT Name FROM WINE ORDER BY Name"}, {"query": "What are the names of wines, sorted in alphabetical order?", "sql": "SELECT DISTINCT Name FROM WINE ORDER BY Name"}, {"query": "List the names of all distinct wines ordered by price.", "sql": "SELECT DISTINCT Name FROM WINE ORDER BY price"}, {"query": "What are the names of wines, sorted by price ascending?", "sql": "SELECT DISTINCT Name FROM WINE ORDER BY price"}, {"query": "What is the area of the appelation that produces the highest number of wines before the year of 2010?", "sql": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the area for the appelation which produced the most wines prior to 2010?", "sql": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the color of the grape whose wine products has the highest average price?", "sql": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1"}, {"query": "Give the color of the grape whose wine products have the highest average price?", "sql": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1"}, {"query": "Find the distinct names of wines produced before the year of 2000 or after the year of 2010.", "sql": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010"}, {"query": "Give the distinct names of wines made before 2000 or after 2010.", "sql": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010"}, {"query": "Find the distinct winery of wines having price between 50 and 100.", "sql": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100"}, {"query": "What are the distinct wineries which produce wines costing between 50 and 100?", "sql": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100"}, {"query": "What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?", "sql": "SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\""}, {"query": "Give the average price and case of wines made from Zinfandel grapes in the year 2009.", "sql": "SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\""}, {"query": "What are the maximum price and score of wines produced by St. Helena appelation?", "sql": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\""}, {"query": "Give the maximum price and score for wines produced in the appelation St. Helena.", "sql": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\""}, {"query": "What are the maximum price and score of wines in each year?", "sql": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR"}, {"query": "What are the maximum price and score of wines for each year?", "sql": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR"}, {"query": "What are the average price and score of wines grouped by appelation?", "sql": "SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation"}, {"query": "What are the average price and score of wines for each appelation?", "sql": "SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation"}, {"query": "Find the wineries that have at least four wines.", "sql": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4"}, {"query": "Which wineries produce at least four wines?", "sql": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4"}, {"query": "Find the country of all appelations who have at most three wines.", "sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3"}, {"query": "What are the countries for appelations with at most 3 wines?", "sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3"}, {"query": "What are the names of wines whose production year are before the year of all wines by Brander winery?", "sql": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")"}, {"query": "What are the names of wines produced before any wine from the Brander winery?", "sql": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")"}, {"query": "What are the names of wines that are more expensive then all wines made in the year 2006?", "sql": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)"}, {"query": "Give the names of wines with prices above any wine produced in 2006.", "sql": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)"}, {"query": "Find the top 3 wineries with the greatest number of wines made of white color grapes.", "sql": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3"}, {"query": "Which 3 wineries produce the most wines made from white grapes?", "sql": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3"}, {"query": "List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.", "sql": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR"}, {"query": "What are the grapes, wineries and years for wines with price higher than 100, sorted by year?", "sql": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR"}, {"query": "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.", "sql": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name"}, {"query": "What are the grapes, appelations, and wines with scores above 93, sorted by Name?", "sql": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name"}, {"query": "Find the appelations that produce wines after the year of 2008 but not in Central Coast area.", "sql": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\""}, {"query": "What are the appelations for wines produced after 2008 but not in the Central Coast area?", "sql": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\""}, {"query": "Find the average price of wines that are not produced from Sonoma county.", "sql": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')"}, {"query": "What is the average price for wines not produced in Sonoma county?", "sql": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')"}, {"query": "Find the county where produces the most number of wines with score higher than 90.", "sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the county that produces the most wines scoring higher than 90?", "sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1"}, {"query": "How many train stations are there?", "sql": "SELECT count(*) FROM station"}, {"query": "Show the name, location, and number of platforms for all stations.", "sql": "SELECT name ,  LOCATION ,  number_of_platforms FROM station"}, {"query": "What are all locations of train stations?", "sql": "SELECT DISTINCT LOCATION FROM station"}, {"query": "Show the names and total passengers for all train stations not in London.", "sql": "SELECT name ,  total_passengers FROM station WHERE LOCATION != 'London'"}, {"query": "Show the names and main services for train stations that have the top three total number of passengers.", "sql": "SELECT name ,  main_services FROM station ORDER BY total_passengers DESC LIMIT 3"}, {"query": "What is the average and maximum number of total passengers for train stations in London or Glasgow?", "sql": "SELECT avg(total_passengers) ,  max(total_passengers) FROM station WHERE LOCATION  =  'London' OR LOCATION  =  'Glasgow'"}, {"query": "Show all locations and the total number of platforms and passengers for all train stations in each location.", "sql": "SELECT LOCATION ,  sum(number_of_platforms) ,  sum(total_passengers) FROM station GROUP BY LOCATION"}, {"query": "Show all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers.", "sql": "SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms  >=  15 AND total_passengers  >  25"}, {"query": "Show all locations which don't have a train station with at least 15 platforms.", "sql": "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms  >=  15"}, {"query": "Show the location with most number of train stations.", "sql": "SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show the name, time, and service for all trains.", "sql": "SELECT name ,  TIME ,  service FROM train"}, {"query": "Show the number of trains", "sql": "SELECT count(*) FROM train"}, {"query": "Show the name and service for all trains in order by time.", "sql": "SELECT name ,  service FROM train ORDER BY TIME"}, {"query": "Show the station name and number of trains in each station.", "sql": "SELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id"}, {"query": "show the train name and station name for each train.", "sql": "SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id"}, {"query": "Show all train names and times in stations in London in descending order by train time.", "sql": "SELECT T3.name ,  T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T2.location  =  'London' ORDER BY T3.time DESC"}, {"query": "Show the station name with greatest number of trains.", "sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show the station name with at least two trains.", "sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id HAVING count(*)  >=  2"}, {"query": "Show all locations with only 1 station.", "sql": "SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*)  =  1"}, {"query": "Show station names without any trains.", "sql": "SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)"}, {"query": "What are the names of the stations which serve both \"Ananthapuri Express\" and \"Guruvayur Express\" trains?", "sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"Ananthapuri Express\" INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"Guruvayur Express\""}, {"query": "Find the names of the trains that do not pass any station located in London.", "sql": "SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id  =  T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id  =  T4.station_id WHERE t4.location  =  \"London\")"}, {"query": "List the names and locations of all stations ordered by their yearly entry exit and interchange amounts.", "sql": "SELECT name ,  LOCATION FROM station ORDER BY Annual_entry_exit ,  Annual_interchanges"}, {"query": "List all vehicle id", "sql": "SELECT vehicle_id FROM Vehicles;"}, {"query": "What are the ids of all vehicles?", "sql": "SELECT vehicle_id FROM Vehicles;"}, {"query": "How many vehicle in total?", "sql": "SELECT count(*) FROM Vehicles;"}, {"query": "How many vehicles exist?", "sql": "SELECT count(*) FROM Vehicles;"}, {"query": "Show the detail of vehicle with id 1.", "sql": "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;"}, {"query": "What are the details of the car with id 1?", "sql": "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;"}, {"query": "List the first name middle name and last name of all staff.", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Staff;"}, {"query": "What are the first, middle, and last names of all staff?", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Staff;"}, {"query": "What is the birthday of the staff member with first name as Janessa and last name as Sawayn?", "sql": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"}, {"query": "What is the date of birth for the staff member named Janessa Sawayn?", "sql": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"}, {"query": "When did the staff member with first name as Janessa and last name as Sawayn join the company?", "sql": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"}, {"query": "When did the staff member named Janessa Sawayn join the company?", "sql": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"}, {"query": "When did the staff member with first name as Janessa and last name as Sawayn leave the company?", "sql": "SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"}, {"query": "When did the staff member Janessa Sawayn leave the company?", "sql": "SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"}, {"query": "How many staff have the first name Ludie?", "sql": "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";"}, {"query": "How many employees have a first name of Ludie?", "sql": "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";"}, {"query": "What is the nickname of staff with first name as Janessa and last name as Sawayn?", "sql": "SELECT nickname FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"}, {"query": "What is the nickname of the employee named Janessa Sawayn?", "sql": "SELECT nickname FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"}, {"query": "How many staff in total?", "sql": "SELECT count(*) FROM Staff;"}, {"query": "How many employees are there?", "sql": "SELECT count(*) FROM Staff;"}, {"query": "Which city does staff with first name as Janessa and last name as Sawayn live?", "sql": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"}, {"query": "In what city does Janessa Sawayn live?", "sql": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"}, {"query": "Which country and state does staff with first name as Janessa and last name as Sawayn lived?", "sql": "SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"}, {"query": "In which country and state does Janessa Sawayn live?", "sql": "SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"}, {"query": "How long is the total lesson time took by customer with first name as Rylan and last name as Goodwin?", "sql": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";"}, {"query": "How long is the total lesson time took by the customer named Rylan Goodwin?", "sql": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";"}, {"query": "What is the zip code of staff with first name as Janessa and last name as Sawayn lived?", "sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"}, {"query": "What is the zip code of the hosue of the employee named Janessa Sawayn?", "sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"}, {"query": "How many staff live in state Georgia?", "sql": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";"}, {"query": "How many employees live in Georgia?", "sql": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";"}, {"query": "Find out the first name and last name of staff lived in city Damianfort.", "sql": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";"}, {"query": "What is the first and last name of all employees who live in the city Damianfort?", "sql": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";"}, {"query": "Which city lives most of staffs? List the city name and number of staffs.", "sql": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;"}, {"query": "In which city do the most employees live and how many of them live there?", "sql": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;"}, {"query": "List the states which have between 2 to 4 staffs living there.", "sql": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;"}, {"query": "What are the names of the states that have 2 to 4 employees living there?", "sql": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;"}, {"query": "List the first name and last name of all customers.", "sql": "SELECT first_name ,  last_name FROM Customers;"}, {"query": "What are the first and last names for all customers?", "sql": "SELECT first_name ,  last_name FROM Customers;"}, {"query": "List email address and birthday of customer whose first name as Carole.", "sql": "SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = \"Carole\""}, {"query": "What are the email addresses and date of births for all customers who have a first name of Carole?", "sql": "SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = \"Carole\""}, {"query": "List phone number and email address of customer with more than 2000 outstanding balance.", "sql": "SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;"}, {"query": "What are the phone numbers and email addresses of all customers who have an outstanding balance of more than 2000?", "sql": "SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;"}, {"query": "What is the status code, mobile phone number and email address of customer with last name as Kohler or first name as Marina?", "sql": "SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\""}, {"query": "What is the status code, phone number, and email address of the customer whose last name is Kohler or whose first name is Marina?", "sql": "SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\""}, {"query": "When are the birthdays of customer who are classified as 'Good Customer' status?", "sql": "SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'"}, {"query": "What is the date of birth of every customer whose status code is 'Good Customer'?", "sql": "SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'"}, {"query": "When did customer with first name as Carole and last name as Bernhard became a customer?", "sql": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";"}, {"query": "When did Carole Bernhard first become a customer?", "sql": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";"}, {"query": "How many customers in total?", "sql": "SELECT count(*) FROM Customers;"}, {"query": "How many customers are there?", "sql": "SELECT count(*) FROM Customers;"}, {"query": "List all customer status codes and the number of customers having each status code.", "sql": "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;"}, {"query": "For each customer status code, how many customers are classified that way?", "sql": "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;"}, {"query": "Which customer status code has least number of customers?", "sql": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;"}, {"query": "What is the status code with the least number of customers?", "sql": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;"}, {"query": "How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?", "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";"}, {"query": "How many lessons did the customer Ryan Goodwin complete?", "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";"}, {"query": "What is maximum, minimum and average amount of outstanding of customer?", "sql": "SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;"}, {"query": "What is the maximum, minimum, and average amount of money outsanding for all customers?", "sql": "SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;"}, {"query": "List the first name and last name of customers have the amount of outstanding between 1000 and 3000.", "sql": "SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;"}, {"query": "What are the first and last names of all customers with between 1000 and 3000 dollars outstanding?", "sql": "SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;"}, {"query": "List first name and last name of customers lived in city Lockmanfurt.", "sql": "SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";"}, {"query": "What are the first and last names of all customers who lived in Lockmanfurt?", "sql": "SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";"}, {"query": "Which country does customer with first name as Carole and last name as Bernhard lived in?", "sql": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\""}, {"query": "What is the country in which the customer Carole Bernhard lived?", "sql": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\""}, {"query": "What is zip code of customer with first name as Carole and last name as Bernhard?", "sql": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\""}, {"query": "What is the zip code of the customer Carole Bernhard?", "sql": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\""}, {"query": "Which city does has most number of customers?", "sql": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;"}, {"query": "What is the city with the most customers?", "sql": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;"}, {"query": "How much in total does customer with first name as Carole and last name as Bernhard paid?", "sql": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\""}, {"query": "What is the total amount of moeny paid by the customer Carole Bernhard?", "sql": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\""}, {"query": "List the number of customers that did not have any payment history.", "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );"}, {"query": "How many customers have no payment histories?", "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );"}, {"query": "List first name and last name of customers that have more than 2 payments.", "sql": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;"}, {"query": "What are the first and last names of all customers with more than 2 payments?", "sql": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;"}, {"query": "List all payment methods and number of payments using each payment methods.", "sql": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;"}, {"query": "For each payment method, how many payments were made?", "sql": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;"}, {"query": "How many lessons were in cancelled state?", "sql": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";"}, {"query": "How many lessons have been cancelled?", "sql": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";"}, {"query": "List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'.", "sql": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";"}, {"query": "What are the the lesson ids of all staff taught by Janessa Sawayn whose nickname has the letter s?", "sql": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";"}, {"query": "How many lessons taught by staff whose first name has letter 'a' in it?", "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\""}, {"query": "How many lessons were taught by a staff member whose first name has the letter 'a' in it?", "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\""}, {"query": "How long is the total lesson time taught by staff with first name as Janessa and last name as Sawayn?", "sql": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"}, {"query": "What is the total time for all lessons taught by Janessa Sawayn?", "sql": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"}, {"query": "What is average lesson price taught by staff with first name as Janessa and last name as Sawayn?", "sql": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"}, {"query": "What is the average price for a lesson taught by Janessa Sawayn?", "sql": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"}, {"query": "How many lesson does customer with first name Ray took?", "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\""}, {"query": "How many lessons did the customer with the first name Ray take?", "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\""}, {"query": "Which last names are both used by customers and by staff?", "sql": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff"}, {"query": "What are the last names that are used by customers and staff?", "sql": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff"}, {"query": "What is the first name of the staff who did not give any lesson?", "sql": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id"}, {"query": "What is the first name of all employees who do not give any lessons?", "sql": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id"}, {"query": "What is the id and detail of the vehicle used in lessons for most of the times?", "sql": "SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "How many faculty do we have?", "sql": "SELECT count(*) FROM Faculty"}, {"query": "What is the total number of faculty members?", "sql": "SELECT count(*) FROM Faculty"}, {"query": "What ranks do we have for faculty?", "sql": "SELECT DISTINCT rank FROM Faculty"}, {"query": "Find the list of distinct ranks for faculty.", "sql": "SELECT DISTINCT rank FROM Faculty"}, {"query": "Show all the distinct buildings that have faculty rooms.", "sql": "SELECT DISTINCT building FROM Faculty"}, {"query": "What buildings have faculty offices?", "sql": "SELECT DISTINCT building FROM Faculty"}, {"query": "Show the rank, first name, and last name for all the faculty.", "sql": "SELECT rank ,  Fname ,  Lname FROM Faculty"}, {"query": "What are the rank, first name, and last name of the faculty members?", "sql": "SELECT rank ,  Fname ,  Lname FROM Faculty"}, {"query": "Show the first name, last name, and phone number for all female faculty members.", "sql": "SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'"}, {"query": "What are the first name, last name, and phone number of all the female faculty members?", "sql": "SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'"}, {"query": "Show ids for all the male faculty.", "sql": "SELECT FacID FROM Faculty WHERE Sex  =  'M'"}, {"query": "What are the faculty ids of all the male faculty members?", "sql": "SELECT FacID FROM Faculty WHERE Sex  =  'M'"}, {"query": "How many female Professors do we have?", "sql": "SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\""}, {"query": "Count the number of female Professors we have.", "sql": "SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\""}, {"query": "Show the phone, room, and building for the faculty named Jerry Prince.", "sql": "SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  \"Jerry\" AND Lname  =  \"Prince\""}, {"query": "What are the phone, room, and building of the faculty member called Jerry Prince?", "sql": "SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  \"Jerry\" AND Lname  =  \"Prince\""}, {"query": "How many Professors are in building NEB?", "sql": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\""}, {"query": "Count the number of Professors who have office in building NEB.", "sql": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\""}, {"query": "Show the first name and last name for all the instructors.", "sql": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\""}, {"query": "What are the first name and last name of all the instructors?", "sql": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\""}, {"query": "Show all the buildings along with the number of faculty members the buildings have.", "sql": "SELECT building ,  count(*) FROM Faculty GROUP BY building"}, {"query": "How many faculty members does each building have? List the result with the name of the building.", "sql": "SELECT building ,  count(*) FROM Faculty GROUP BY building"}, {"query": "Which building has most faculty members?", "sql": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the building that has the largest number of faculty members.", "sql": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show all the buildings that have at least 10 professors.", "sql": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10"}, {"query": "In which buildings are there at least ten professors?", "sql": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10"}, {"query": "For each faculty rank, show the number of faculty members who have it.", "sql": "SELECT rank ,  count(*) FROM Faculty GROUP BY rank"}, {"query": "How many faculty members do we have for each faculty rank?", "sql": "SELECT rank ,  count(*) FROM Faculty GROUP BY rank"}, {"query": "Show all the ranks and the number of male and female faculty for each rank.", "sql": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex"}, {"query": "How many faculty members do we have for each rank and gender?", "sql": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex"}, {"query": "Which rank has the smallest number of faculty members?", "sql": "SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1"}, {"query": "Find the faculty rank that has the least members.", "sql": "SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1"}, {"query": "Show the number of male and female assistant professors.", "sql": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex"}, {"query": "How many male and female assistant professors do we have?", "sql": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex"}, {"query": "What are the first name and last name of Linda Smith's advisor?", "sql": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\""}, {"query": "Who is the advisor of Linda Smith? Give me the first name and last name.", "sql": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\""}, {"query": "Show the ids of students whose advisors are professors.", "sql": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  \"Professor\""}, {"query": "Which students have professors as their advisors? Find their student ids.", "sql": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  \"Professor\""}, {"query": "Show first name and last name for all the students advised by Michael Goodrich.", "sql": "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\""}, {"query": "Which students are advised by Michael Goodrich? Give me their first and last names.", "sql": "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\""}, {"query": "Show the faculty id of each faculty member, along with the number of students he or she advises.", "sql": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID"}, {"query": "What are the faculty id and the number of students each faculty has?", "sql": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID"}, {"query": "Show all the faculty ranks and the number of students advised by each rank.", "sql": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank"}, {"query": "How many students are advised by each rank of faculty? List the rank and the number of students.", "sql": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank"}, {"query": "What are the first and last name of the faculty who has the most students?", "sql": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1"}, {"query": "Give me the the first and last name of the faculty who advises the most students.", "sql": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show the ids for all the faculty members who have at least 2 students.", "sql": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2"}, {"query": "Which faculty members advise two ore more students? Give me their faculty ids.", "sql": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2"}, {"query": "Show ids for the faculty members who don't advise any student.", "sql": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student"}, {"query": "What are the ids of the faculty members who do not advise any student.", "sql": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student"}, {"query": "What activities do we have?", "sql": "SELECT activity_name FROM Activity"}, {"query": "List all the activities we have.", "sql": "SELECT activity_name FROM Activity"}, {"query": "How many activities do we have?", "sql": "SELECT count(*) FROM Activity"}, {"query": "Find the number of activities available.", "sql": "SELECT count(*) FROM Activity"}, {"query": "How many faculty members participate in an activity?", "sql": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in"}, {"query": "Give me the number of faculty members who participate in an activity", "sql": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in"}, {"query": "Show the ids of the faculty who don't participate in any activity.", "sql": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in"}, {"query": "Which faculty do not participate in any activity? Find their faculty ids.", "sql": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in"}, {"query": "Show the ids of all the faculty members who participate in an activity and advise a student.", "sql": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student"}, {"query": "What are ids of the faculty members who not only participate in an activity but also advise a student.", "sql": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student"}, {"query": "How many activities does Mark Giuliano participate in?", "sql": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\""}, {"query": "Find the number of activities Mark Giuliano is involved in.", "sql": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\""}, {"query": "Show the names of all the activities Mark Giuliano participates in.", "sql": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\""}, {"query": "What are the names of the activities Mark Giuliano is involved in", "sql": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\""}, {"query": "Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in.", "sql": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID"}, {"query": "What is the first and last name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in.", "sql": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID"}, {"query": "Show all the activity names and the number of faculty involved in each activity.", "sql": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID"}, {"query": "How many faculty members participate in each activity? Return the activity names and the number of faculty members.", "sql": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID"}, {"query": "What is the first and last name of the faculty participating in the most activities?", "sql": "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the first and last name of the faculty who is involved in the largest number of activities.", "sql": "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name of the activity that has the most faculty members involved in?", "sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which activity has the most faculty members participating in? Find the activity name.", "sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show the ids of the students who don't participate in any activity.", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in"}, {"query": "What are the ids of the students who are not involved in any activity", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in"}, {"query": "Show the ids for all the students who participate in an activity and are under 20.", "sql": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20"}, {"query": "What are the ids of the students who are under 20 years old and are involved in at least one activity.", "sql": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20"}, {"query": "What is the first and last name of the student participating in the most activities?", "sql": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1"}, {"query": "Tell me the first and last name of the student who has the most activities.", "sql": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name of the activity with the most students?", "sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the name of the activity that has the largest number of student participants.", "sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the first names of the faculty members who are playing Canoeing or Kayaking.", "sql": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'"}, {"query": "Which faculty members are playing either Canoeing or Kayaking? Tell me their first names.", "sql": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'"}, {"query": "Find the first names of professors who are not playing Canoeing or Kayaking.", "sql": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'"}, {"query": "What are the first names of the professors who do not play Canoeing or Kayaking as activities?", "sql": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'"}, {"query": "Find the first names of the faculty members who participate in Canoeing and Kayaking.", "sql": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'"}, {"query": "What are the first names of the faculty members playing both Canoeing and Kayaking?", "sql": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'"}, {"query": "Find the ids of the students who participate in Canoeing and Kayaking.", "sql": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'"}, {"query": "Which students participate in both Canoeing and Kayaking as their activities? Tell me their student ids.", "sql": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'"}, {"query": "Find the name of the airport in the city of Goroka.", "sql": "SELECT name FROM airports WHERE city  =  'Goroka'"}, {"query": "What are the names of the airports in the city of Goroka?", "sql": "SELECT name FROM airports WHERE city  =  'Goroka'"}, {"query": "Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.", "sql": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'"}, {"query": "What is the name, city, country, and elevation for every airport in the city of New York?", "sql": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'"}, {"query": "How many airlines are there?", "sql": "SELECT count(*) FROM airlines"}, {"query": "What is the total number of airlines?", "sql": "SELECT count(*) FROM airlines"}, {"query": "How many airlines does Russia has?", "sql": "SELECT count(*) FROM airlines WHERE country  =  'Russia'"}, {"query": "What is the number of airlines based in Russia?", "sql": "SELECT count(*) FROM airlines WHERE country  =  'Russia'"}, {"query": "What is the maximum elevation of all airports in the country of Iceland?", "sql": "SELECT max(elevation) FROM airports WHERE country  =  'Iceland'"}, {"query": "What is the highest elevation of an airport in the country of Iceland?", "sql": "SELECT max(elevation) FROM airports WHERE country  =  'Iceland'"}, {"query": "Find the name of the airports located in Cuba or Argentina.", "sql": "SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina'"}, {"query": "What are the names of all airports in Cuba or Argentina?", "sql": "SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina'"}, {"query": "Find the country of the airlines whose name starts with 'Orbit'.", "sql": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'"}, {"query": "What are the countries of all airlines whose names start with Orbit?", "sql": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'"}, {"query": "Find the name of airports whose altitude is between -50 and 50.", "sql": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50"}, {"query": "What are the names of all airports whose elevation is between -50 and 50?", "sql": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50"}, {"query": "Which country is the airport that has the highest altitude located in?", "sql": "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1"}, {"query": "What is the country of the airport with the highest elevation?", "sql": "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1"}, {"query": "Find the number of airports whose name contain the word 'International'.", "sql": "SELECT count(*) FROM airports WHERE name LIKE '%International%'"}, {"query": "How many airports' names have the word Interanation in them?", "sql": "SELECT count(*) FROM airports WHERE name LIKE '%International%'"}, {"query": "How many different cities do have some airport in the country of Greenland?", "sql": "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'"}, {"query": "In how many cities are there airports in the country of Greenland?", "sql": "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'"}, {"query": "Find the number of routes operated by American Airlines.", "sql": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'"}, {"query": "How many routes does American Airlines operate?", "sql": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'"}, {"query": "Find the number of routes whose destination airports are in Canada.", "sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'"}, {"query": "How many routes end in a Canadian airport?", "sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'"}, {"query": "Find the name, city, and country of the airport that has the lowest altitude.", "sql": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1"}, {"query": "What is the name, city, and country of the airport with the lowest altitude?", "sql": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1"}, {"query": "Find the name, city, and country of the airport that has the highest latitude.", "sql": "SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1"}, {"query": "What is the name, city, and country of the airport with the highest elevation?", "sql": "SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1"}, {"query": "Find the name and city of the airport which is the destination of the most number of routes.", "sql": "SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name and city of the airport that the most routes end at?", "sql": "SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the names of the top 10 airlines that operate the most number of routes.", "sql": "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10"}, {"query": "For the airline ids with the top 10 most routes operated, what are their names?", "sql": "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10"}, {"query": "Find the name and city of the airport which is the source for the most number of flight routes.", "sql": "SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name and city of the airport from most of the routes start?", "sql": "SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the number of different airports which are the destinations of the American Airlines.", "sql": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'"}, {"query": "What is the number of different different airports that are destinations for American Airlines?", "sql": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'"}, {"query": "Which countries has the most number of airlines?", "sql": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name of the country with the most number of home airlines?", "sql": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which countries has the most number of airlines whose active status is 'Y'?", "sql": "SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the countries with the most airlines whose active status is Y?", "sql": "SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1"}, {"query": "List all countries and their number of airlines in the descending order of number of airlines.", "sql": "SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC"}, {"query": "How many airlines operate out of each country in descending order?", "sql": "SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC"}, {"query": "How many airports are there per country? Order the countries by decreasing number of airports.", "sql": "SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC"}, {"query": "What is the number of airports per country, ordered from most to least?", "sql": "SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC"}, {"query": "How many airports are there per city in the United States? Order the cities by decreasing number of airports.", "sql": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC"}, {"query": "How many airports are there per city in the US ordered from most to least?", "sql": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC"}, {"query": "Return the cities with more than 3 airports in the United States.", "sql": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3"}, {"query": "What is the number of cities in the United States with more than 3 airports?", "sql": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3"}, {"query": "How many cities are there that have more than 3 airports?", "sql": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)"}, {"query": "What is the count of cities with more than 3 airports?", "sql": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)"}, {"query": "List the cities which have more than one airport and number of airports.", "sql": "SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1"}, {"query": "What are the names of all cities with more than one airport and how many airports do they have?", "sql": "SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1"}, {"query": "List the cities which have more than 2 airports sorted by the number of airports.", "sql": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)"}, {"query": "What are the cities that have more than 2 airports sorted by number of airports?", "sql": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)"}, {"query": "Find the number of routes for each source airport and the airport name.", "sql": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name"}, {"query": "For each airport name, how many routes start at that airport?", "sql": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name"}, {"query": "Find the number of routes and airport name for each source airport, order the results by decreasing number of routes.", "sql": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC"}, {"query": "For each  airport name, how many routes start at that airport, ordered from most to least?", "sql": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC"}, {"query": "Find the average elevation of all airports for each country.", "sql": "SELECT avg(elevation) ,  country FROM airports GROUP BY country"}, {"query": "For each country, what is the average elevation of that country's airports?", "sql": "SELECT avg(elevation) ,  country FROM airports GROUP BY country"}, {"query": "Find the cities which have exactly two airports.", "sql": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2"}, {"query": "What are the cities with exactly two airports?", "sql": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2"}, {"query": "For each country and airline name, how many routes are there?", "sql": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name"}, {"query": "What is the total number of routes for each country and airline in that country?", "sql": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name"}, {"query": "Find the number of routes with destination airports in Italy.", "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'"}, {"query": "What is the number of routes whose destinations are Italian airports?", "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'"}, {"query": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.", "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'"}, {"query": "What is the number of routes operated by the airline American Airlines whose destinations are in Italy?", "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'"}, {"query": "Find the number of routes that have destination John F Kennedy International Airport.", "sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'"}, {"query": "What is the number of routes that end at John F Kennedy International Airport?", "sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'"}, {"query": "Find the number of routes from the United States to Canada.", "sql": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')"}, {"query": "How many routes go from the United States to Canada?", "sql": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')"}, {"query": "Find the id of routes whose source and destination airports are in the United States.", "sql": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')"}, {"query": "What is the id of the routes whose source and destination airports are in the United States?", "sql": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')"}, {"query": "Find the name of airline which runs the most number of routes.", "sql": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name of the airline with the most routes?", "sql": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the busiest source airport that runs most number of routes in China.", "sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name of the airport with the most number of routes that start in China?", "sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the busiest destination airport that runs most number of routes in China.", "sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name of the airport that is the destination of the most number of routes that start in China?", "sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the id of the most recent order?", "sql": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1"}, {"query": "Find the id of the order made most recently.", "sql": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1"}, {"query": "what are the order id and customer id of the oldest order?", "sql": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1"}, {"query": "Find the order id and customer id associated with the oldest order.", "sql": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1"}, {"query": "Find the id of the order whose shipment tracking number is \"3452\".", "sql": "SELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\""}, {"query": "Which order's shipment tracking number is \"3452\"? Give me the id of the order.", "sql": "SELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\""}, {"query": "Find the ids of all the order items whose product id is 11.", "sql": "SELECT order_item_id FROM order_items WHERE product_id = 11"}, {"query": "Find all the order items whose product id is 11. What are the order item ids?", "sql": "SELECT order_item_id FROM order_items WHERE product_id = 11"}, {"query": "List the name of all the distinct customers who have orders with status \"Packing\".", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\""}, {"query": "Which customers have orders with status \"Packing\"? Give me the customer names.", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\""}, {"query": "Find the details of all the distinct customers who have orders with status \"On Road\".", "sql": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\""}, {"query": "What are the distinct customers who have orders with status \"On Road\"? Give me the customer details?", "sql": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\""}, {"query": "What is the name of the customer who has the most orders?", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which customer made the most orders? Find the customer name.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the customer id of the customer who has the most orders?", "sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the id of the customer who made the most orders.", "sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Give me a list of id and status of orders which belong to the customer named \"Jeramie\".", "sql": "SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\""}, {"query": "Which orders are made by the customer named \"Jeramie\"? Give me the order ids and status.", "sql": "SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\""}, {"query": "Find the dates of orders which belong to the customer named \"Jeramie\".", "sql": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\""}, {"query": "What are the dates of the orders made by the customer named \"Jeramie\"?", "sql": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\""}, {"query": "Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\""}, {"query": "Which customers made orders between 2009-01-01 and 2010-01-01? Find their names.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\""}, {"query": "Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01?", "sql": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\""}, {"query": "What are the distinct ids of products ordered between 1975-01-01 and 1976-01-01??", "sql": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\""}, {"query": "Find the names of the customers who have order status both \"On Road\" and \"Shipped\".", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\""}, {"query": "Which customers have both \"On Road\" and \"Shipped\" as order status? List the customer names.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\""}, {"query": "Find the id of the customers who have order status both \"On Road\" and \"Shipped\".", "sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\""}, {"query": "Which customers have both \"On Road\" and \"Shipped\" as order status? List the customer ids.", "sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\""}, {"query": "When was the order placed whose shipment tracking number is 3452? Give me the date.", "sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452"}, {"query": "On which day was the order placed whose shipment tracking number is 3452?", "sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452"}, {"query": "What is the placement date of the order whose invoice number is 10?", "sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10"}, {"query": "On what day was the order with invoice number 10 placed?", "sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10"}, {"query": "List the count and id of each product in all the orders.", "sql": "SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id"}, {"query": "For each product, return its id and the number of times it was ordered.", "sql": "SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id"}, {"query": "List the name and count of each product in all orders.", "sql": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id"}, {"query": "For each product, show its name and the number of times it was ordered.", "sql": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id"}, {"query": "Find the ids of orders which are shipped after 2000-01-01.", "sql": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\""}, {"query": "Which orders have shipment after 2000-01-01? Give me the order ids.", "sql": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\""}, {"query": "Find the id of the order which is shipped most recently.", "sql": "SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)"}, {"query": "Which order has the most recent shipment? Give me the order id.", "sql": "SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)"}, {"query": "List the names of all distinct products in alphabetical order.", "sql": "SELECT DISTINCT product_name FROM products ORDER BY product_name"}, {"query": "Sort all the distinct products in alphabetical order.", "sql": "SELECT DISTINCT product_name FROM products ORDER BY product_name"}, {"query": "List the ids of all distinct orders ordered by placed date.", "sql": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed"}, {"query": "What are ids of the all distinct orders, sorted by placement date?", "sql": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed"}, {"query": "What is the id of the order which has the most items?", "sql": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which order deals with the most items? Return the order id.", "sql": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name of the customer who has the largest number of orders?", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the name of the customer who made the most orders.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.", "sql": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\""}, {"query": "What are the invoice numbers created before 1989-09-03 or after 2007-12-25?", "sql": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\""}, {"query": "Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.", "sql": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\""}, {"query": "What are the distinct details of invoices created before 1989-09-03 or after 2007-12-25?", "sql": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\""}, {"query": "For each customer who has at least two orders, find the customer name and number of orders made.", "sql": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2"}, {"query": "Which customers have made at least two orders? Give me each customer name and number of orders made.", "sql": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2"}, {"query": "Find the name of the customers who have at most two orders.", "sql": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2"}, {"query": "What are the names of the customers who have made two or less orders?", "sql": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2"}, {"query": "List the names of the customers who have once bought product \"food\".", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1"}, {"query": "What are the names of the customers who bought product \"food\" at least once?", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1"}, {"query": "List the names of customers who have once canceled the purchase of the product \"food\" (the item status is \"Cancel\").", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1"}, {"query": "Which customers have ever canceled the purchase of the product \"food\" (the item status is \"Cancel\")?", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1"}, {"query": "How many architects are female?", "sql": "SELECT count(*) FROM architect WHERE gender  =  'female'"}, {"query": "List the name, nationality and id of all male architects ordered by their names lexicographically.", "sql": "SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name"}, {"query": "What is the maximum length in meters for the bridges and what are the architects' names?", "sql": "SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id"}, {"query": "What is the average length in feet of the bridges?", "sql": "SELECT avg(length_feet) FROM bridge"}, {"query": "What are the names and year of construction for the mills of 'Grondzeiler' type?", "sql": "SELECT name ,  built_year FROM mill WHERE TYPE  =  'Grondzeiler'"}, {"query": "What are the distinct names and nationalities of the architects who have ever built a mill?", "sql": "SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id"}, {"query": "What are the names of the mills which are not located in 'Donceel'?", "sql": "SELECT name FROM mill WHERE LOCATION != 'Donceel'"}, {"query": "What are the distinct types of mills that are built by American or Canadian architects?", "sql": "SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'"}, {"query": "What are the ids and names of the architects who built at least 3 bridges ?", "sql": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3"}, {"query": "What is the id, name and nationality of the architect who built most mills?", "sql": "SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the ids, names and genders of the architects who built two bridges or one mill?", "sql": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1"}, {"query": "What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?", "sql": "SELECT LOCATION FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge'"}, {"query": "Which of the mill names contains the french word 'Moulin'?", "sql": "SELECT name FROM mill WHERE name LIKE '%Moulin%'"}, {"query": "What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?", "sql": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80"}, {"query": "What is the most common mill type, and how many are there?", "sql": "SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"}, {"query": "How many architects haven't built a mill before year 1850?", "sql": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );"}, {"query": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.", "sql": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet"}, {"query": "How many book clubs are there?", "sql": "SELECT count(*) FROM book_club"}, {"query": "Count the number of book clubs.", "sql": "SELECT count(*) FROM book_club"}, {"query": "show the titles, and authors or editors for all books made after the year 1989.", "sql": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989"}, {"query": "What are the titles and authors or editors that correspond to books made after 1989?", "sql": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989"}, {"query": "Show all distinct publishers for books.", "sql": "SELECT DISTINCT publisher FROM book_club"}, {"query": "What are all the different book publishers?", "sql": "SELECT DISTINCT publisher FROM book_club"}, {"query": "Show the years, book titles, and publishers for all books, in descending order by year.", "sql": "SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC"}, {"query": "What are the years, titles, and publishers for all books, ordered by year descending?", "sql": "SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC"}, {"query": "Show all publishers and the number of books for each publisher.", "sql": "SELECT publisher ,  count(*) FROM book_club GROUP BY publisher"}, {"query": "How many books are there for each publisher?", "sql": "SELECT publisher ,  count(*) FROM book_club GROUP BY publisher"}, {"query": "What is the publisher with most number of books?", "sql": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the publisher that has published the most books.", "sql": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show all book categories and the number of books in each category.", "sql": "SELECT category ,  count(*) FROM book_club GROUP BY category"}, {"query": "How many books fall into each category?", "sql": "SELECT category ,  count(*) FROM book_club GROUP BY category"}, {"query": "List categories that have at least two books after year 1989.", "sql": "SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2"}, {"query": "What categories have two or more corresponding books that were made after 1989?", "sql": "SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2"}, {"query": "Show publishers with a book published in 1989 and a book in 1990.", "sql": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990"}, {"query": "What are the publishers who have published a book in both 1989 and 1990?", "sql": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990"}, {"query": "Show all publishers which do not have a book in 1989.", "sql": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989"}, {"query": "Which publishers did not publish a book in 1989?", "sql": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989"}, {"query": "Show all movie titles, years, and directors, ordered by budget.", "sql": "SELECT title ,  YEAR ,  director FROM movie ORDER BY budget_million"}, {"query": "What are the titles, years, and directors of all movies, ordered by budget in millions?", "sql": "SELECT title ,  YEAR ,  director FROM movie ORDER BY budget_million"}, {"query": "How many movie directors are there?", "sql": "SELECT COUNT (DISTINCT director) FROM movie"}, {"query": "Count the number of different directors.", "sql": "SELECT COUNT (DISTINCT director) FROM movie"}, {"query": "What is the title and director for the movie with highest worldwide gross in the year 2000 or before?", "sql": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1"}, {"query": "Return the title and director of the movie released in the year 2000 or earlier that had the highest worldwide gross.", "sql": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1"}, {"query": "Show all director names who have a movie in both year 1999 and 2000.", "sql": "SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999"}, {"query": "Which directors had a movie both in the year 1999 and 2000?", "sql": "SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999"}, {"query": "Show all director names who have a movie in the year 1999 or 2000.", "sql": "SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000"}, {"query": "Which directors had a movie in either 1999 or 2000?", "sql": "SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000"}, {"query": "What is the average, maximum, and minimum budget for all movies before 2000.", "sql": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000"}, {"query": "Return the average, maximum, and minimum budgets in millions for movies made before the year 2000.", "sql": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000"}, {"query": "List all company names with a book published by Alyson.", "sql": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'"}, {"query": "What are all the company names that have a book published by Alyson?", "sql": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'"}, {"query": "Show the movie titles and book titles for all companies in China.", "sql": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'"}, {"query": "What are the titles of movies and books corresponding to companies incorporated in China?", "sql": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'"}, {"query": "Show all company names with a movie directed in year 1999.", "sql": "SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999"}, {"query": "What are all company names that have a corresponding movie directed in the year 1999?", "sql": "SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999"}, {"query": "How many singers do we have?", "sql": "SELECT count(*) FROM singer"}, {"query": "What is the total number of singers?", "sql": "SELECT count(*) FROM singer"}, {"query": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", "sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"}, {"query": "What are the names, countries, and ages for every singer in descending order of age?", "sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"}, {"query": "What is the average, minimum, and maximum age of all singers from France?", "sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"query": "What is the average, minimum, and maximum age for all French singers?", "sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"query": "Show the name and the release year of the song by the youngest singer.", "sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"query": "What are the names and release years for all the songs of the youngest singer?", "sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"query": "What are all distinct countries where singers above age 20 are from?", "sql": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"query": "What are  the different countries with singers above age 20?", "sql": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"query": "Show all countries and the number of singers in each country.", "sql": "SELECT country ,  count(*) FROM singer GROUP BY country"}, {"query": "How many singers are from each country?", "sql": "SELECT country ,  count(*) FROM singer GROUP BY country"}, {"query": "List all song names by singers above the average age.", "sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"}, {"query": "What are all the song names by singers who are older than average?", "sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"}, {"query": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"query": "What are the locations and names of all stations with capacity between 5000 and 10000?", "sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"query": "What is the maximum capacity and the average of all stadiums ?", "sql": "select max(capacity), average from stadium"}, {"query": "What is the average and maximum capacities for all stadiums ?", "sql": "select avg(capacity) ,  max(capacity) from stadium"}, {"query": "What is the name and capacity for the stadium with highest average attendance?", "sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"query": "What is the name and capacity for the stadium with the highest average attendance?", "sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"query": "How many concerts are there in year 2014 or 2015?", "sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015"}, {"query": "How many concerts occurred in 2014 or 2015?", "sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015"}, {"query": "Show the stadium name and the number of concerts in each stadium.", "sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id"}, {"query": "For each stadium, how many concerts play there?", "sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id"}, {"query": "Show the stadium name and capacity with most number of concerts in year 2014 or after.", "sql": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name and capacity of the stadium with the most concerts after 2013 ?", "sql": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1"}, {"query": "Which year has most number of concerts?", "sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the year that had the most concerts?", "sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show the stadium names without any concert.", "sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)"}, {"query": "What are the names of the stadiums without any concerts?", "sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)"}, {"query": "Show countries where a singer above age 40 and a singer below 30 are from.", "sql": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30"}, {"query": "Show names for all stadiums except for stadiums having a concert in year 2014.", "sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014"}, {"query": "What are the names of all stadiums that did not have a concert in 2014?", "sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014"}, {"query": "Show the name and theme for all concerts and the number of singers in each concert.", "sql": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id"}, {"query": "What are the names , themes , and number of singers for every concert ?", "sql": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id"}, {"query": "List singer names and number of concerts for each singer.", "sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"}, {"query": "What are the names of the singers and number of concerts for each person?", "sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"}, {"query": "List all singer names in concerts in year 2014.", "sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"query": "What are the names of the singers who performed in a concert in 2014?", "sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"query": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"query": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"query": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.", "sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015"}, {"query": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?", "sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015"}, {"query": "Find the number of concerts happened in the stadium with the highest capacity .", "sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)"}, {"query": "What are the number of concerts that occurred in the stadium with the largest capacity ?", "sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)"}, {"query": "Find the number of pets whose weight is heavier than 10.", "sql": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"query": "How many pets have a greater weight than 10?", "sql": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"query": "Find the weight of the youngest dog.", "sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"query": "How much does the youngest dog weigh?", "sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"query": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", "sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType"}, {"query": "List the maximum weight and type for each type of pet.", "sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType"}, {"query": "Find number of pets owned by students who are older than 20.", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"query": "How many pets are owned by students that have an age greater than 20?", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"query": "Find the number of dog pets that are raised by female students (with sex F).", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"query": "How many dog pets are raised by female students?", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"query": "Find the number of distinct type of pets.", "sql": "SELECT count(DISTINCT pettype) FROM pets"}, {"query": "How many different types of pet are there?", "sql": "SELECT count(DISTINCT pettype) FROM pets"}, {"query": "Find the first name of students who have cat or dog pet.", "sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"}, {"query": "What are the first names of every student who has a cat or dog as a pet?", "sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"}, {"query": "Find the first name of students who have both cat and dog pets .", "sql": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'"}, {"query": "What are the students' first names who have both cats and dogs as pets?", "sql": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'"}, {"query": "Find the major and age of students who do not have a cat pet.", "sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"}, {"query": "What major is every student who does not own a cat as a pet, and also how old are they?", "sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"}, {"query": "Find the id of students who do not have a cat pet.", "sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"}, {"query": "What are the ids of the students who do not own cats as pets?", "sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"}, {"query": "Find the first name and age of students who have a dog but do not have a cat as a pet.", "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"}, {"query": "What is the first name of every student who has a dog but does not have a cat?", "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"}, {"query": "Find the type and weight of the youngest pet.", "sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"query": "What type of pet is the youngest animal, and how much does it weigh?", "sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"query": "Find the id and weight of all pets whose age is older than 1.", "sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"query": "What is the id and weight of every pet who is older than 1?", "sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"query": "Find the average and maximum age for each type of pet.", "sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype"}, {"query": "What is the average and maximum age for each pet type?", "sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype"}, {"query": "Find the average weight for each pet type.", "sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"}, {"query": "What is the average weight for each type of pet?", "sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"}, {"query": "Find the first name and age of students who have a pet.", "sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"query": "What are the different first names and ages of the students who do have pets?", "sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"query": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.", "sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"}, {"query": "What is the id of the pet owned by the student whose last name is 'Smith'?", "sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"}, {"query": "Find the number of pets for each student who has any pet and student id.", "sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid"}, {"query": "For students who have pets , how many pets does each student have ? list their ids instead of names .", "sql": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid"}, {"query": "Find the first name and gender of student who have more than one pet.", "sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"}, {"query": "What is the first name and gender of the all the students who have more than one pet?", "sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"}, {"query": "Find the last name of the student who has a cat that is age 3.", "sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"query": "What is the last name of the student who has a cat that is 3 years old?", "sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"query": "Find the average age of students who do not have any pet .", "sql": "select avg(age) from student where stuid not in (select stuid from has_pet)"}, {"query": "What is the average age for all students who do not own any pets ?", "sql": "select avg(age) from student where stuid not in (select stuid from has_pet)"}, {"query": "How many continents are there?", "sql": "SELECT count(*) FROM CONTINENTS;"}, {"query": "What is the number of continents?", "sql": "SELECT count(*) FROM CONTINENTS;"}, {"query": "How many countries does each continent have? List the continent id, continent name and the number of countries.", "sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"}, {"query": "For each continent, list its id, name, and how many countries it has?", "sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"}, {"query": "How many countries are listed?", "sql": "SELECT count(*) FROM COUNTRIES;"}, {"query": "How many countries exist?", "sql": "SELECT count(*) FROM COUNTRIES;"}, {"query": "How many models does each car maker produce? List maker full name, id and the number.", "sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"}, {"query": "What is the full name of each car maker, along with its id and how many models it produces?", "sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"}, {"query": "Which model of the car has the minimum horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"}, {"query": "What is the model of the car with the smallest amount of horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"}, {"query": "Find the model of the car whose weight is below the average weight.", "sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"}, {"query": "What is the model for the car with a weight smaller than the average?", "sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"}, {"query": "Find the name of the makers that produced some cars in the year of 1970?", "sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"}, {"query": "What is the name of the different car makers who produced a car in 1970?", "sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"}, {"query": "Find the make and production time of the cars that were produced in the earliest year?", "sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"}, {"query": "What is the maker of the carr produced in the earliest year and what year was it?", "sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"}, {"query": "Which distinct car models are the produced after 1980?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"}, {"query": "What are the different models for the cards produced after 1980?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"}, {"query": "How many car makers are there in each continents? List the continent name and the count.", "sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"}, {"query": "What is the name of each continent and how many car makers are there in each one?", "sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"}, {"query": "Which of the countries has the most car makers? List the country name.", "sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"}, {"query": "What is the name of the country with the most car makers?", "sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"}, {"query": "How many car models are produced by each maker ? Only list the count and the maker full name .", "sql": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;"}, {"query": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?", "sql": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;"}, {"query": "What is the accelerate of the car make amc hornet sportabout (sw)?", "sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"}, {"query": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"}, {"query": "How many car makers are there in france?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"}, {"query": "What is the number of makers of care in France?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"}, {"query": "How many car models are produced in the usa?", "sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"}, {"query": "What is the count of the car models produced in the United States?", "sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"}, {"query": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;"}, {"query": "What is the average miles per gallon of all the cards with 4 cylinders?", "sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;"}, {"query": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"query": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"query": "What are all the makers and models?", "sql": "SELECT Maker ,  Model FROM MODEL_LIST;"}, {"query": "What are the makers and models?", "sql": "SELECT Maker ,  Model FROM MODEL_LIST;"}, {"query": "What are the countries having at least one car maker? List name and id.", "sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;"}, {"query": "What are the names and ids of all countries with at least one car maker?", "sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;"}, {"query": "What is the number of the cars with horsepower more than 150?", "sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;"}, {"query": "What is the number of cars with a horsepower greater than 150?", "sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;"}, {"query": "What is the average weight of cars each year?", "sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"}, {"query": "What is the average weight and year for each year?", "sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"}, {"query": "Which countries in europe have at least 3 car manufacturers?", "sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"}, {"query": "What are the names of all European countries with at least 3 manufacturers?", "sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"}, {"query": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"}, {"query": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"}, {"query": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;"}, {"query": "What is the car model with the highest mpg ?", "sql": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;"}, {"query": "What is the average horsepower of the cars before 1980?", "sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;"}, {"query": "What is the average horsepower for all cars produced before 1980 ?", "sql": "select avg(horsepower) from cars_data where year  <  1980;"}, {"query": "What is the average edispl of the cars of model volvo?", "sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"}, {"query": "What is the average edispl for all volvos?", "sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"}, {"query": "What is the maximum accelerate for different number of cylinders?", "sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"}, {"query": "What is the maximum accelerate for all the different cylinders?", "sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"}, {"query": "Which model has the most version(make) of cars?", "sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"}, {"query": "What model has the most different versions?", "sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"}, {"query": "How many cars have more than 4 cylinders?", "sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"}, {"query": "What is the number of cars with more than 4 cylinders?", "sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"}, {"query": "how many cars were produced in 1980?", "sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"}, {"query": "In 1980, how many cars were made?", "sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"}, {"query": "How many car models were produced by the maker with full name American Motor Company?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"}, {"query": "What is the number of car models created by the car maker American Motor Company?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"}, {"query": "Which makers designed more than 3 car models? List full name and the id.", "sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"}, {"query": "What are the names and ids of all makers with more than 3 models?", "sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"}, {"query": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?", "sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"}, {"query": "What are the different models created by either the car maker General Motors or weighed more than 3500?", "sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"}, {"query": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "sql": "select distinct year from cars_data where weight between 3000 and 4000;"}, {"query": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "sql": "select distinct year from cars_data where weight between 3000 and 4000;"}, {"query": "What is the horsepower of the car with the largest accelerate?", "sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"}, {"query": "What is the horsepower of the car with the greatest accelerate?", "sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"}, {"query": "For model volvo, how many cylinders does the car with the least accelerate have?", "sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"}, {"query": "For a volvo model, how many cylinders does the version with least accelerate have?", "sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"}, {"query": "How many cars have a larger accelerate than the car with the largest horsepower?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"}, {"query": "What is the number of cars with a greater accelerate than the one with the most horsepower?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"}, {"query": "How many countries has more than 2 car makers ?", "sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2"}, {"query": "What is the number of countries with more than 2 car makers ?", "sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2"}, {"query": "How many cars has over 6 cylinders?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"}, {"query": "What is the number of carsw ith over 6 cylinders?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"}, {"query": "For the cars with 4 cylinders, which model has the largest horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"}, {"query": "For all of the 4 cylinder cars, which model has the most horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"}, {"query": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.", "sql": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;"}, {"query": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?", "sql": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;"}, {"query": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?", "sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980"}, {"query": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?", "sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980"}, {"query": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"}, {"query": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"}, {"query": "What are the name of the countries where there is not a single car maker?", "sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"}, {"query": "What are the names of the countries with no car makers?", "sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"}, {"query": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .", "sql": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;"}, {"query": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?", "sql": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;"}, {"query": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?", "sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';"}, {"query": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?", "sql": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';"}, {"query": "Which country does Airline \"JetBlue Airways\" belong to?", "sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"query": "What country is Jetblue Airways affiliated with?", "sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"query": "What is the abbreviation of Airline \"JetBlue Airways\"?", "sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"query": "Which abbreviation corresponds to Jetblue Airways?", "sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"query": "List all airline names and their abbreviations in \"USA\".", "sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"query": "What are the airline names and abbreviations for airlines in the USA?", "sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"query": "List the airport code and name in the city of Anthony.", "sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"query": "Give the airport code and airport name corresonding to the city Anthony.", "sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"query": "How many airlines do we have?", "sql": "SELECT count(*) FROM AIRLINES"}, {"query": "What is the total number of airlines?", "sql": "SELECT count(*) FROM AIRLINES"}, {"query": "How many airports do we have?", "sql": "SELECT count(*) FROM AIRPORTS"}, {"query": "Return the number of  airports.", "sql": "SELECT count(*) FROM AIRPORTS"}, {"query": "How many flights do we have?", "sql": "SELECT count(*) FROM FLIGHTS"}, {"query": "Return the number of flights.", "sql": "SELECT count(*) FROM FLIGHTS"}, {"query": "Which airline has abbreviation 'UAL'?", "sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"query": "Give the airline with abbreviation 'UAL'.", "sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"query": "How many airlines are from USA?", "sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"query": "Return the number of airlines in the USA.", "sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"query": "Which city and country is the Alton airport at?", "sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"query": "Give the city and country for the Alton airport.", "sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"query": "What is the airport name for airport 'AKO'?", "sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"query": "Return the name of the airport with code 'AKO'.", "sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"query": "What are airport names at City 'Aberdeen'?", "sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"query": "What are the names of airports in Aberdeen?", "sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"query": "How many flights depart from 'APG'?", "sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"query": "Count the number of flights departing from 'APG'.", "sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"query": "How many flights have destination ATO?", "sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"query": "Count the number of flights into ATO.", "sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"query": "How many flights depart from City Aberdeen?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"query": "Return the number of flights departing from Aberdeen.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"query": "How many flights arriving in Aberdeen city?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"query": "Return the number of flights arriving in Aberdeen.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"query": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\""}, {"query": "How many flights fly from Aberdeen to Ashley?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\""}, {"query": "How many flights does airline 'JetBlue Airways' have?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"query": "Give the number of Jetblue Airways flights.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"query": "How many 'United Airlines' flights go to Airport 'ASY'?", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"query": "Count the number of United Airlines flights arriving in ASY Airport.", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"query": "How many 'United Airlines' flights depart from Airport 'AHD'?", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"query": "Return the number of United Airlines flights leaving from AHD Airport.", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"query": "How many United Airlines flights go to City 'Aberdeen'?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"query": "Count the number of United Airlines flights that arrive in Aberdeen.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"query": "Which city has most number of arriving flights?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which city has the most frequent destination airport?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which city has most number of departing flights?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which city is the most frequent source airport?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the code of airport that has the highest number of flights?", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the airport code of the airport with the most flights?", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the code of airport that has fewest number of flights?", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"}, {"query": "Give the code of the airport with the least flights.", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"}, {"query": "Which airline has most number of flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"}, {"query": "What airline serves the most flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the abbreviation and country of the airline that has fewest number of flights?", "sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"}, {"query": "What is the abbreviation of the airilne has the fewest flights and what country is it in?", "sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"}, {"query": "What are airlines that have some flight departing from airport 'AHD'?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"query": "Which airlines have a flight with source airport AHD?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"query": "What are airlines that have flights arriving at airport 'AHD'?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"query": "Which airlines have a flight with destination airport AHD?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"query": "Find all airlines that have flights from both airports 'APG' and 'CVO'.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""}, {"query": "Which airlines have departing flights from both APG and CVO airports?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""}, {"query": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""}, {"query": "Which airlines have departures from CVO but not from APG airports?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""}, {"query": "Find all airlines that have at least 10 flights.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"}, {"query": "Which airlines have at least 10 flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"}, {"query": "Find all airlines that have fewer than 200 flights.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"}, {"query": "Which airlines have less than 200 flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"}, {"query": "What are flight numbers of Airline \"United Airlines\"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"query": "Which flight numbers correspond to United Airlines flights?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"query": "What are flight numbers of flights departing from Airport \"APG\"?", "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"query": "Give the flight numbers of flights leaving from APG.", "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"query": "What are flight numbers of flights arriving at Airport \"APG\"?", "sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"query": "Give the flight numbers of flights landing at APG.", "sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"query": "What are flight numbers of flights departing from City \"Aberdeen \"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"query": "Give the flight numbers of flights leaving from Aberdeen.", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"query": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"query": "Give the flight numbers of flights arriving in Aberdeen.", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"query": "Find the number of flights landing in the city of Aberdeen or Abilene.", "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\""}, {"query": "How many flights land in Aberdeen or Abilene?", "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\""}, {"query": "Find the name of airports which do not have any flight in and out.", "sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"}, {"query": "Which airports do not have departing or arriving flights?", "sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"}, {"query": "How many employees are there?", "sql": "SELECT count(*) FROM employee"}, {"query": "Count the number of employees", "sql": "SELECT count(*) FROM employee"}, {"query": "Sort employee names by their age in ascending order.", "sql": "SELECT name FROM employee ORDER BY age"}, {"query": "List the names of employees and sort in ascending order of age.", "sql": "SELECT name FROM employee ORDER BY age"}, {"query": "What is the number of employees from each city?", "sql": "SELECT count(*) ,  city FROM employee GROUP BY city"}, {"query": "Count the number of employees for each city.", "sql": "SELECT count(*) ,  city FROM employee GROUP BY city"}, {"query": "Which cities do more than one employee under age 30 come from?", "sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"}, {"query": "Find the cities that have more than one employee under age 30.", "sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"}, {"query": "Find the number of shops in each location.", "sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION"}, {"query": "How many shops are there in each location?", "sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION"}, {"query": "Find the manager name and district of the shop whose number of products is the largest.", "sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"query": "What are the manager name and district of the shop that sells the largest number of products?", "sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"query": "find the minimum and maximum number of products of all stores.", "sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"query": "What are the minimum and maximum number of products across all the shops?", "sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"query": "Return the name, location and district of all shops in descending order of number of products.", "sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC"}, {"query": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.", "sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC"}, {"query": "Find the names of stores whose number products is more than the average number of products.", "sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)"}, {"query": "Which shops' number products is above the average? Give me the shop names.", "sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)"}, {"query": "find the name of employee who was awarded the most times in the evaluation.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which employee received the most awards in evaluations? Give me the employee name.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the name of the employee who got the highest one time bonus.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"query": "Which employee received the biggest bonus? Give me the employee name.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"query": "Find the names of employees who never won any award in the evaluation.", "sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"}, {"query": "What are the names of the employees who never received any evaluation?", "sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"}, {"query": "What is the name of the shop that is hiring the largest number of employees?", "sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which shop has the most employees? Give me the shop name.", "sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the name of the shops that do not hire any employee.", "sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)"}, {"query": "Which shops run with no employees? Find the shop names", "sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)"}, {"query": "Find the number of employees hired in each shop; show the shop name as well.", "sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"}, {"query": "For each shop, return the number of employees working there and the name of the shop.", "sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"}, {"query": "What is total bonus given in all evaluations?", "sql": "SELECT sum(bonus) FROM evaluation"}, {"query": "Find the total amount of bonus given in all the evaluations.", "sql": "SELECT sum(bonus) FROM evaluation"}, {"query": "Give me all the information about hiring.", "sql": "SELECT * FROM hiring"}, {"query": "What is all the information about hiring?", "sql": "SELECT * FROM hiring"}, {"query": "Which district has both stores with less than 3000 products and stores with more than 10000 products?", "sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000"}, {"query": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.", "sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000"}, {"query": "How many different store locations are there?", "sql": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"query": "Count the number of distinct store locations.", "sql": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"query": "How many documents do we have?", "sql": "SELECT count(*) FROM Documents"}, {"query": "Count the number of documents.", "sql": "SELECT count(*) FROM Documents"}, {"query": "List document IDs, document names, and document descriptions for all documents.", "sql": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"query": "What are the ids, names, and descriptions for all documents?", "sql": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"query": "What is the document name and template id for document with description with the letter 'w' in it?", "sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"query": "Return the names and template ids for documents that contain the letter w in their description.", "sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"query": "What is the document id, template id and description for document named \"Robbin CV\"?", "sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"query": "Return the document id, template id, and description for the document with the name Robbin CV.", "sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"query": "How many different templates do all document use?", "sql": "SELECT count(DISTINCT template_id) FROM Documents"}, {"query": "Count the number of different templates used for documents.", "sql": "SELECT count(DISTINCT template_id) FROM Documents"}, {"query": "How many documents are using the template with type code 'PPT'?", "sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"}, {"query": "Count the number of documents that use the PPT template type.", "sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"}, {"query": "Show all template ids and number of documents using each template.", "sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"}, {"query": "What are all different template ids used for documents, and how many times were each of them used?", "sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"}, {"query": "What is the id and type code for the template used by the most documents?", "sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the id and type code of the template that is used for the greatest number of documents.", "sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show ids for all templates that are used by more than one document.", "sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"}, {"query": "What are the template ids of any templates used in more than a single document?", "sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"}, {"query": "Show ids for all templates not used by any document.", "sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"}, {"query": "What are the ids for templates that are not used in any documents?", "sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"}, {"query": "How many templates do we have?", "sql": "SELECT count(*) FROM Templates"}, {"query": "Count the number of templates.", "sql": "SELECT count(*) FROM Templates"}, {"query": "Show template ids, version numbers, and template type codes for all templates.", "sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"query": "What are the ids, version numbers, and type codes for each template?", "sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"query": "Show all distinct template type codes for all templates.", "sql": "SELECT DISTINCT template_type_code FROM Templates"}, {"query": "What are the different template type codes?", "sql": "SELECT DISTINCT template_type_code FROM Templates"}, {"query": "What are the ids of templates with template type code PP or PPT?", "sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\""}, {"query": "Return the ids of templates that have the code PP or PPT.", "sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\""}, {"query": "How many templates have template type code CV?", "sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""}, {"query": "Count the number of templates of the type CV.", "sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""}, {"query": "What is the version number and template type code for the template with version number later than 5?", "sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"query": "Return the version numbers and template type codes of templates with a version number greater than 5.", "sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"query": "Show all template type codes and number of templates for each.", "sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code"}, {"query": "What are the different template type codes, and how many templates correspond to each?", "sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code"}, {"query": "Which template type code has most number of templates?", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the type code of the template type that the most templates belong to.", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show all template type codes with less than three templates.", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"}, {"query": "What are the codes of template types that have fewer than 3 templates?", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"}, {"query": "What the smallest version number and its template type code?", "sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"query": "Return the lowest version number, along with its corresponding template type code.", "sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"query": "What is the template type code of the template used by document with the name \"Data base\"?", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"query": "Return the template type code of the template that is used by a document named Data base.", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"query": "Show all document names using templates with template type code BK.", "sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\""}, {"query": "What are the names of documents that use templates with the code BK?", "sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\""}, {"query": "Show all template type codes and the number of documents using each type.", "sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"}, {"query": "What are the different template type codes, and how many documents use each type?", "sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"}, {"query": "Which template type code is used by most number of documents?", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the code of the template type that is most commonly used in documents.", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show all template type codes that are not used by any document.", "sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"}, {"query": "What are the codes of template types that are not used for any document?", "sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"}, {"query": "Show all template type codes and descriptions.", "sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"query": "What are the type codes and descriptions for all template types?", "sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"query": "What is the template type descriptions for template type code \"AD\".", "sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\""}, {"query": "Return the template type description of the template type with the code AD.", "sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\""}, {"query": "What is the template type code for template type description \"Book\".", "sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"query": "Return the type code of the template type with the description \"Book\".", "sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"query": "What are the distinct template type descriptions for the templates ever used by any document?", "sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"query": "Return the different descriptions for templates that have been used in a document.", "sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"query": "What are the template ids with template type description \"Presentation\".", "sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"query": "Return the ids corresponding to templates with the description 'Presentation'.", "sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"query": "How many paragraphs in total?", "sql": "SELECT count(*) FROM Paragraphs"}, {"query": "Count the number of paragraphs.", "sql": "SELECT count(*) FROM Paragraphs"}, {"query": "How many paragraphs for the document with name 'Summer Show'?", "sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"query": "Count the number of paragraphs in the document named 'Summer Show'.", "sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"query": "Show paragraph details for paragraph with text 'Korea ' .", "sql": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"query": "What are the details for the paragraph that includes the text 'Korea ' ?", "sql": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"query": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"query": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"query": "Show all paragraph texts for the document \"Customer reviews\".", "sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"query": "What are the paragraph texts for the document with the name 'Customer reviews'?", "sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"query": "Show all document ids and the number of paragraphs in each document. Order by document id.", "sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"}, {"query": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"}, {"query": "Show all document ids, names and the number of paragraphs in each document.", "sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"}, {"query": "What are the ids and names of each document, as well as the number of paragraphs in each?", "sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"}, {"query": "List all document ids with at least two paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"}, {"query": "What are the ids of documents that have 2 or more paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"}, {"query": "What is the document id and name with greatest number of paragraphs?", "sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the id and name of the document with the most paragraphs.", "sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the document id with least number of paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"}, {"query": "Return the id of the document with the fewest paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"}, {"query": "What is the document id with 1 to 2 paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2"}, {"query": "Give the ids of documents that have between one and two paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2"}, {"query": "Show the document id with paragraph text 'Brazil' and 'Ireland'.", "sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'"}, {"query": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?", "sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'"}, {"query": "How many teachers are there?", "sql": "SELECT count(*) FROM teacher"}, {"query": "What is the total count of teachers?", "sql": "SELECT count(*) FROM teacher"}, {"query": "List the names of teachers in ascending order of age.", "sql": "SELECT Name FROM teacher ORDER BY Age ASC"}, {"query": "What are the names of the teachers ordered by ascending age?", "sql": "SELECT Name FROM teacher ORDER BY Age ASC"}, {"query": "What are the age and hometown of teachers?", "sql": "SELECT Age ,  Hometown FROM teacher"}, {"query": "What is the age and hometown of every teacher?", "sql": "SELECT Age ,  Hometown FROM teacher"}, {"query": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "sql": "select name from teacher where hometown != \"little lever urban district\""}, {"query": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "sql": "select name from teacher where hometown != \"little lever urban district\""}, {"query": "Show the name of teachers aged either 32 or 33?", "sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33"}, {"query": "What are the names of the teachers who are aged either 32 or 33?", "sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33"}, {"query": "What is the hometown of the youngest teacher?", "sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"query": "Where is the youngest teacher from?", "sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"query": "Show different hometown of teachers and the number of teachers from each hometown.", "sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown"}, {"query": "For each hometown, how many teachers are there?", "sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown"}, {"query": "List the most common hometown of teachers.", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What is the most commmon hometowns for teachers?", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Show the hometowns shared by at least two teachers.", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2"}, {"query": "What are the towns from which at least two teachers come from?", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2"}, {"query": "Show names of teachers and the courses they are arranged to teach.", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"query": "What is the name of each teacher and what course they teach?", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"query": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name"}, {"query": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name"}, {"query": "Show the name of the teacher for the math course.", "sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"query": "What are the names of the people who teach math courses?", "sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"query": "Show names of teachers and the number of courses they teach.", "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name"}, {"query": "What are the names of the teachers and how many courses do they teach?", "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name"}, {"query": "Show names of teachers that teach at least two courses.", "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"}, {"query": "What are the names of the teachers who teach at least two courses?", "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"}, {"query": "List the names of teachers who have not been arranged to teach courses.", "sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)"}, {"query": "What are the names of the teachers whose courses have not been arranged?", "sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)"}, {"query": "How many visitors below age 30 are there?", "sql": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"query": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.", "sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC"}, {"query": "What is the average age of the visitors whose membership level is not higher than 4?", "sql": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"query": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.", "sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC"}, {"query": "Find the id and name of the museum that has the most staff members?", "sql": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"query": "Find the average number of staff working for the museums that were open before 2009.", "sql": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"query": "What are the opening year and staff number of the museum named Plaza Museum?", "sql": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"query": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.", "sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)"}, {"query": "find the id, name and age for visitors who visited some museums more than once.", "sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1"}, {"query": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?", "sql": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1"}, {"query": "What are the id and name of the museum visited most times?", "sql": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name of the museum that had no visitor yet?", "sql": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)"}, {"query": "Find the name and age of the visitor who bought the most tickets at once.", "sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"query": "What are the average and maximum number of tickets bought in all visits?", "sql": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"query": "What is the total ticket expense of the visitors whose membership level is 1?", "sql": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"query": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?", "sql": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011"}, {"query": "Find the number of visitors who did not visit any museum opened after 2010.", "sql": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)"}, {"query": "How many museums were opened after 2013 or before 2008?", "sql": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008"}, {"query": "Find the total number of players.", "sql": "SELECT count(*) FROM players"}, {"query": "How many players are there?", "sql": "SELECT count(*) FROM players"}, {"query": "Find the total number of matches.", "sql": "SELECT count(*) FROM matches"}, {"query": "Count the number of matches.", "sql": "SELECT count(*) FROM matches"}, {"query": "List the first name and birth date of all players from the country with code USA.", "sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"query": "What are the first names and birth dates of players from the USA?", "sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"query": "Find the average age of losers and winners of all matches.", "sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"query": "What are the average ages of losers and winners across matches?", "sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"query": "Find the average rank of winners in all matches.", "sql": "SELECT avg(winner_rank) FROM matches"}, {"query": "What is the average rank for winners in all matches?", "sql": "SELECT avg(winner_rank) FROM matches"}, {"query": "Find the highest rank of losers in all matches.", "sql": "SELECT min(loser_rank) FROM matches"}, {"query": "What is the best rank of losers across all matches?", "sql": "SELECT min(loser_rank) FROM matches"}, {"query": "find the number of distinct country codes of all players.", "sql": "SELECT count(DISTINCT country_code) FROM players"}, {"query": "How many distinct countries do players come from?", "sql": "SELECT count(DISTINCT country_code) FROM players"}, {"query": "Find the number of distinct name of losers.", "sql": "SELECT count(DISTINCT loser_name) FROM matches"}, {"query": "How many different loser names are there?", "sql": "SELECT count(DISTINCT loser_name) FROM matches"}, {"query": "Find the name of tourney that has more than 10 matches.", "sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"}, {"query": "What are the names of tournaments that have more than 10 matches?", "sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"}, {"query": "List the names of all winners who played in both 2013 and 2016.", "sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016"}, {"query": "What are the names of players who won in both 2013 and 2016?", "sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016"}, {"query": "List the number of all matches who played in years of 2013 or 2016.", "sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016"}, {"query": "How many matches were played in 2013 or 2016?", "sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016"}, {"query": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"}, {"query": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"}, {"query": "Find the first name and country code of the oldest player.", "sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"query": "What is the first name and country code of the oldest player?", "sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"query": "List the first and last name of all players in the order of birth date.", "sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date"}, {"query": "What are the full names of all players, sorted by birth date?", "sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date"}, {"query": "List the first and last name of all players who are left / L hand in the order of birth date.", "sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"}, {"query": "What are the full names of all left handed players, in order of birth date?", "sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"}, {"query": "Find the first name and country code of the player who did the most number of tours.", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"query": "What is the first name and country code of the player with the most tours?", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"query": "Find the year that has the most number of matches.", "sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which year had the most matches?", "sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the name and rank points of the winner who won the most times.", "sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name of the winner who has won the most matches, and how many rank points does this player have?", "sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"query": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"query": "find the names of loser and winner who played in the match with greatest number of minutes.", "sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"query": "What are the names of the winner and loser who played in the longest match?", "sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"query": "Find the average ranking for each player and their first name.", "sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"}, {"query": "What are the first names of all players, and their average rankings?", "sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"}, {"query": "Find the total ranking points for each player and their first name.", "sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"}, {"query": "What are the first names of all players, and their total ranking points?", "sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"}, {"query": "find the number of players for each country.", "sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code"}, {"query": "How many players are from each country?", "sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code"}, {"query": "find the code of the country where has the greatest number of players.", "sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the code of the country with the most players?", "sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the codes of countries that have more than 50 players.", "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"}, {"query": "What are the codes of countries with more than 50 players?", "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"}, {"query": "Find the total number of tours for each ranking date.", "sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"}, {"query": "How many total tours were there for each ranking date?", "sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"}, {"query": "Find the number of matches happened in each year.", "sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR"}, {"query": "How many matches were played in each year?", "sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR"}, {"query": "Find the name and rank of the 3 youngest winners across all matches.", "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3"}, {"query": "What are the names and ranks of the three youngest winners across all matches?", "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3"}, {"query": "How many different winners both participated in the WTA Championships and were left handed?", "sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"query": "Find the number of left handed winners who participated in the WTA Championships.", "sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"query": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"query": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"query": "Find the number of players for each hand type.", "sql": "SELECT count(*) ,  hand FROM players GROUP BY hand"}, {"query": "How many players are there for each hand type?", "sql": "SELECT count(*) ,  hand FROM players GROUP BY hand"}, {"query": "How many ships ended up being 'Captured'?", "sql": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"query": "List the name and tonnage ordered by in descending alphaetical order for the names.", "sql": "SELECT name ,  tonnage FROM ship ORDER BY name DESC"}, {"query": "List the name, date and result of each battle.", "sql": "SELECT name ,  date FROM battle"}, {"query": "What is maximum and minimum death toll caused each time?", "sql": "SELECT max(killed) ,  min(killed) FROM death"}, {"query": "What is the average number of injuries caused each time?", "sql": "SELECT avg(injured) FROM death"}, {"query": "What are the death and injury situations caused by the ship with tonnage 't'?", "sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"query": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "sql": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"query": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "sql": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"query": "What are the ids and names of the battles that led to more than 10 people killed in total.", "sql": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10"}, {"query": "What is the ship id and name that caused most total injuries?", "sql": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "sql": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"query": "How many different results are there for the battles?", "sql": "SELECT count(DISTINCT RESULT) FROM battle"}, {"query": "How many battles did not lose any ship with tonnage '225'?", "sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );"}, {"query": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", "sql": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'"}, {"query": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "sql": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'"}, {"query": "What are the notes of the death events which has substring 'East'?", "sql": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"query": "what are all the addresses including line 1 and line 2?", "sql": "SELECT line_1 ,  line_2 FROM addresses"}, {"query": "What is the first and second line for all addresses?", "sql": "SELECT line_1 ,  line_2 FROM addresses"}, {"query": "How many courses in total are listed?", "sql": "SELECT count(*) FROM Courses"}, {"query": "How many courses are there?", "sql": "SELECT count(*) FROM Courses"}, {"query": "How is the math course described?", "sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"query": "What are the descriptions for all the math courses?", "sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"query": "What is the zip code of the address in the city Port Chelsea?", "sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"query": "What is the zip code for Port Chelsea?", "sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"query": "Which department offers the most number of degrees? List department name and id.", "sql": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name and id of the department with the most number of degrees ?", "sql": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1"}, {"query": "How many departments offer any degree?", "sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"query": "How many different departments offer degrees?", "sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"query": "How many different degree names are offered?", "sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"query": "How many different degrees are offered?", "sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"query": "How many degrees does the engineering department offer?", "sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"query": "How many degrees does the engineering department have?", "sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"query": "What are the names and descriptions of all the sections?", "sql": "SELECT section_name ,  section_description FROM Sections"}, {"query": "What are the names and descriptions for all the sections?", "sql": "SELECT section_name ,  section_description FROM Sections"}, {"query": "What are the names and id of courses having at most 2 sections?", "sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2"}, {"query": "What are the names and ids of every course with less than 2 sections?", "sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2"}, {"query": "List the section_name in reversed lexicographical order.", "sql": "SELECT section_name FROM Sections ORDER BY section_name DESC"}, {"query": "What are the names of the sections in reverse alphabetical order?", "sql": "SELECT section_name FROM Sections ORDER BY section_name DESC"}, {"query": "What is the semester which most student registered in? Show both the name and the id.", "sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "For each semester, what is the name and id of the one with the most students registered?", "sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the description of the department whose name has the substring the computer?", "sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"query": "What is the department description for the one whose name has the word computer?", "sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"query": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.", "sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"}, {"query": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?", "sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"}, {"query": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"query": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"query": "Find the kind of program which most number of students are enrolled in?", "sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the degree summary name that has the most number of students enrolled?", "sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the program which most number of students are enrolled in. List both the id and the summary.", "sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the program id and the summary of the degree that has the most students enrolled?", "sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.", "sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?", "sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which semesters do not have any student enrolled? List the semester name.", "sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )"}, {"query": "What is the name of the semester with no students enrolled?", "sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )"}, {"query": "What are all the course names of the courses which ever have students enrolled in?", "sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"query": "What are the names of all courses that have some students enrolled?", "sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"query": "What's the name of the course with most number of enrollments?", "sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the name of the course with the most students enrolled?", "sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1"}, {"query": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.", "sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"}, {"query": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?", "sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"}, {"query": "Show the date and id of the transcript with at least 2 course results.", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2"}, {"query": "What is the date and id of the transcript with at least 2 courses listed?", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2"}, {"query": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "sql": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"query": "What is the mobile phone number of the student named Timmothy Ward ?", "sql": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"query": "Who is the first student to register? List the first name, middle name and last name.", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"query": "What is the first, middle, and last name of the first student to register?", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"query": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"query": "What is the first, middle, and last name of the earliest school graduate?", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"query": "Whose permanent address is different from his or her current address? List his or her first name.", "sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id"}, {"query": "What is the first name of the student whose permanent address is different from his or her current one?", "sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id"}, {"query": "Which address holds the most number of students currently? List the address id and all lines.", "sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the id, line 1, and line 2 of the address with the most students?", "sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "On average, when were the transcripts printed?", "sql": "SELECT avg(transcript_date) FROM Transcripts"}, {"query": "What is the average transcript date?", "sql": "SELECT avg(transcript_date) FROM Transcripts"}, {"query": "When is the first transcript released? List the date and details.", "sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"query": "What is the earliest date of a transcript release, and what details can you tell me?", "sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"query": "How many transcripts are released?", "sql": "SELECT count(*) FROM Transcripts"}, {"query": "How many transcripts are listed?", "sql": "SELECT count(*) FROM Transcripts"}, {"query": "What is the last transcript release date?", "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"query": "When was the last transcript released?", "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"query": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.", "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?", "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show the date of the transcript which shows the least number of results, also list the id.", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1"}, {"query": "What is the date and id of the transcript with the least number of results?", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1"}, {"query": "Find the semester when both Master students and Bachelor students got enrolled in.", "sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"}, {"query": "What is the id of the semester that had both Masters and Bachelors students enrolled?", "sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"}, {"query": "How many different addresses do the students currently live?", "sql": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"query": "What are the different addresses that have students living there?", "sql": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"query": "List all the student details in reversed lexicographical order.", "sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"}, {"query": "What other details can you tell me about students in reverse alphabetical order?", "sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"}, {"query": "Describe the section h.", "sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"query": "What is the description for the section named h?", "sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"query": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .", "sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'"}, {"query": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?", "sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'"}, {"query": "List the title of all cartoons in alphabetical order.", "sql": "SELECT Title FROM Cartoon ORDER BY title"}, {"query": "What are the titles of the cartoons sorted alphabetically?", "sql": "SELECT Title FROM Cartoon ORDER BY title"}, {"query": "List all cartoon directed by \"Ben Jones\".", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";"}, {"query": "What are the names of all cartoons directed by Ben Jones?", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";"}, {"query": "How many cartoons were written by \"Joseph Kuhr\"?", "sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";"}, {"query": "What is the number of cartoones written by Joseph Kuhr?", "sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";"}, {"query": "list all cartoon titles and their directors ordered by their air date", "sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date"}, {"query": "What is the name and directors of all the cartoons that are ordered by air date?", "sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date"}, {"query": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";"}, {"query": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";"}, {"query": "Which country has the most of TV Channels? List the country and number of TV Channels it has.", "sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"}, {"query": "What is the country with the most number of TV Channels and how many does it have?", "sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"}, {"query": "List the number of different series names and contents in the TV Channel table.", "sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;"}, {"query": "How many different series and contents are listed in the TV Channel table?", "sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;"}, {"query": "What is the content of TV Channel with serial name \"Sky Radio\"?", "sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";"}, {"query": "What is the content of the series Sky Radio?", "sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";"}, {"query": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";"}, {"query": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";"}, {"query": "How many TV Channel using language English?", "sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";"}, {"query": "How many TV Channels use the English language?", "sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";"}, {"query": "List the language used least number of TV Channel. List language and number of TV Channel.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"}, {"query": "What are the languages used by the least number of TV Channels and how many channels use it?", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"}, {"query": "List each language and the number of TV Channels using it.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE"}, {"query": "For each language, list the number of TV Channels that use it.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE"}, {"query": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";"}, {"query": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";"}, {"query": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"}, {"query": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"}, {"query": "List the Episode of all TV series sorted by rating.", "sql": "SELECT Episode FROM TV_series ORDER BY rating"}, {"query": "What are all of the episodes ordered by ratings?", "sql": "SELECT Episode FROM TV_series ORDER BY rating"}, {"query": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", "sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;"}, {"query": "What are 3 most highly rated episodes in the TV series table and what were those ratings?", "sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;"}, {"query": "What is minimum and maximum share of TV series?", "sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;"}, {"query": "What is the maximum and minimum share for the TV series?", "sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;"}, {"query": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"}, {"query": "When did the episode \"A Love of a Lifetime\" air?", "sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"}, {"query": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"}, {"query": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"}, {"query": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";"}, {"query": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";"}, {"query": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"}, {"query": "What is the episode for the TV series named \"Sky Radio\"?", "sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"}, {"query": "Find the number of cartoons directed by each of the listed directors.", "sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by"}, {"query": "How many cartoons did each director create?", "sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by"}, {"query": "Find the production code and channel of the most recently aired cartoon .", "sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"query": "What is the produdction code and channel of the most recent cartoon ?", "sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"query": "Find the package choice and series name of the TV channel that has high definition TV.", "sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"query": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"query": "which countries' tv channels are playing some cartoon written by Todd Casey?", "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"query": "What are the countries that have cartoons on TV that were written by Todd Casey?", "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"query": "which countries' tv channels are not playing any cartoon written by Todd Casey?", "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"query": "What are the countries that are not playing cartoons written by Todd Casey?", "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"query": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"}, {"query": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"}, {"query": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"query": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"query": "find id of the tv channels that from the countries where have more than two tv channels.", "sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"}, {"query": "What are the ids of all tv channels that have more than 2 TV channels?", "sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"}, {"query": "find the id of tv channels that do not play any cartoon directed by Ben Jones.", "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'"}, {"query": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?", "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'"}, {"query": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.", "sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')"}, {"query": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')"}, {"query": "How many poker players are there?", "sql": "SELECT count(*) FROM poker_player"}, {"query": "Count the number of poker players.", "sql": "SELECT count(*) FROM poker_player"}, {"query": "List the earnings of poker players in descending order.", "sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"}, {"query": "What are the earnings of poker players, ordered descending by value?", "sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"}, {"query": "List the final tables made and the best finishes of poker players.", "sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"query": "What are the final tables made and best finishes for all poker players?", "sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"query": "What is the average earnings of poker players?", "sql": "SELECT avg(Earnings) FROM poker_player"}, {"query": "Return the average earnings across all poker players.", "sql": "SELECT avg(Earnings) FROM poker_player"}, {"query": "What is the money rank of the poker player with the highest earnings?", "sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"query": "Return the money rank of the player with the greatest earnings.", "sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"query": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"query": "Return the maximum final tables made across all poker players who have earnings below 200000.", "sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"query": "What are the names of poker players?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"query": "Return the names of all the poker players.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"query": "What are the names of poker players whose earnings is higher than 300000?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"query": "Give the names of poker players who have earnings above 300000.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"query": "List the names of poker players ordered by the final tables made in ascending order.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made"}, {"query": "What are the names of poker players, ordered ascending by the number of final tables they have made?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made"}, {"query": "What is the birth date of the poker player with the lowest earnings?", "sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"query": "Return the birth date of the poker player with the lowest earnings.", "sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"query": "What is the money rank of the tallest poker player?", "sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"query": "Return the money rank of the poker player with the greatest height.", "sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"query": "What is the average earnings of poker players with height higher than 200?", "sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"query": "Give average earnings of poker players who are taller than 200.", "sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"query": "What are the names of poker players in descending order of earnings?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC"}, {"query": "Return the names of poker players sorted by their earnings descending.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC"}, {"query": "What are different nationalities of people and the corresponding number of people from each nation?", "sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality"}, {"query": "How many people are there of each nationality?", "sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality"}, {"query": "What is the most common nationality of people?", "sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Give the nationality that is most common across all people.", "sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What are the nationalities that are shared by at least two people?", "sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"}, {"query": "Return the nationalities for which there are two or more people.", "sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"}, {"query": "List the names and birth dates of people in ascending alphabetical order of name.", "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC"}, {"query": "What are the names and birth dates of people, ordered by their names in alphabetical order?", "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC"}, {"query": "Show names of people whose nationality is not \"Russia\".", "sql": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"query": "What are the names of people who are not from Russia?", "sql": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"query": "List the names of people that are not poker players.", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)"}, {"query": "What are the names of people who do not play poker?", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)"}, {"query": "How many distinct nationalities are there?", "sql": "SELECT count(DISTINCT Nationality) FROM people"}, {"query": "Count the number of different nationalities.", "sql": "SELECT count(DISTINCT Nationality) FROM people"}, {"query": "How many states are there?", "sql": "SELECT count(*) FROM area_code_state"}, {"query": "List the contestant numbers and names, ordered by contestant name descending.", "sql": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC"}, {"query": "List the vote ids, phone numbers and states of all votes.", "sql": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"query": "What are the maximum and minimum values of area codes?", "sql": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"query": "What is last date created of votes from the state 'CA'?", "sql": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"query": "What are the names of the contestants whose names are not 'Jessie Alloway'", "sql": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"query": "What are the distinct states and create time of all votes?", "sql": "SELECT DISTINCT state ,  created FROM votes"}, {"query": "What are the contestant numbers and names of the contestants who had at least two votes?", "sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2"}, {"query": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?", "sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1"}, {"query": "What are the number of votes from state 'NY' or 'CA'?", "sql": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'"}, {"query": "How many contestants did not get voted?", "sql": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )"}, {"query": "What is the area code in which the most voters voted?", "sql": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1"}, {"query": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "sql": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"query": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.", "sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'"}, {"query": "Return the names of the contestants whose names contain the substring 'Al' .", "sql": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"query": "What are the names of all the countries that became independent after 1950?", "sql": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"query": "Give the names of the nations that were founded after 1950.", "sql": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"query": "How many countries have a republic as their form of government?", "sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\""}, {"query": "How many countries have governments that are republics?", "sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\""}, {"query": "What is the total surface area of the countries in the Caribbean region?", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""}, {"query": "How much surface area do the countires in the Carribean cover together?", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""}, {"query": "Which continent is Anguilla in?", "sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\""}, {"query": "What is the continent name which Anguilla belongs to?", "sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\""}, {"query": "Which region is the city Kabul located in?", "sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""}, {"query": "What region is Kabul in?", "sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""}, {"query": "Which language is the most popular in Aruba?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"}, {"query": "What language is predominantly spoken in Aruba?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"}, {"query": "What are the population and life expectancies in Brazil?", "sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\""}, {"query": "Give me Brazil\u2019s population and life expectancies.", "sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\""}, {"query": "What are the region and population of Angola?", "sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\""}, {"query": "What region does Angola belong to and what is its population?", "sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\""}, {"query": "What is the average expected life expectancy for countries in the region of Central Africa?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""}, {"query": "How long is the people\u2019s average life expectancy in Central Africa?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""}, {"query": "What is the name of country that has the shortest life expectancy in Asia?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"query": "Give the name of the country in Asia with the lowest life expectancy.", "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"query": "What is the total population and maximum GNP in Asia?", "sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"query": "How many people live in Asia, and what is the largest GNP among them?", "sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"query": "What is the average life expectancy in African countries that are republics?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\""}, {"query": "Give the average life expectancy for countries in Africa which are republics?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\""}, {"query": "What is the total surface area of the continents Asia and Europe?", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\""}, {"query": "Give the total surface area covered by countries in Asia or Europe.", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\""}, {"query": "How many people live in Gelderland district?", "sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\""}, {"query": "What is the total population of Gelderland district?", "sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\""}, {"query": "What is the average GNP and total population in all nations whose government is US territory?", "sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\""}, {"query": "Give the mean GNP and total population of nations which are considered US territory.", "sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\""}, {"query": "How many unique languages are spoken in the world?", "sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"query": "What is the number of distinct languages used around the world?", "sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"query": "How many type of governments are in Africa?", "sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"query": "How many different forms of governments are there in Africa?", "sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"query": "What is the total number of languages used in Aruba?", "sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""}, {"query": "How many languages are spoken in Aruba?", "sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""}, {"query": "How many official languages does Afghanistan have?", "sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""}, {"query": "How many official languages are spoken in Afghanistan?", "sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""}, {"query": "What is name of the country that speaks the largest number of languages?", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Give the name of the nation that uses the greatest amount of languages.", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Which continent has the most diverse languages?", "sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Which continent speaks the most languages?", "sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "How many countries speak both English and Dutch?", "sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"}, {"query": "What is the number of nations that use English and Dutch?", "sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"}, {"query": "What are the names of nations speak both English and French?", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""}, {"query": "Give the names of nations that speak both English and French.", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""}, {"query": "What are the names of nations where both English and French are official languages?", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\""}, {"query": "Give the names of countries with English and French as official languages.", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\""}, {"query": "What is the number of distinct continents where Chinese is spoken?", "sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\""}, {"query": "How many continents speak Chinese?", "sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\""}, {"query": "What are the regions that use English or Dutch?", "sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\""}, {"query": "Which regions speak Dutch or English?", "sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\""}, {"query": "What are the countries where either English or Dutch is the official language ?", "sql": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\""}, {"query": "Which countries have either English or Dutch as an official language?", "sql": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\""}, {"query": "Which language is the most popular on the Asian continent?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1"}, {"query": "What is the language that is used by the largest number of Asian nations?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1"}, {"query": "Which languages are spoken by only one country in republic governments?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1"}, {"query": "What languages are only used by a single country with a republic government?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1"}, {"query": "Find the city with the largest population that uses English.", "sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1"}, {"query": "What is the most populace city that speaks English?", "sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1"}, {"query": "Find the name, population and expected life length of asian country with the largest area?", "sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"query": "What are the name, population, and life expectancy of the largest Asian country by land?", "sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"query": "What is average life expectancy in the countries where English is not the official language?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"}, {"query": "Give the mean life expectancy of countries in which English is not the official language.", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"}, {"query": "What is the total number of people living in the nations that do not use English?", "sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"}, {"query": "How many people live in countries that do not speak English?", "sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"}, {"query": "What is the official language spoken in the country whose head of state is Beatrix?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\""}, {"query": "What is the official language used in the country the name of whose head of state is Beatrix.", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\""}, {"query": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"query": "For the countries founded before 1930, what is the total number of distinct official languages?", "sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"query": "What are the countries that have greater surface area than any country in Europe?", "sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"}, {"query": "Which countries have greater area than that of any country in Europe?", "sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"}, {"query": "What are the African countries that have a  population less than any country in Asia?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")"}, {"query": "Which African countries have a smaller population than that of any country in Asia?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")"}, {"query": "Which Asian countries have a population that is larger than any country in Africa?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")"}, {"query": "What are the Asian countries which have a population larger than that of any country in Africa?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")"}, {"query": "What are the country codes for countries that do not speak English?", "sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""}, {"query": "Return the country codes for countries that do not speak English.", "sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""}, {"query": "What are the country codes of countries where people use languages other than English?", "sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""}, {"query": "Give the country codes for countries in which people speak langauges that are not English.", "sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""}, {"query": "What are the codes of the countries that do not speak English and whose government forms are not Republic?", "sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""}, {"query": "Return the codes of countries that do not speak English and do not have Republics for governments.", "sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""}, {"query": "Which cities are in European countries where English is not the official language?", "sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"}, {"query": "What are the names of cities in Europe for which English is not the official language?", "sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"}, {"query": "Which unique cities are in Asian countries where Chinese is the official language ?", "sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\""}, {"query": "Return the different names of cities that are in Asia and for which Chinese is the official language.", "sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\""}, {"query": "What are the name, independence year, and surface area of the country with the smallest population?", "sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"query": "Give the name, year of independence, and surface area of the country that has the lowest population.", "sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"query": "What are the population, name and leader of the country with the largest area?", "sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"query": "Give the name, population, and head of state for the country that has the largest area.", "sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"query": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.", "sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2"}, {"query": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2"}, {"query": "Find the number of cities in each district whose population is greater than the average population of cities?", "sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District"}, {"query": "How many cities in each district have a population that is above the average population across all cities?", "sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District"}, {"query": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"}, {"query": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"}, {"query": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72"}, {"query": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72"}, {"query": "What are the names and areas of countries with the top 5 largest area?", "sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"}, {"query": "Return the names and surface areas of the 5 largest countries.", "sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"}, {"query": "What are names of countries with the top 3 largest population?", "sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"}, {"query": "Return the names of the 3 most populated countries.", "sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"}, {"query": "What are the names of the nations with the 3 lowest populations?", "sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"}, {"query": "Return the names of the 3 countries with the fewest people.", "sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"}, {"query": "how many countries are in Asia?", "sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"query": "Count the number of countries in Asia.", "sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"query": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"query": "Give the names of countries that are in Europe and have a population equal to 80000.", "sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"query": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000"}, {"query": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000"}, {"query": "What are the cities whose population is between 160000 and 900000?", "sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"query": "Return the names of cities that have a population between 160000 and 900000 .", "sql": "select name from city where population between 160000 and 900000"}, {"query": "Which language is spoken by the largest number of countries?", "sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"}, {"query": "Give the language that is spoken in the most countries.", "sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the language spoken by the largest percentage of people in each country?", "sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode"}, {"query": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?", "sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode"}, {"query": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"}, {"query": "Count the number of countries for which Spanish is the predominantly spoken language.", "sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"}, {"query": "What are the codes of countries where Spanish is spoken by the largest percentage of people?", "sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"}, {"query": "Return the codes of countries for which Spanish is the predominantly spoken language.", "sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"}, {"query": "How many conductors are there?", "sql": "SELECT count(*) FROM conductor"}, {"query": "Count the number of conductors.", "sql": "SELECT count(*) FROM conductor"}, {"query": "List the names of conductors in ascending order of age.", "sql": "SELECT Name FROM conductor ORDER BY Age ASC"}, {"query": "What are the names of conductors, ordered by age?", "sql": "SELECT Name FROM conductor ORDER BY Age ASC"}, {"query": "What are the names of conductors whose nationalities are not \"USA\"?", "sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"query": "Return the names of conductors that do not have the nationality \"USA\".", "sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"query": "What are the record companies of orchestras in descending order of years in which they were founded?", "sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"}, {"query": "Return the record companies of orchestras, sorted descending by the years in which they were founded.", "sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"}, {"query": "What is the average attendance of shows?", "sql": "SELECT avg(Attendance) FROM SHOW"}, {"query": "Return the average attendance across all shows.", "sql": "SELECT avg(Attendance) FROM SHOW"}, {"query": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"query": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"query": "How many different nationalities do conductors have?", "sql": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"query": "Count the number of different nationalities of conductors.", "sql": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"query": "List names of conductors in descending order of years of work.", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"}, {"query": "What are the names of conductors, sorted descending by the number of years they have worked?", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"}, {"query": "List the name of the conductor with the most years of work.", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"query": "What is the name of the conductor who has worked the greatest number of years?", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"query": "Show the names of conductors and the orchestras they have conducted.", "sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"query": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"query": "Show the names of conductors that have conducted more than one orchestras.", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1"}, {"query": "What are the names of conductors who have conducted at more than one orchestra?", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1"}, {"query": "Show the name of the conductor that has conducted the most number of orchestras.", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What is the name of the conductor who has conducted the most orchestras?", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"query": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"query": "Please show the different record companies and the corresponding number of orchestras.", "sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company"}, {"query": "How many orchestras does each record company manage?", "sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company"}, {"query": "Please show the record formats of orchestras in ascending order of count.", "sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"}, {"query": "What are the major record formats of orchestras, sorted by their frequency?", "sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"}, {"query": "List the record company shared by the most number of orchestras.", "sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What is the record company used by the greatest number of orchestras?", "sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "List the names of orchestras that have no performance.", "sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"}, {"query": "What are the orchestras that do not have any performances?", "sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"}, {"query": "Show the record companies shared by orchestras founded before 2003 and after 2003.", "sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003"}, {"query": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?", "sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003"}, {"query": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".", "sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\""}, {"query": "Count the number of orchestras that have CD or DVD as their record format.", "sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\""}, {"query": "Show the years in which orchestras that have given more than one performance are founded.", "sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1"}, {"query": "What are years of founding for orchestras that have had more than a single performance?", "sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1"}, {"query": "How many high schoolers are there?", "sql": "SELECT count(*) FROM Highschooler"}, {"query": "Count the number of high schoolers.", "sql": "SELECT count(*) FROM Highschooler"}, {"query": "Show the names and grades of each high schooler.", "sql": "SELECT name ,  grade FROM Highschooler"}, {"query": "What are the names and grades for each high schooler?", "sql": "SELECT name ,  grade FROM Highschooler"}, {"query": "Show all the grades of the high schoolers.", "sql": "SELECT grade FROM Highschooler"}, {"query": "What is the grade of each high schooler?", "sql": "SELECT grade FROM Highschooler"}, {"query": "What grade is Kyle in?", "sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\""}, {"query": "Return the grade for the high schooler named Kyle.", "sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\""}, {"query": "Show the names of all high schoolers in grade 10.", "sql": "SELECT name FROM Highschooler WHERE grade  =  10"}, {"query": "What are the names of all high schoolers in grade 10?", "sql": "SELECT name FROM Highschooler WHERE grade  =  10"}, {"query": "Show the ID of the high schooler named Kyle.", "sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\""}, {"query": "What is Kyle's id?", "sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\""}, {"query": "How many high schoolers are there in grade 9 or 10?", "sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10"}, {"query": "Count the number of high schoolers in grades 9 or 10.", "sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10"}, {"query": "Show the number of high schoolers for each grade.", "sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade"}, {"query": "How many high schoolers are in each grade?", "sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade"}, {"query": "Which grade has the most high schoolers?", "sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the grade that has the greatest number of high schoolers.", "sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show me all grades that have at least 4 students.", "sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4"}, {"query": "Which grades have 4 or more high schoolers?", "sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4"}, {"query": "Show the student IDs and numbers of friends corresponding to each.", "sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id"}, {"query": "How many friends does each student have?", "sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id"}, {"query": "Show the names of high school students and their corresponding number of friends.", "sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"}, {"query": "What are the names of the high schoolers and how many friends does each have?", "sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"}, {"query": "What is the name of the high schooler who has the greatest number of friends?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the name of the high school student with the most friends.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show the names of high schoolers who have at least 3 friends.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3"}, {"query": "What are the names of high schoolers who have 3 or more friends?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3"}, {"query": "Show the names of all of the high schooler Kyle's friends.", "sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""}, {"query": "Return the names of friends of the high school student Kyle.", "sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""}, {"query": "How many friends does the high school student Kyle have?", "sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""}, {"query": "Count the number of friends Kyle has.", "sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""}, {"query": "Show ids of all students who do not have any friends.", "sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"}, {"query": "What are the ids of high school students who do not have friends?", "sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"}, {"query": "Show names of all high school students who do not have any friends.", "sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"}, {"query": "What are the names of students who have no friends?", "sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"}, {"query": "Show the ids of high schoolers who have friends and are also liked by someone else.", "sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"}, {"query": "What are the ids of students who both have friends and are liked?", "sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"}, {"query": "Show name of all students who have some friends and also are liked by someone else.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"}, {"query": "What are the names of high schoolers who both have friends and are liked?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"}, {"query": "Count the number of likes for each student id.", "sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id"}, {"query": "How many likes correspond to each student id?", "sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id"}, {"query": "Show the names of high schoolers who have likes, and numbers of likes for each.", "sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"}, {"query": "What are the names of high schoolers who have likes, and how many likes does each have?", "sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"}, {"query": "What is the name of the high schooler who has the greatest number of likes?", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Give the name of the student with the most likes.", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Show the names of students who have at least 2 likes.", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2"}, {"query": "What are the names of students who have 2 or more likes?", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2"}, {"query": "Show the names of students who have a grade higher than 5 and have at least 2 friends.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2"}, {"query": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2"}, {"query": "How many likes does Kyle have?", "sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""}, {"query": "Return the number of likes that the high schooler named Kyle has.", "sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""}, {"query": "Find the average grade of all students who have some friends.", "sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"}, {"query": "What is the average grade of students who have friends?", "sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"}, {"query": "Find the minimum grade of students who have no friends.", "sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"}, {"query": "What is the lowest grade of students who do not have any friends?", "sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"}, {"query": "Which states have both owners and professionals living there?", "sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals"}, {"query": "Find the states where both owners and professionals live.", "sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals"}, {"query": "What is the average age of the dogs who have gone through any treatments?", "sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )"}, {"query": "Find the average age of the dogs who went through treatments.", "sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )"}, {"query": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.", "sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"}, {"query": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.", "sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"}, {"query": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .", "sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )"}, {"query": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?", "sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )"}, {"query": "Which first names are used for professionals or owners but are not used as dog names?", "sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"}, {"query": "Find the first names that are used for professionals or owners but are not used as dog names.", "sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"}, {"query": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.", "sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"}, {"query": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.", "sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"}, {"query": "Which owner owns the most dogs? List the owner id, first name and last name.", "sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Return the owner id, first name and last name of the owner who has the most dogs.", "sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which professionals have done at least two treatments? List the professional's id, role, and first name.", "sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"}, {"query": "What are the id, role, and first name of the professionals who have performed two or more treatments?", "sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"}, {"query": "What is the name of the breed with the most dogs?", "sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which breed do the most dogs have? Give me the breed name.", "sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"}, {"query": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.", "sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.", "sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"}, {"query": "What is the description of the treatment type that costs the least money in total?", "sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1"}, {"query": "Give me the description of the treatment type whose total cost is the lowest.", "sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1"}, {"query": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.", "sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"}, {"query": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.", "sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"}, {"query": "Which professionals have done at least two types of treatments? List the professional id and cell phone.", "sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"}, {"query": "Find the id and cell phone of the professionals who operate two or more types of treatments.", "sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"}, {"query": "What are the first name and last name of the professionals who have done treatment with cost below average?", "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"}, {"query": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"}, {"query": "List the date of each treatment, together with the first name of the professional who operated it.", "sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"query": "What are the date and the operating professional's first name of each treatment?", "sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"query": "List the cost of each treatment and the corresponding treatment type description.", "sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"}, {"query": "What are the cost and treatment type description of each treatment?", "sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"}, {"query": "List each owner's first name, last name, and the size of his for her dog.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"query": "What are each owner's first name, last name, and the size of their dog?", "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"query": "List pairs of the owner's first name and the dogs's name.", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"query": "What are each owner's first name and their dogs's name?", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"query": "List the names of the dogs of the rarest breed and the treatment dates of them.", "sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"}, {"query": "Which dogs are of the rarest breed? Show their names and treatment dates.", "sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"}, {"query": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"query": "Find the first names of owners living in Virginia and the names of dogs they own.", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"query": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"query": "Find the arriving date and the departing date of the dogs that received a treatment.", "sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"query": "List the last name of the owner owning the youngest dog.", "sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"}, {"query": "Who owns the youngest dog? Give me his or her last name.", "sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"}, {"query": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.", "sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'"}, {"query": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?", "sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'"}, {"query": "What are the arriving date and the departing date of all the dogs?", "sql": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"query": "List the arrival date and the departure date for all the dogs.", "sql": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"query": "How many dogs went through any treatments?", "sql": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"query": "Count the number of dogs that went through a treatment.", "sql": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"query": "How many professionals have performed any treatment to dogs?", "sql": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"query": "Find the number of professionals who have ever treated dogs.", "sql": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"query": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"query": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"query": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"query": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"query": "How many dogs have an age below the average?", "sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )"}, {"query": "Count the number of dogs of an age below the average.", "sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )"}, {"query": "How much does the most recent treatment cost?", "sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"query": "Show me the cost of the most recently performed treatment.", "sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"query": "How many dogs have not gone through any treatment?", "sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )"}, {"query": "Tell me the number of dogs that have not received any treatment .", "sql": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )"}, {"query": "How many owners temporarily do not have any dogs?", "sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )"}, {"query": "Find the number of owners who do not own any dogs at this moment.", "sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )"}, {"query": "How many professionals did not operate any treatment on dogs?", "sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )"}, {"query": "Find the number of professionals who have not treated any dogs.", "sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )"}, {"query": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"query": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"query": "What is the average age of all the dogs?", "sql": "SELECT avg(age) FROM Dogs"}, {"query": "Compute the average age of all the dogs.", "sql": "SELECT avg(age) FROM Dogs"}, {"query": "What is the age of the oldest dog?", "sql": "SELECT max(age) FROM Dogs"}, {"query": "Tell me the age of the oldest dog.", "sql": "SELECT max(age) FROM Dogs"}, {"query": "How much does each charge type costs? List both charge type and amount.", "sql": "SELECT charge_type ,  charge_amount FROM Charges"}, {"query": "List each charge type and its amount.", "sql": "SELECT charge_type ,  charge_amount FROM Charges"}, {"query": "How much does the most expensive charge type costs?", "sql": "SELECT max(charge_amount) FROM Charges"}, {"query": "What is the charge amount of the most expensive charge type?", "sql": "SELECT max(charge_amount) FROM Charges"}, {"query": "List the email, cell phone and home phone of all the professionals.", "sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"query": "What are the email, cell phone and home phone of each professional?", "sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"query": "What are all the possible breed type and size type combinations?", "sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"query": "Find the distinct breed type and size type combinations for dogs.", "sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"query": "List the first name of all the professionals along with the description of the treatment they have done.", "sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"}, {"query": "What are each professional's first name and description of the treatment they have performed?", "sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"}, {"query": "How many singers are there?", "sql": "SELECT count(*) FROM singer"}, {"query": "What is the count of singers?", "sql": "SELECT count(*) FROM singer"}, {"query": "List the name of singers in ascending order of net worth.", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"}, {"query": "What are the names of singers ordered by ascending net worth?", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"}, {"query": "What are the birth year and citizenship of singers?", "sql": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"query": "What are the birth years and citizenships of the singers?", "sql": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"query": "List the name of singers whose citizenship is not \"France\".", "sql": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"query": "What are the names of the singers who are not French citizens?", "sql": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"query": "Show the name of singers whose birth year is either 1948 or 1949?", "sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"}, {"query": "What are the names of the singers whose birth years are either 1948 or 1949?", "sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"}, {"query": "What is the name of the singer with the largest net worth?", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"query": "What is the name of the singer who is worth the most?", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"query": "Show different citizenship of singers and the number of singers of each citizenship.", "sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship"}, {"query": "For each citizenship, how many singers are from that country?", "sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship"}, {"query": "Please show the most common citizenship of singers.", "sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1"}, {"query": "What is the most common singer citizenship ?", "sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1"}, {"query": "Show different citizenships and the maximum net worth of singers of each citizenship.", "sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship"}, {"query": "For each citizenship, what is the maximum net worth?", "sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship"}, {"query": "Show titles of songs and names of singers.", "sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"query": "What are the song titles and singer names?", "sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"query": "Show distinct names of singers that have songs with sales more than 300000.", "sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"query": "what are the different names of the singers that have sales more than 300000?", "sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"query": "Show the names of singers that have more than one song.", "sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"}, {"query": "What are the names of the singers that have more than one songs?", "sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"}, {"query": "Show the names of singers and the total sales of their songs.", "sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"}, {"query": "For each singer name, what is the total sales for their songs?", "sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"}, {"query": "List the name of singers that do not have any song.", "sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"}, {"query": "What is the sname of every sing that does not have any song?", "sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"}, {"query": "Show the citizenship shared by singers with birth year before 1945 and after 1955.", "sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955"}, {"query": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?", "sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955"}, {"query": "How many available features are there in total?", "sql": "SELECT count(*) FROM Other_Available_Features"}, {"query": "What is the feature type name of feature AirCon?", "sql": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"query": "Show the property type descriptions of properties belonging to that code.", "sql": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code"}, {"query": "What are the names of properties that are either houses or apartments with more than 1 room?", "sql": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1"}]